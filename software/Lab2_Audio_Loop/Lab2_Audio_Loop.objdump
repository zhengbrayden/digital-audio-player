
Lab2_Audio_Loop.elf:     file format elf32-littlenios2
Lab2_Audio_Loop.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800248

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006de0 memsz 0x00006de0 flags r-x
    LOAD off    0x00007e00 vaddr 0x00806e00 paddr 0x00808a20 align 2**12
         filesz 0x00001c20 memsz 0x00001c20 flags rw-
    LOAD off    0x0000a640 vaddr 0x0080a640 paddr 0x0080a640 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006870  00800248  00800248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  00806ab8  00806ab8  00007ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c20  00806e00  00808a20  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0080a640  0080a640  0000a640  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  0080a794  0080a794  00009a20  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b10  00000000  00000000  00009a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017ec4  00000000  00000000  0000a558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000067e5  00000000  00000000  0002241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000727a  00000000  00000000  00028c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a94  00000000  00000000  0002fe7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e91  00000000  00000000  00031910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000034a7  00000000  00000000  000347a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00037c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000548  00000000  00000000  00037ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ae76  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003ae79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ae85  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ae86  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003ae87  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003ae8b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003ae8f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003ae93  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003ae9e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003aea9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0003aeb4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0003aeb7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005cac  00000000  00000000  0003aee6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008f514  00000000  00000000  00040b92  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800248 l    d  .text	00000000 .text
00806ab8 l    d  .rodata	00000000 .rodata
00806e00 l    d  .rwdata	00000000 .rwdata
0080a640 l    d  .bss	00000000 .bss
0080a794 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_Audio_Loop_bsp//obj/HAL/src/crt0.o
00800290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00800354 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800724 l     F .text	00000034 alt_dev_reg
00806e00 l     O .rwdata	00001060 jtag_uart_0
00807e60 l     O .rwdata	00000120 lcd_display
00807f80 l     O .rwdata	0000002c uart
00807fac l     O .rwdata	00000030 audio_i2c_config
00807fdc l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00800a48 l     F .text	00000210 altera_avalon_jtag_uart_irq
00800c58 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008089e0 l     O .rwdata	00000004 colstart
00801290 l     F .text	000000b8 lcd_write_command
00801348 l     F .text	000000d8 lcd_write_data
00801420 l     F .text	000000d0 lcd_clear_screen
008014f0 l     F .text	000001ec lcd_repaint_screen
008016dc l     F .text	000000cc lcd_scroll_up
008017a8 l     F .text	000002ac lcd_handle_escape
00801f2c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080216c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080231c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080241c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00802e0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802f60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802f8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008031f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008034b0 l     F .text	0000003c alt_get_errno
008034ec l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00806c7b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
008081b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804ab4 l     F .text	00000008 __fp_unlock
00804ac8 l     F .text	0000019c __sinit.part.1
00804c64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00806478 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00806564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00806644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080679c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00808a1c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00806984 l     F .text	0000003c alt_get_errno
0080a658 g     O .bss	00000004 alt_instruction_exception_handler
0080617c g     F .text	00000054 _isatty_r
00800440 g     F .text	0000007c alt_main
0080a694 g     O .bss	00000100 alt_irq
008061d0 g     F .text	00000060 _lseek_r
00808a20 g       *ABS*	00000000 __flash_rwdata_start
008027e0 g     F .text	00000060 alt_up_audio_read_fifo_avail
0080a794 g       *ABS*	00000000 __alt_heap_start
00802840 g     F .text	00000068 alt_up_audio_record_r
00805f04 g     F .text	0000005c __sseek
00804e04 g     F .text	00000010 __sinit
008042c8 g     F .text	00000140 __swbuf_r
00804c6c g     F .text	00000068 __sfmoreglue
00806778 g     F .text	00000024 __malloc_unlock
0080274c g     F .text	00000094 alt_up_audio_reset_audio_core
00804dec g     F .text	00000018 _cleanup
0080393c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00806120 g     F .text	0000005c _fstat_r
0080a65c g     O .bss	00000004 errno
00805e80 g     F .text	00000008 __seofread
0080270c g     F .text	00000040 alt_up_audio_write_interrupt_pending
0080a644 g     O .bss	00000004 alt_argv
008109e0 g       *ABS*	00000000 _gp
0080390c g     F .text	00000030 usleep
00808034 g     O .rwdata	00000180 alt_fd_list
0080312c g     F .text	00000090 alt_find_dev
00803e58 g     F .text	00000148 memcpy
00804abc g     F .text	0000000c _cleanup_r
008032b4 g     F .text	0000007c alt_io_redirect
00806ab8 g       *ABS*	00000000 __DTOR_END__
00803cf4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00802c28 g     F .text	00000050 alt_up_audio_read_fifo_head
00800e50 g     F .text	0000021c altera_avalon_jtag_uart_read
00806388 g     F .text	00000064 .hidden __udivsi3
008065a0 g     F .text	000000a4 isatty
00803c64 g     F .text	00000090 alt_icache_flush
0080a668 g     O .bss	00000004 __malloc_top_pad
00805dd8 g     F .text	00000054 _sbrk_r
00806230 g     F .text	00000060 _read_r
008089f4 g     O .rwdata	00000004 alt_max_fd
00802c78 g     F .text	00000068 alt_up_audio_write_fifo_head
0080601c g     F .text	000000f0 _fclose_r
00804a84 g     F .text	00000030 fflush
0080a664 g     O .bss	00000004 __malloc_max_sbrked_mem
00803330 g     F .text	00000180 alt_irq_register
00806680 g     F .text	000000d4 lseek
00808a0c g     O .rwdata	00000004 _global_impure_ptr
0080a794 g       *ABS*	00000000 __bss_end
00803804 g     F .text	00000108 alt_tick
00802538 g     F .text	0000003c alt_up_audio_open_dev
00804e24 g     F .text	00000018 __fp_lock_all
00802970 g     F .text	00000068 alt_up_audio_play_r
00803768 g     F .text	0000009c alt_alarm_stop
0080a64c g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d8 alt_irq_handler
0080800c g     O .rwdata	00000028 alt_dev_null
00802f18 g     F .text	00000048 alt_dcache_flush_all
00808a20 g       *ABS*	00000000 __ram_rwdata_end
008089ec g     O .rwdata	00000008 alt_dev_list
008069c0 g     F .text	000000f8 write
008040c8 g     F .text	000000a0 _putc_r
00806e00 g       *ABS*	00000000 __ram_rodata_end
008064b4 g     F .text	000000b0 fstat
008063ec g     F .text	00000058 .hidden __umodsi3
0080a794 g       *ABS*	00000000 end
00801a54 g     F .text	000004d8 altera_avalon_lcd_16207_write
00802458 g     F .text	000000e0 altera_avalon_uart_write
00800994 g     F .text	000000b4 altera_avalon_jtag_uart_init
008001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00806ab8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008021e8 g     F .text	00000074 alt_avalon_timer_sc_init
008022bc g     F .text	00000060 altera_avalon_uart_write_fd
0080106c g     F .text	00000224 altera_avalon_jtag_uart_write
00804e14 g     F .text	00000004 __sfp_lock_acquire
00804f78 g     F .text	00000310 _free_r
008004bc g     F .text	0000022c alt_printf
0080468c g     F .text	00000180 __call_exitprocs
00808a14 g     O .rwdata	00000004 __malloc_sbrk_base
00800248 g     F .text	0000004c _start
0080a650 g     O .bss	00000004 _alt_tick_rate
00802b20 g     F .text	00000108 alt_up_audio_write_fifo
0080a654 g     O .bss	00000004 _alt_nticks
008067d8 g     F .text	000000fc read
00800790 g     F .text	000000a0 alt_sys_init
00802a40 g     F .text	000000e0 alt_up_audio_read_fifo
00804574 g     F .text	00000118 __register_exitproc
00802674 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00800cf8 g     F .text	00000068 altera_avalon_jtag_uart_close
00806e00 g       *ABS*	00000000 __ram_rwdata_start
00806ab8 g       *ABS*	00000000 __ram_rodata_start
0080a66c g     O .bss	00000028 __malloc_current_mallinfo
00800830 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00803bc0 g     F .text	000000a4 alt_get_fd
00803960 g     F .text	00000158 alt_busy_sleep
00805fc8 g     F .text	00000054 _close_r
00802620 g     F .text	00000054 alt_up_audio_enable_write_interrupt
00803ddc g     F .text	0000007c memcmp
008008f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080a794 g       *ABS*	00000000 __alt_stack_base
00800940 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804420 g     F .text	00000154 __swsetup_r
008025c8 g     F .text	00000058 alt_up_audio_disable_read_interrupt
00804cd4 g     F .text	00000118 __sfp
008085d8 g     O .rwdata	00000408 __malloc_av_
00804e20 g     F .text	00000004 __sinit_lock_release
00805e2c g     F .text	00000054 __sread
00803ab8 g     F .text	00000108 alt_find_file
00802fc8 g     F .text	000000a4 alt_dev_llist_insert
00806754 g     F .text	00000024 __malloc_lock
008068d4 g     F .text	000000b0 sbrk
00804a28 g     F .text	0000005c _fflush_r
0080a640 g       *ABS*	00000000 __bss_start
00803fa0 g     F .text	00000128 memset
00800294 g     F .text	000000c0 main
00802910 g     F .text	00000060 alt_up_audio_write_fifo_space
0080a648 g     O .bss	00000004 alt_envp
0080a660 g     O .bss	00000004 __malloc_max_total_mem
00800890 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00804408 g     F .text	00000018 __swbuf
00801fd8 g     F .text	00000134 altera_avalon_lcd_16207_init
00805f60 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080610c g     F .text	00000014 fclose
008055cc g     F .text	0000080c _malloc_r
008089f8 g     O .rwdata	00000004 alt_errno
00805288 g     F .text	000000c4 _fwalk
00804168 g     F .text	000000c8 putc
00806290 g     F .text	00000084 .hidden __divsi3
00804e54 g     F .text	00000124 _malloc_trim_r
00806ab8 g       *ABS*	00000000 __CTOR_END__
00806ab8 g       *ABS*	00000000 __flash_rodata_start
00806ab8 g       *ABS*	00000000 __DTOR_LIST__
00800758 g     F .text	00000038 alt_irq_init
00803704 g     F .text	00000064 alt_release_fd
00803d90 g     F .text	00000014 atexit
00805f68 g     F .text	00000060 _write_r
00808a10 g     O .rwdata	00000004 _impure_ptr
0080a640 g     O .bss	00000004 alt_argc
0080480c g     F .text	0000021c __sflush_r
008030cc g     F .text	00000060 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00804e3c g     F .text	00000018 __fp_unlock_all
0080210c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008089e4 g     O .rwdata	00000008 alt_fs_list
008028a8 g     F .text	00000068 alt_up_audio_record_l
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808a20 g       *ABS*	00000000 _edata
0080225c g     F .text	00000060 altera_avalon_uart_read_fd
0080a794 g       *ABS*	00000000 _end
00800248 g       *ABS*	00000000 __ram_exceptions_end
00800d60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008029d8 g     F .text	00000068 alt_up_audio_play_l
00805e88 g     F .text	0000007c __swrite
00808a18 g     O .rwdata	00000004 __malloc_trim_threshold
00803da4 g     F .text	00000038 exit
0080534c g     F .text	000000c4 _fwalk_reent
00806314 g     F .text	00000074 .hidden __modsi3
00808a08 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804e18 g     F .text	00000004 __sfp_lock_release
00806b7a g     O .rodata	00000101 _ctype_
00806444 g     F .text	00000034 _exit
00802ce0 g     F .text	0000012c alt_alarm_start
00805410 g     F .text	000001bc __smakebuf_r
00804230 g     F .text	00000098 strlen
008035b0 g     F .text	00000154 open
008006e8 g     F .text	0000003c alt_putchar
008031bc g     F .text	00000034 alt_icache_flush_all
008089fc g     O .rwdata	00000004 alt_priority_mask
00802358 g     F .text	000000c4 altera_avalon_uart_read
00808a00 g     O .rwdata	00000008 alt_alarm_list
0080306c g     F .text	00000060 _do_ctors
00802e48 g     F .text	000000d0 close
008003bc g     F .text	00000084 alt_load
00802574 g     F .text	00000054 alt_up_audio_enable_read_interrupt
00804e1c g     F .text	00000004 __sinit_lock_acquire
008026cc g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409214 	ori	at,at,584
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10a9a504 	addi	r2,r2,-22892
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10a9a504 	addi	r2,r2,-22892
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e8:	000531fa 	rdctl	r2,exception
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001f0:	e0bffd17 	ldw	r2,-12(fp)
  8001f4:	10801f0c 	andi	r2,r2,124
  8001f8:	1004d0ba 	srli	r2,r2,2
  8001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  800200:	0005333a 	rdctl	r2,badaddr
  800204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800208:	d0a71e17 	ldw	r2,-25480(gp)
  80020c:	10000726 	beq	r2,zero,80022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800210:	d0a71e17 	ldw	r2,-25480(gp)
  800214:	e0fffd17 	ldw	r3,-12(fp)
  800218:	e1bffe17 	ldw	r6,-8(fp)
  80021c:	e17fff17 	ldw	r5,-4(fp)
  800220:	1809883a 	mov	r4,r3
  800224:	103ee83a 	callr	r2
  800228:	00000206 	br	800234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800230:	0005883a 	mov	r2,zero
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

Disassembly of section .text:

00800248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800254:	00bffd16 	blt	zero,r2,80024c <__alt_data_end+0xff80024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800258:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800260:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800264:	d6827814 	ori	gp,gp,2528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800268:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  80026c:	10a99014 	ori	r2,r2,42560

    movhi r3, %hi(__bss_end)
  800270:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800274:	18e9e514 	ori	r3,r3,42900

    beq r2, r3, 1f
  800278:	10c00326 	beq	r2,r3,800288 <_start+0x40>

0:
    stw zero, (r2)
  80027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800284:	10fffd36 	bltu	r2,r3,80027c <__alt_data_end+0xff80027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800288:	08003bc0 	call	8003bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80028c:	08004400 	call	800440 <alt_main>

00800290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800290:	003fff06 	br	800290 <__alt_data_end+0xff800290>

00800294 <main>:
 */

#include <stdio.h>
#include "altera_up_avalon_audio.h"

int main(void) {
  800294:	defffa04 	addi	sp,sp,-24
  800298:	dfc00515 	stw	ra,20(sp)
  80029c:	df000415 	stw	fp,16(sp)
  8002a0:	df000404 	addi	fp,sp,16
	alt_up_audio_dev * audio_dev;
	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
  8002a4:	01002034 	movhi	r4,128
  8002a8:	211aae04 	addi	r4,r4,27320
  8002ac:	08025380 	call	802538 <alt_up_audio_open_dev>
  8002b0:	e0bffc15 	stw	r2,-16(fp)
	if ( audio_dev == NULL)
  8002b4:	e0bffc17 	ldw	r2,-16(fp)
  8002b8:	1000041e 	bne	r2,zero,8002cc <main+0x38>
	alt_printf ("Error: could not open audio device \n");
  8002bc:	01002034 	movhi	r4,128
  8002c0:	211ab104 	addi	r4,r4,27332
  8002c4:	08004bc0 	call	8004bc <alt_printf>
  8002c8:	00000306 	br	8002d8 <main+0x44>
	else
	alt_printf ("Opened audio device \n");
  8002cc:	01002034 	movhi	r4,128
  8002d0:	211abb04 	addi	r4,r4,27372
  8002d4:	08004bc0 	call	8004bc <alt_printf>
	/* read and echo audio data */
	while(1){
		int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_RIGHT);
  8002d8:	01400044 	movi	r5,1
  8002dc:	e13ffc17 	ldw	r4,-16(fp)
  8002e0:	08027e00 	call	8027e0 <alt_up_audio_read_fifo_avail>
  8002e4:	e0bffd15 	stw	r2,-12(fp)
		// check if data is available
		if ( fifospace > 0 ) {
  8002e8:	e0bffd17 	ldw	r2,-12(fp)
  8002ec:	00bffa0e 	bge	zero,r2,8002d8 <__alt_data_end+0xff8002d8>
			// read audio buffer
			alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
  8002f0:	e0bfff04 	addi	r2,fp,-4
  8002f4:	01c00044 	movi	r7,1
  8002f8:	01800044 	movi	r6,1
  8002fc:	100b883a 	mov	r5,r2
  800300:	e13ffc17 	ldw	r4,-16(fp)
  800304:	0802a400 	call	802a40 <alt_up_audio_read_fifo>
			alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  800308:	e0bffe04 	addi	r2,fp,-8
  80030c:	000f883a 	mov	r7,zero
  800310:	01800044 	movi	r6,1
  800314:	100b883a 	mov	r5,r2
  800318:	e13ffc17 	ldw	r4,-16(fp)
  80031c:	0802a400 	call	802a40 <alt_up_audio_read_fifo>
			// write audio buffer
			alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
  800320:	e0bfff04 	addi	r2,fp,-4
  800324:	01c00044 	movi	r7,1
  800328:	01800044 	movi	r6,1
  80032c:	100b883a 	mov	r5,r2
  800330:	e13ffc17 	ldw	r4,-16(fp)
  800334:	0802b200 	call	802b20 <alt_up_audio_write_fifo>
			alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  800338:	e0bffe04 	addi	r2,fp,-8
  80033c:	000f883a 	mov	r7,zero
  800340:	01800044 	movi	r6,1
  800344:	100b883a 	mov	r5,r2
  800348:	e13ffc17 	ldw	r4,-16(fp)
  80034c:	0802b200 	call	802b20 <alt_up_audio_write_fifo>
		}
	}
  800350:	003fe106 	br	8002d8 <__alt_data_end+0xff8002d8>

00800354 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800354:	defffc04 	addi	sp,sp,-16
  800358:	df000315 	stw	fp,12(sp)
  80035c:	df000304 	addi	fp,sp,12
  800360:	e13ffd15 	stw	r4,-12(fp)
  800364:	e17ffe15 	stw	r5,-8(fp)
  800368:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80036c:	e0fffe17 	ldw	r3,-8(fp)
  800370:	e0bffd17 	ldw	r2,-12(fp)
  800374:	18800c26 	beq	r3,r2,8003a8 <alt_load_section+0x54>
  {
    while( to != end )
  800378:	00000806 	br	80039c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80037c:	e0bffe17 	ldw	r2,-8(fp)
  800380:	10c00104 	addi	r3,r2,4
  800384:	e0fffe15 	stw	r3,-8(fp)
  800388:	e0fffd17 	ldw	r3,-12(fp)
  80038c:	19000104 	addi	r4,r3,4
  800390:	e13ffd15 	stw	r4,-12(fp)
  800394:	18c00017 	ldw	r3,0(r3)
  800398:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80039c:	e0fffe17 	ldw	r3,-8(fp)
  8003a0:	e0bfff17 	ldw	r2,-4(fp)
  8003a4:	18bff51e 	bne	r3,r2,80037c <__alt_data_end+0xff80037c>
    {
      *to++ = *from++;
    }
  }
}
  8003a8:	0001883a 	nop
  8003ac:	e037883a 	mov	sp,fp
  8003b0:	df000017 	ldw	fp,0(sp)
  8003b4:	dec00104 	addi	sp,sp,4
  8003b8:	f800283a 	ret

008003bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8003bc:	defffe04 	addi	sp,sp,-8
  8003c0:	dfc00115 	stw	ra,4(sp)
  8003c4:	df000015 	stw	fp,0(sp)
  8003c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8003cc:	01802074 	movhi	r6,129
  8003d0:	31a28804 	addi	r6,r6,-30176
  8003d4:	01402034 	movhi	r5,128
  8003d8:	295b8004 	addi	r5,r5,28160
  8003dc:	01002074 	movhi	r4,129
  8003e0:	21228804 	addi	r4,r4,-30176
  8003e4:	08003540 	call	800354 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8003e8:	01802034 	movhi	r6,128
  8003ec:	31809204 	addi	r6,r6,584
  8003f0:	01402034 	movhi	r5,128
  8003f4:	29400804 	addi	r5,r5,32
  8003f8:	01002034 	movhi	r4,128
  8003fc:	21000804 	addi	r4,r4,32
  800400:	08003540 	call	800354 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800404:	01802034 	movhi	r6,128
  800408:	319b8004 	addi	r6,r6,28160
  80040c:	01402034 	movhi	r5,128
  800410:	295aae04 	addi	r5,r5,27320
  800414:	01002034 	movhi	r4,128
  800418:	211aae04 	addi	r4,r4,27320
  80041c:	08003540 	call	800354 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800420:	0802f180 	call	802f18 <alt_dcache_flush_all>
  alt_icache_flush_all();
  800424:	08031bc0 	call	8031bc <alt_icache_flush_all>
}
  800428:	0001883a 	nop
  80042c:	e037883a 	mov	sp,fp
  800430:	dfc00117 	ldw	ra,4(sp)
  800434:	df000017 	ldw	fp,0(sp)
  800438:	dec00204 	addi	sp,sp,8
  80043c:	f800283a 	ret

00800440 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800440:	defffd04 	addi	sp,sp,-12
  800444:	dfc00215 	stw	ra,8(sp)
  800448:	df000115 	stw	fp,4(sp)
  80044c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800450:	0009883a 	mov	r4,zero
  800454:	08007580 	call	800758 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800458:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80045c:	08007900 	call	800790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800460:	01802034 	movhi	r6,128
  800464:	319ac104 	addi	r6,r6,27396
  800468:	01402034 	movhi	r5,128
  80046c:	295ac104 	addi	r5,r5,27396
  800470:	01002034 	movhi	r4,128
  800474:	211ac104 	addi	r4,r4,27396
  800478:	08032b40 	call	8032b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80047c:	080306c0 	call	80306c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800480:	01002034 	movhi	r4,128
  800484:	210c3304 	addi	r4,r4,12492
  800488:	0803d900 	call	803d90 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80048c:	d0a71817 	ldw	r2,-25504(gp)
  800490:	d0e71917 	ldw	r3,-25500(gp)
  800494:	d1271a17 	ldw	r4,-25496(gp)
  800498:	200d883a 	mov	r6,r4
  80049c:	180b883a 	mov	r5,r3
  8004a0:	1009883a 	mov	r4,r2
  8004a4:	08002940 	call	800294 <main>
  8004a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8004ac:	01000044 	movi	r4,1
  8004b0:	0802e480 	call	802e48 <close>
  exit (result);
  8004b4:	e13fff17 	ldw	r4,-4(fp)
  8004b8:	0803da40 	call	803da4 <exit>

008004bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  8004bc:	defff204 	addi	sp,sp,-56
  8004c0:	dfc00a15 	stw	ra,40(sp)
  8004c4:	df000915 	stw	fp,36(sp)
  8004c8:	df000904 	addi	fp,sp,36
  8004cc:	e13fff15 	stw	r4,-4(fp)
  8004d0:	e1400215 	stw	r5,8(fp)
  8004d4:	e1800315 	stw	r6,12(fp)
  8004d8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  8004dc:	e0800204 	addi	r2,fp,8
  8004e0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  8004e4:	e0bfff17 	ldw	r2,-4(fp)
  8004e8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  8004ec:	00006f06 	br	8006ac <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8004f0:	e0bff807 	ldb	r2,-32(fp)
  8004f4:	10800960 	cmpeqi	r2,r2,37
  8004f8:	1000041e 	bne	r2,zero,80050c <alt_printf+0x50>
        {
            alt_putchar(c);
  8004fc:	e0bff807 	ldb	r2,-32(fp)
  800500:	1009883a 	mov	r4,r2
  800504:	08006e80 	call	8006e8 <alt_putchar>
  800508:	00006806 	br	8006ac <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80050c:	e0bff717 	ldw	r2,-36(fp)
  800510:	10c00044 	addi	r3,r2,1
  800514:	e0fff715 	stw	r3,-36(fp)
  800518:	10800003 	ldbu	r2,0(r2)
  80051c:	e0bff805 	stb	r2,-32(fp)
  800520:	e0bff807 	ldb	r2,-32(fp)
  800524:	10006926 	beq	r2,zero,8006cc <alt_printf+0x210>
            {
                if (c == '%')
  800528:	e0bff807 	ldb	r2,-32(fp)
  80052c:	10800958 	cmpnei	r2,r2,37
  800530:	1000041e 	bne	r2,zero,800544 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  800534:	e0bff807 	ldb	r2,-32(fp)
  800538:	1009883a 	mov	r4,r2
  80053c:	08006e80 	call	8006e8 <alt_putchar>
  800540:	00005a06 	br	8006ac <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  800544:	e0bff807 	ldb	r2,-32(fp)
  800548:	108018d8 	cmpnei	r2,r2,99
  80054c:	1000081e 	bne	r2,zero,800570 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  800550:	e0bffe17 	ldw	r2,-8(fp)
  800554:	10c00104 	addi	r3,r2,4
  800558:	e0fffe15 	stw	r3,-8(fp)
  80055c:	10800017 	ldw	r2,0(r2)
  800560:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  800564:	e13ffd17 	ldw	r4,-12(fp)
  800568:	08006e80 	call	8006e8 <alt_putchar>
  80056c:	00004f06 	br	8006ac <alt_printf+0x1f0>
                }
                else if (c == 'x')
  800570:	e0bff807 	ldb	r2,-32(fp)
  800574:	10801e18 	cmpnei	r2,r2,120
  800578:	1000341e 	bne	r2,zero,80064c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80057c:	e0bffe17 	ldw	r2,-8(fp)
  800580:	10c00104 	addi	r3,r2,4
  800584:	e0fffe15 	stw	r3,-8(fp)
  800588:	10800017 	ldw	r2,0(r2)
  80058c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  800590:	e0bffb17 	ldw	r2,-20(fp)
  800594:	1000031e 	bne	r2,zero,8005a4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  800598:	01000c04 	movi	r4,48
  80059c:	08006e80 	call	8006e8 <alt_putchar>
                        continue;
  8005a0:	00004206 	br	8006ac <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  8005a4:	00800704 	movi	r2,28
  8005a8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  8005ac:	00000306 	br	8005bc <alt_printf+0x100>
                        digit_shift -= 4;
  8005b0:	e0bff917 	ldw	r2,-28(fp)
  8005b4:	10bfff04 	addi	r2,r2,-4
  8005b8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  8005bc:	00c003c4 	movi	r3,15
  8005c0:	e0bff917 	ldw	r2,-28(fp)
  8005c4:	1884983a 	sll	r2,r3,r2
  8005c8:	1007883a 	mov	r3,r2
  8005cc:	e0bffb17 	ldw	r2,-20(fp)
  8005d0:	1884703a 	and	r2,r3,r2
  8005d4:	103ff626 	beq	r2,zero,8005b0 <__alt_data_end+0xff8005b0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  8005d8:	00001906 	br	800640 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  8005dc:	00c003c4 	movi	r3,15
  8005e0:	e0bff917 	ldw	r2,-28(fp)
  8005e4:	1884983a 	sll	r2,r3,r2
  8005e8:	1007883a 	mov	r3,r2
  8005ec:	e0bffb17 	ldw	r2,-20(fp)
  8005f0:	1886703a 	and	r3,r3,r2
  8005f4:	e0bff917 	ldw	r2,-28(fp)
  8005f8:	1884d83a 	srl	r2,r3,r2
  8005fc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  800600:	e0bffc17 	ldw	r2,-16(fp)
  800604:	108002a8 	cmpgeui	r2,r2,10
  800608:	1000041e 	bne	r2,zero,80061c <alt_printf+0x160>
                            c = '0' + digit;
  80060c:	e0bffc17 	ldw	r2,-16(fp)
  800610:	10800c04 	addi	r2,r2,48
  800614:	e0bff805 	stb	r2,-32(fp)
  800618:	00000306 	br	800628 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  80061c:	e0bffc17 	ldw	r2,-16(fp)
  800620:	108015c4 	addi	r2,r2,87
  800624:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  800628:	e0bff807 	ldb	r2,-32(fp)
  80062c:	1009883a 	mov	r4,r2
  800630:	08006e80 	call	8006e8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  800634:	e0bff917 	ldw	r2,-28(fp)
  800638:	10bfff04 	addi	r2,r2,-4
  80063c:	e0bff915 	stw	r2,-28(fp)
  800640:	e0bff917 	ldw	r2,-28(fp)
  800644:	103fe50e 	bge	r2,zero,8005dc <__alt_data_end+0xff8005dc>
  800648:	00001806 	br	8006ac <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80064c:	e0bff807 	ldb	r2,-32(fp)
  800650:	10801cd8 	cmpnei	r2,r2,115
  800654:	1000151e 	bne	r2,zero,8006ac <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  800658:	e0bffe17 	ldw	r2,-8(fp)
  80065c:	10c00104 	addi	r3,r2,4
  800660:	e0fffe15 	stw	r3,-8(fp)
  800664:	10800017 	ldw	r2,0(r2)
  800668:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  80066c:	00000906 	br	800694 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  800670:	e0bffa17 	ldw	r2,-24(fp)
  800674:	10c00044 	addi	r3,r2,1
  800678:	e0fffa15 	stw	r3,-24(fp)
  80067c:	10800003 	ldbu	r2,0(r2)
  800680:	10803fcc 	andi	r2,r2,255
  800684:	1080201c 	xori	r2,r2,128
  800688:	10bfe004 	addi	r2,r2,-128
  80068c:	1009883a 	mov	r4,r2
  800690:	08006e80 	call	8006e8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  800694:	e0bffa17 	ldw	r2,-24(fp)
  800698:	10800003 	ldbu	r2,0(r2)
  80069c:	10803fcc 	andi	r2,r2,255
  8006a0:	1080201c 	xori	r2,r2,128
  8006a4:	10bfe004 	addi	r2,r2,-128
  8006a8:	103ff11e 	bne	r2,zero,800670 <__alt_data_end+0xff800670>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8006ac:	e0bff717 	ldw	r2,-36(fp)
  8006b0:	10c00044 	addi	r3,r2,1
  8006b4:	e0fff715 	stw	r3,-36(fp)
  8006b8:	10800003 	ldbu	r2,0(r2)
  8006bc:	e0bff805 	stb	r2,-32(fp)
  8006c0:	e0bff807 	ldb	r2,-32(fp)
  8006c4:	103f8a1e 	bne	r2,zero,8004f0 <__alt_data_end+0xff8004f0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8006c8:	00000106 	br	8006d0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  8006cc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8006d0:	0001883a 	nop
  8006d4:	e037883a 	mov	sp,fp
  8006d8:	dfc00117 	ldw	ra,4(sp)
  8006dc:	df000017 	ldw	fp,0(sp)
  8006e0:	dec00504 	addi	sp,sp,20
  8006e4:	f800283a 	ret

008006e8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8006e8:	defffd04 	addi	sp,sp,-12
  8006ec:	dfc00215 	stw	ra,8(sp)
  8006f0:	df000115 	stw	fp,4(sp)
  8006f4:	df000104 	addi	fp,sp,4
  8006f8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  8006fc:	d0a00c17 	ldw	r2,-32720(gp)
  800700:	10800217 	ldw	r2,8(r2)
  800704:	100b883a 	mov	r5,r2
  800708:	e13fff17 	ldw	r4,-4(fp)
  80070c:	08041680 	call	804168 <putc>
#endif
#endif
}
  800710:	e037883a 	mov	sp,fp
  800714:	dfc00117 	ldw	ra,4(sp)
  800718:	df000017 	ldw	fp,0(sp)
  80071c:	dec00204 	addi	sp,sp,8
  800720:	f800283a 	ret

00800724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800724:	defffd04 	addi	sp,sp,-12
  800728:	dfc00215 	stw	ra,8(sp)
  80072c:	df000115 	stw	fp,4(sp)
  800730:	df000104 	addi	fp,sp,4
  800734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800738:	d1600304 	addi	r5,gp,-32756
  80073c:	e13fff17 	ldw	r4,-4(fp)
  800740:	0802fc80 	call	802fc8 <alt_dev_llist_insert>
}
  800744:	e037883a 	mov	sp,fp
  800748:	dfc00117 	ldw	ra,4(sp)
  80074c:	df000017 	ldw	fp,0(sp)
  800750:	dec00204 	addi	sp,sp,8
  800754:	f800283a 	ret

00800758 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800758:	defffd04 	addi	sp,sp,-12
  80075c:	dfc00215 	stw	ra,8(sp)
  800760:	df000115 	stw	fp,4(sp)
  800764:	df000104 	addi	fp,sp,4
  800768:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80076c:	080393c0 	call	80393c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800770:	00800044 	movi	r2,1
  800774:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800778:	0001883a 	nop
  80077c:	e037883a 	mov	sp,fp
  800780:	dfc00117 	ldw	ra,4(sp)
  800784:	df000017 	ldw	fp,0(sp)
  800788:	dec00204 	addi	sp,sp,8
  80078c:	f800283a 	ret

00800790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800790:	defffe04 	addi	sp,sp,-8
  800794:	dfc00115 	stw	ra,4(sp)
  800798:	df000015 	stw	fp,0(sp)
  80079c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  8007a0:	01c0fa04 	movi	r7,1000
  8007a4:	01800104 	movi	r6,4
  8007a8:	000b883a 	mov	r5,zero
  8007ac:	01004034 	movhi	r4,256
  8007b0:	21042004 	addi	r4,r4,4224
  8007b4:	08021e80 	call	8021e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8007b8:	000d883a 	mov	r6,zero
  8007bc:	000b883a 	mov	r5,zero
  8007c0:	01002034 	movhi	r4,128
  8007c4:	211b8a04 	addi	r4,r4,28200
  8007c8:	08009940 	call	800994 <altera_avalon_jtag_uart_init>
  8007cc:	01002034 	movhi	r4,128
  8007d0:	211b8004 	addi	r4,r4,28160
  8007d4:	08007240 	call	800724 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  8007d8:	01002034 	movhi	r4,128
  8007dc:	211fa204 	addi	r4,r4,32392
  8007e0:	0801fd80 	call	801fd8 <altera_avalon_lcd_16207_init>
  8007e4:	01002034 	movhi	r4,128
  8007e8:	211f9804 	addi	r4,r4,32352
  8007ec:	08007240 	call	800724 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  8007f0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8007f4:	01002034 	movhi	r4,128
  8007f8:	211fe004 	addi	r4,r4,32640
  8007fc:	08007240 	call	800724 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  800800:	01002034 	movhi	r4,128
  800804:	211feb04 	addi	r4,r4,32684
  800808:	08007240 	call	800724 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  80080c:	01002034 	movhi	r4,128
  800810:	211ff704 	addi	r4,r4,32732
  800814:	08007240 	call	800724 <alt_dev_reg>
}
  800818:	0001883a 	nop
  80081c:	e037883a 	mov	sp,fp
  800820:	dfc00117 	ldw	ra,4(sp)
  800824:	df000017 	ldw	fp,0(sp)
  800828:	dec00204 	addi	sp,sp,8
  80082c:	f800283a 	ret

00800830 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800830:	defffa04 	addi	sp,sp,-24
  800834:	dfc00515 	stw	ra,20(sp)
  800838:	df000415 	stw	fp,16(sp)
  80083c:	df000404 	addi	fp,sp,16
  800840:	e13ffd15 	stw	r4,-12(fp)
  800844:	e17ffe15 	stw	r5,-8(fp)
  800848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80084c:	e0bffd17 	ldw	r2,-12(fp)
  800850:	10800017 	ldw	r2,0(r2)
  800854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800858:	e0bffc17 	ldw	r2,-16(fp)
  80085c:	10c00a04 	addi	r3,r2,40
  800860:	e0bffd17 	ldw	r2,-12(fp)
  800864:	10800217 	ldw	r2,8(r2)
  800868:	100f883a 	mov	r7,r2
  80086c:	e1bfff17 	ldw	r6,-4(fp)
  800870:	e17ffe17 	ldw	r5,-8(fp)
  800874:	1809883a 	mov	r4,r3
  800878:	0800e500 	call	800e50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80087c:	e037883a 	mov	sp,fp
  800880:	dfc00117 	ldw	ra,4(sp)
  800884:	df000017 	ldw	fp,0(sp)
  800888:	dec00204 	addi	sp,sp,8
  80088c:	f800283a 	ret

00800890 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  800890:	defffa04 	addi	sp,sp,-24
  800894:	dfc00515 	stw	ra,20(sp)
  800898:	df000415 	stw	fp,16(sp)
  80089c:	df000404 	addi	fp,sp,16
  8008a0:	e13ffd15 	stw	r4,-12(fp)
  8008a4:	e17ffe15 	stw	r5,-8(fp)
  8008a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8008ac:	e0bffd17 	ldw	r2,-12(fp)
  8008b0:	10800017 	ldw	r2,0(r2)
  8008b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8008b8:	e0bffc17 	ldw	r2,-16(fp)
  8008bc:	10c00a04 	addi	r3,r2,40
  8008c0:	e0bffd17 	ldw	r2,-12(fp)
  8008c4:	10800217 	ldw	r2,8(r2)
  8008c8:	100f883a 	mov	r7,r2
  8008cc:	e1bfff17 	ldw	r6,-4(fp)
  8008d0:	e17ffe17 	ldw	r5,-8(fp)
  8008d4:	1809883a 	mov	r4,r3
  8008d8:	080106c0 	call	80106c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8008dc:	e037883a 	mov	sp,fp
  8008e0:	dfc00117 	ldw	ra,4(sp)
  8008e4:	df000017 	ldw	fp,0(sp)
  8008e8:	dec00204 	addi	sp,sp,8
  8008ec:	f800283a 	ret

008008f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8008f0:	defffc04 	addi	sp,sp,-16
  8008f4:	dfc00315 	stw	ra,12(sp)
  8008f8:	df000215 	stw	fp,8(sp)
  8008fc:	df000204 	addi	fp,sp,8
  800900:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800904:	e0bfff17 	ldw	r2,-4(fp)
  800908:	10800017 	ldw	r2,0(r2)
  80090c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800910:	e0bffe17 	ldw	r2,-8(fp)
  800914:	10c00a04 	addi	r3,r2,40
  800918:	e0bfff17 	ldw	r2,-4(fp)
  80091c:	10800217 	ldw	r2,8(r2)
  800920:	100b883a 	mov	r5,r2
  800924:	1809883a 	mov	r4,r3
  800928:	0800cf80 	call	800cf8 <altera_avalon_jtag_uart_close>
}
  80092c:	e037883a 	mov	sp,fp
  800930:	dfc00117 	ldw	ra,4(sp)
  800934:	df000017 	ldw	fp,0(sp)
  800938:	dec00204 	addi	sp,sp,8
  80093c:	f800283a 	ret

00800940 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  800940:	defffa04 	addi	sp,sp,-24
  800944:	dfc00515 	stw	ra,20(sp)
  800948:	df000415 	stw	fp,16(sp)
  80094c:	df000404 	addi	fp,sp,16
  800950:	e13ffd15 	stw	r4,-12(fp)
  800954:	e17ffe15 	stw	r5,-8(fp)
  800958:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80095c:	e0bffd17 	ldw	r2,-12(fp)
  800960:	10800017 	ldw	r2,0(r2)
  800964:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  800968:	e0bffc17 	ldw	r2,-16(fp)
  80096c:	10800a04 	addi	r2,r2,40
  800970:	e1bfff17 	ldw	r6,-4(fp)
  800974:	e17ffe17 	ldw	r5,-8(fp)
  800978:	1009883a 	mov	r4,r2
  80097c:	0800d600 	call	800d60 <altera_avalon_jtag_uart_ioctl>
}
  800980:	e037883a 	mov	sp,fp
  800984:	dfc00117 	ldw	ra,4(sp)
  800988:	df000017 	ldw	fp,0(sp)
  80098c:	dec00204 	addi	sp,sp,8
  800990:	f800283a 	ret

00800994 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  800994:	defffb04 	addi	sp,sp,-20
  800998:	dfc00415 	stw	ra,16(sp)
  80099c:	df000315 	stw	fp,12(sp)
  8009a0:	df000304 	addi	fp,sp,12
  8009a4:	e13ffd15 	stw	r4,-12(fp)
  8009a8:	e17ffe15 	stw	r5,-8(fp)
  8009ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8009b0:	e0bffd17 	ldw	r2,-12(fp)
  8009b4:	00c00044 	movi	r3,1
  8009b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8009bc:	e0bffd17 	ldw	r2,-12(fp)
  8009c0:	10800017 	ldw	r2,0(r2)
  8009c4:	10800104 	addi	r2,r2,4
  8009c8:	1007883a 	mov	r3,r2
  8009cc:	e0bffd17 	ldw	r2,-12(fp)
  8009d0:	10800817 	ldw	r2,32(r2)
  8009d4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8009d8:	e0bfff17 	ldw	r2,-4(fp)
  8009dc:	01802034 	movhi	r6,128
  8009e0:	31829204 	addi	r6,r6,2632
  8009e4:	e17ffd17 	ldw	r5,-12(fp)
  8009e8:	1009883a 	mov	r4,r2
  8009ec:	08033300 	call	803330 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8009f0:	e0bffd17 	ldw	r2,-12(fp)
  8009f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8009f8:	e0bffd17 	ldw	r2,-12(fp)
  8009fc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800a00:	d0e71c17 	ldw	r3,-25488(gp)
  800a04:	e1fffd17 	ldw	r7,-12(fp)
  800a08:	01802034 	movhi	r6,128
  800a0c:	31831604 	addi	r6,r6,3160
  800a10:	180b883a 	mov	r5,r3
  800a14:	1009883a 	mov	r4,r2
  800a18:	0802ce00 	call	802ce0 <alt_alarm_start>
  800a1c:	1000040e 	bge	r2,zero,800a30 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800a20:	e0fffd17 	ldw	r3,-12(fp)
  800a24:	00a00034 	movhi	r2,32768
  800a28:	10bfffc4 	addi	r2,r2,-1
  800a2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800a30:	0001883a 	nop
  800a34:	e037883a 	mov	sp,fp
  800a38:	dfc00117 	ldw	ra,4(sp)
  800a3c:	df000017 	ldw	fp,0(sp)
  800a40:	dec00204 	addi	sp,sp,8
  800a44:	f800283a 	ret

00800a48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  800a48:	defff704 	addi	sp,sp,-36
  800a4c:	df000815 	stw	fp,32(sp)
  800a50:	df000804 	addi	fp,sp,32
  800a54:	e13ffe15 	stw	r4,-8(fp)
  800a58:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  800a5c:	e0bffe17 	ldw	r2,-8(fp)
  800a60:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  800a64:	e0bffa17 	ldw	r2,-24(fp)
  800a68:	10800017 	ldw	r2,0(r2)
  800a6c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800a70:	e0bffb17 	ldw	r2,-20(fp)
  800a74:	10800104 	addi	r2,r2,4
  800a78:	10800037 	ldwio	r2,0(r2)
  800a7c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  800a80:	e0bffc17 	ldw	r2,-16(fp)
  800a84:	1080c00c 	andi	r2,r2,768
  800a88:	10006d26 	beq	r2,zero,800c40 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  800a8c:	e0bffc17 	ldw	r2,-16(fp)
  800a90:	1080400c 	andi	r2,r2,256
  800a94:	10003526 	beq	r2,zero,800b6c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  800a98:	00800074 	movhi	r2,1
  800a9c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800aa0:	e0bffa17 	ldw	r2,-24(fp)
  800aa4:	10800a17 	ldw	r2,40(r2)
  800aa8:	10800044 	addi	r2,r2,1
  800aac:	1081ffcc 	andi	r2,r2,2047
  800ab0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  800ab4:	e0bffa17 	ldw	r2,-24(fp)
  800ab8:	10c00b17 	ldw	r3,44(r2)
  800abc:	e0bffd17 	ldw	r2,-12(fp)
  800ac0:	18801526 	beq	r3,r2,800b18 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  800ac4:	e0bffb17 	ldw	r2,-20(fp)
  800ac8:	10800037 	ldwio	r2,0(r2)
  800acc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  800ad0:	e0bff817 	ldw	r2,-32(fp)
  800ad4:	10a0000c 	andi	r2,r2,32768
  800ad8:	10001126 	beq	r2,zero,800b20 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800adc:	e0bffa17 	ldw	r2,-24(fp)
  800ae0:	10800a17 	ldw	r2,40(r2)
  800ae4:	e0fff817 	ldw	r3,-32(fp)
  800ae8:	1809883a 	mov	r4,r3
  800aec:	e0fffa17 	ldw	r3,-24(fp)
  800af0:	1885883a 	add	r2,r3,r2
  800af4:	10800e04 	addi	r2,r2,56
  800af8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800afc:	e0bffa17 	ldw	r2,-24(fp)
  800b00:	10800a17 	ldw	r2,40(r2)
  800b04:	10800044 	addi	r2,r2,1
  800b08:	10c1ffcc 	andi	r3,r2,2047
  800b0c:	e0bffa17 	ldw	r2,-24(fp)
  800b10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  800b14:	003fe206 	br	800aa0 <__alt_data_end+0xff800aa0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  800b18:	0001883a 	nop
  800b1c:	00000106 	br	800b24 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  800b20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800b24:	e0bff817 	ldw	r2,-32(fp)
  800b28:	10bfffec 	andhi	r2,r2,65535
  800b2c:	10000f26 	beq	r2,zero,800b6c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800b30:	e0bffa17 	ldw	r2,-24(fp)
  800b34:	10c00817 	ldw	r3,32(r2)
  800b38:	00bfff84 	movi	r2,-2
  800b3c:	1886703a 	and	r3,r3,r2
  800b40:	e0bffa17 	ldw	r2,-24(fp)
  800b44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  800b48:	e0bffb17 	ldw	r2,-20(fp)
  800b4c:	10800104 	addi	r2,r2,4
  800b50:	1007883a 	mov	r3,r2
  800b54:	e0bffa17 	ldw	r2,-24(fp)
  800b58:	10800817 	ldw	r2,32(r2)
  800b5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800b60:	e0bffb17 	ldw	r2,-20(fp)
  800b64:	10800104 	addi	r2,r2,4
  800b68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  800b6c:	e0bffc17 	ldw	r2,-16(fp)
  800b70:	1080800c 	andi	r2,r2,512
  800b74:	103fbe26 	beq	r2,zero,800a70 <__alt_data_end+0xff800a70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  800b78:	e0bffc17 	ldw	r2,-16(fp)
  800b7c:	1004d43a 	srli	r2,r2,16
  800b80:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  800b84:	00001406 	br	800bd8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  800b88:	e0bffb17 	ldw	r2,-20(fp)
  800b8c:	e0fffa17 	ldw	r3,-24(fp)
  800b90:	18c00d17 	ldw	r3,52(r3)
  800b94:	e13ffa17 	ldw	r4,-24(fp)
  800b98:	20c7883a 	add	r3,r4,r3
  800b9c:	18c20e04 	addi	r3,r3,2104
  800ba0:	18c00003 	ldbu	r3,0(r3)
  800ba4:	18c03fcc 	andi	r3,r3,255
  800ba8:	18c0201c 	xori	r3,r3,128
  800bac:	18ffe004 	addi	r3,r3,-128
  800bb0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800bb4:	e0bffa17 	ldw	r2,-24(fp)
  800bb8:	10800d17 	ldw	r2,52(r2)
  800bbc:	10800044 	addi	r2,r2,1
  800bc0:	10c1ffcc 	andi	r3,r2,2047
  800bc4:	e0bffa17 	ldw	r2,-24(fp)
  800bc8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  800bcc:	e0bff917 	ldw	r2,-28(fp)
  800bd0:	10bfffc4 	addi	r2,r2,-1
  800bd4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  800bd8:	e0bff917 	ldw	r2,-28(fp)
  800bdc:	10000526 	beq	r2,zero,800bf4 <altera_avalon_jtag_uart_irq+0x1ac>
  800be0:	e0bffa17 	ldw	r2,-24(fp)
  800be4:	10c00d17 	ldw	r3,52(r2)
  800be8:	e0bffa17 	ldw	r2,-24(fp)
  800bec:	10800c17 	ldw	r2,48(r2)
  800bf0:	18bfe51e 	bne	r3,r2,800b88 <__alt_data_end+0xff800b88>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800bf4:	e0bff917 	ldw	r2,-28(fp)
  800bf8:	103f9d26 	beq	r2,zero,800a70 <__alt_data_end+0xff800a70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800bfc:	e0bffa17 	ldw	r2,-24(fp)
  800c00:	10c00817 	ldw	r3,32(r2)
  800c04:	00bfff44 	movi	r2,-3
  800c08:	1886703a 	and	r3,r3,r2
  800c0c:	e0bffa17 	ldw	r2,-24(fp)
  800c10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800c14:	e0bffa17 	ldw	r2,-24(fp)
  800c18:	10800017 	ldw	r2,0(r2)
  800c1c:	10800104 	addi	r2,r2,4
  800c20:	1007883a 	mov	r3,r2
  800c24:	e0bffa17 	ldw	r2,-24(fp)
  800c28:	10800817 	ldw	r2,32(r2)
  800c2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800c30:	e0bffb17 	ldw	r2,-20(fp)
  800c34:	10800104 	addi	r2,r2,4
  800c38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  800c3c:	003f8c06 	br	800a70 <__alt_data_end+0xff800a70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  800c40:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  800c44:	0001883a 	nop
  800c48:	e037883a 	mov	sp,fp
  800c4c:	df000017 	ldw	fp,0(sp)
  800c50:	dec00104 	addi	sp,sp,4
  800c54:	f800283a 	ret

00800c58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  800c58:	defff804 	addi	sp,sp,-32
  800c5c:	df000715 	stw	fp,28(sp)
  800c60:	df000704 	addi	fp,sp,28
  800c64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  800c68:	e0bffb17 	ldw	r2,-20(fp)
  800c6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  800c70:	e0bff917 	ldw	r2,-28(fp)
  800c74:	10800017 	ldw	r2,0(r2)
  800c78:	10800104 	addi	r2,r2,4
  800c7c:	10800037 	ldwio	r2,0(r2)
  800c80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  800c84:	e0bffa17 	ldw	r2,-24(fp)
  800c88:	1081000c 	andi	r2,r2,1024
  800c8c:	10000b26 	beq	r2,zero,800cbc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  800c90:	e0bff917 	ldw	r2,-28(fp)
  800c94:	10800017 	ldw	r2,0(r2)
  800c98:	10800104 	addi	r2,r2,4
  800c9c:	1007883a 	mov	r3,r2
  800ca0:	e0bff917 	ldw	r2,-28(fp)
  800ca4:	10800817 	ldw	r2,32(r2)
  800ca8:	10810014 	ori	r2,r2,1024
  800cac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  800cb0:	e0bff917 	ldw	r2,-28(fp)
  800cb4:	10000915 	stw	zero,36(r2)
  800cb8:	00000a06 	br	800ce4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  800cbc:	e0bff917 	ldw	r2,-28(fp)
  800cc0:	10c00917 	ldw	r3,36(r2)
  800cc4:	00a00034 	movhi	r2,32768
  800cc8:	10bfff04 	addi	r2,r2,-4
  800ccc:	10c00536 	bltu	r2,r3,800ce4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  800cd0:	e0bff917 	ldw	r2,-28(fp)
  800cd4:	10800917 	ldw	r2,36(r2)
  800cd8:	10c00044 	addi	r3,r2,1
  800cdc:	e0bff917 	ldw	r2,-28(fp)
  800ce0:	10c00915 	stw	r3,36(r2)
  800ce4:	d0a71c17 	ldw	r2,-25488(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  800ce8:	e037883a 	mov	sp,fp
  800cec:	df000017 	ldw	fp,0(sp)
  800cf0:	dec00104 	addi	sp,sp,4
  800cf4:	f800283a 	ret

00800cf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  800cf8:	defffd04 	addi	sp,sp,-12
  800cfc:	df000215 	stw	fp,8(sp)
  800d00:	df000204 	addi	fp,sp,8
  800d04:	e13ffe15 	stw	r4,-8(fp)
  800d08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800d0c:	00000506 	br	800d24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  800d10:	e0bfff17 	ldw	r2,-4(fp)
  800d14:	1090000c 	andi	r2,r2,16384
  800d18:	10000226 	beq	r2,zero,800d24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  800d1c:	00bffd44 	movi	r2,-11
  800d20:	00000b06 	br	800d50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800d24:	e0bffe17 	ldw	r2,-8(fp)
  800d28:	10c00d17 	ldw	r3,52(r2)
  800d2c:	e0bffe17 	ldw	r2,-8(fp)
  800d30:	10800c17 	ldw	r2,48(r2)
  800d34:	18800526 	beq	r3,r2,800d4c <altera_avalon_jtag_uart_close+0x54>
  800d38:	e0bffe17 	ldw	r2,-8(fp)
  800d3c:	10c00917 	ldw	r3,36(r2)
  800d40:	e0bffe17 	ldw	r2,-8(fp)
  800d44:	10800117 	ldw	r2,4(r2)
  800d48:	18bff136 	bltu	r3,r2,800d10 <__alt_data_end+0xff800d10>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  800d4c:	0005883a 	mov	r2,zero
}
  800d50:	e037883a 	mov	sp,fp
  800d54:	df000017 	ldw	fp,0(sp)
  800d58:	dec00104 	addi	sp,sp,4
  800d5c:	f800283a 	ret

00800d60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  800d60:	defffa04 	addi	sp,sp,-24
  800d64:	df000515 	stw	fp,20(sp)
  800d68:	df000504 	addi	fp,sp,20
  800d6c:	e13ffd15 	stw	r4,-12(fp)
  800d70:	e17ffe15 	stw	r5,-8(fp)
  800d74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  800d78:	00bff9c4 	movi	r2,-25
  800d7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  800d80:	e0bffe17 	ldw	r2,-8(fp)
  800d84:	10da8060 	cmpeqi	r3,r2,27137
  800d88:	1800031e 	bne	r3,zero,800d98 <altera_avalon_jtag_uart_ioctl+0x38>
  800d8c:	109a80a0 	cmpeqi	r2,r2,27138
  800d90:	1000181e 	bne	r2,zero,800df4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  800d94:	00002906 	br	800e3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  800d98:	e0bffd17 	ldw	r2,-12(fp)
  800d9c:	10c00117 	ldw	r3,4(r2)
  800da0:	00a00034 	movhi	r2,32768
  800da4:	10bfffc4 	addi	r2,r2,-1
  800da8:	18802126 	beq	r3,r2,800e30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  800dac:	e0bfff17 	ldw	r2,-4(fp)
  800db0:	10800017 	ldw	r2,0(r2)
  800db4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  800db8:	e0bffc17 	ldw	r2,-16(fp)
  800dbc:	10800090 	cmplti	r2,r2,2
  800dc0:	1000061e 	bne	r2,zero,800ddc <altera_avalon_jtag_uart_ioctl+0x7c>
  800dc4:	e0fffc17 	ldw	r3,-16(fp)
  800dc8:	00a00034 	movhi	r2,32768
  800dcc:	10bfffc4 	addi	r2,r2,-1
  800dd0:	18800226 	beq	r3,r2,800ddc <altera_avalon_jtag_uart_ioctl+0x7c>
  800dd4:	e0bffc17 	ldw	r2,-16(fp)
  800dd8:	00000206 	br	800de4 <altera_avalon_jtag_uart_ioctl+0x84>
  800ddc:	00a00034 	movhi	r2,32768
  800de0:	10bfff84 	addi	r2,r2,-2
  800de4:	e0fffd17 	ldw	r3,-12(fp)
  800de8:	18800115 	stw	r2,4(r3)
      rc = 0;
  800dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800df0:	00000f06 	br	800e30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  800df4:	e0bffd17 	ldw	r2,-12(fp)
  800df8:	10c00117 	ldw	r3,4(r2)
  800dfc:	00a00034 	movhi	r2,32768
  800e00:	10bfffc4 	addi	r2,r2,-1
  800e04:	18800c26 	beq	r3,r2,800e38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800e08:	e0bffd17 	ldw	r2,-12(fp)
  800e0c:	10c00917 	ldw	r3,36(r2)
  800e10:	e0bffd17 	ldw	r2,-12(fp)
  800e14:	10800117 	ldw	r2,4(r2)
  800e18:	1885803a 	cmpltu	r2,r3,r2
  800e1c:	10c03fcc 	andi	r3,r2,255
  800e20:	e0bfff17 	ldw	r2,-4(fp)
  800e24:	10c00015 	stw	r3,0(r2)
      rc = 0;
  800e28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800e2c:	00000206 	br	800e38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  800e30:	0001883a 	nop
  800e34:	00000106 	br	800e3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  800e38:	0001883a 	nop

  default:
    break;
  }

  return rc;
  800e3c:	e0bffb17 	ldw	r2,-20(fp)
}
  800e40:	e037883a 	mov	sp,fp
  800e44:	df000017 	ldw	fp,0(sp)
  800e48:	dec00104 	addi	sp,sp,4
  800e4c:	f800283a 	ret

00800e50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  800e50:	defff304 	addi	sp,sp,-52
  800e54:	dfc00c15 	stw	ra,48(sp)
  800e58:	df000b15 	stw	fp,44(sp)
  800e5c:	df000b04 	addi	fp,sp,44
  800e60:	e13ffc15 	stw	r4,-16(fp)
  800e64:	e17ffd15 	stw	r5,-12(fp)
  800e68:	e1bffe15 	stw	r6,-8(fp)
  800e6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  800e70:	e0bffd17 	ldw	r2,-12(fp)
  800e74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800e78:	00004706 	br	800f98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10800a17 	ldw	r2,40(r2)
  800e84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  800e88:	e0bffc17 	ldw	r2,-16(fp)
  800e8c:	10800b17 	ldw	r2,44(r2)
  800e90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  800e94:	e0fff717 	ldw	r3,-36(fp)
  800e98:	e0bff817 	ldw	r2,-32(fp)
  800e9c:	18800536 	bltu	r3,r2,800eb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800ea0:	e0fff717 	ldw	r3,-36(fp)
  800ea4:	e0bff817 	ldw	r2,-32(fp)
  800ea8:	1885c83a 	sub	r2,r3,r2
  800eac:	e0bff615 	stw	r2,-40(fp)
  800eb0:	00000406 	br	800ec4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800eb4:	00c20004 	movi	r3,2048
  800eb8:	e0bff817 	ldw	r2,-32(fp)
  800ebc:	1885c83a 	sub	r2,r3,r2
  800ec0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800ec4:	e0bff617 	ldw	r2,-40(fp)
  800ec8:	10001e26 	beq	r2,zero,800f44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  800ecc:	e0fffe17 	ldw	r3,-8(fp)
  800ed0:	e0bff617 	ldw	r2,-40(fp)
  800ed4:	1880022e 	bgeu	r3,r2,800ee0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  800ed8:	e0bffe17 	ldw	r2,-8(fp)
  800edc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800ee0:	e0bffc17 	ldw	r2,-16(fp)
  800ee4:	10c00e04 	addi	r3,r2,56
  800ee8:	e0bff817 	ldw	r2,-32(fp)
  800eec:	1885883a 	add	r2,r3,r2
  800ef0:	e1bff617 	ldw	r6,-40(fp)
  800ef4:	100b883a 	mov	r5,r2
  800ef8:	e13ff517 	ldw	r4,-44(fp)
  800efc:	0803e580 	call	803e58 <memcpy>
      ptr   += n;
  800f00:	e0fff517 	ldw	r3,-44(fp)
  800f04:	e0bff617 	ldw	r2,-40(fp)
  800f08:	1885883a 	add	r2,r3,r2
  800f0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  800f10:	e0fffe17 	ldw	r3,-8(fp)
  800f14:	e0bff617 	ldw	r2,-40(fp)
  800f18:	1885c83a 	sub	r2,r3,r2
  800f1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800f20:	e0fff817 	ldw	r3,-32(fp)
  800f24:	e0bff617 	ldw	r2,-40(fp)
  800f28:	1885883a 	add	r2,r3,r2
  800f2c:	10c1ffcc 	andi	r3,r2,2047
  800f30:	e0bffc17 	ldw	r2,-16(fp)
  800f34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  800f38:	e0bffe17 	ldw	r2,-8(fp)
  800f3c:	00bfcf16 	blt	zero,r2,800e7c <__alt_data_end+0xff800e7c>
  800f40:	00000106 	br	800f48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  800f44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  800f48:	e0fff517 	ldw	r3,-44(fp)
  800f4c:	e0bffd17 	ldw	r2,-12(fp)
  800f50:	1880141e 	bne	r3,r2,800fa4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  800f54:	e0bfff17 	ldw	r2,-4(fp)
  800f58:	1090000c 	andi	r2,r2,16384
  800f5c:	1000131e 	bne	r2,zero,800fac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  800f60:	0001883a 	nop
  800f64:	e0bffc17 	ldw	r2,-16(fp)
  800f68:	10c00a17 	ldw	r3,40(r2)
  800f6c:	e0bff717 	ldw	r2,-36(fp)
  800f70:	1880051e 	bne	r3,r2,800f88 <altera_avalon_jtag_uart_read+0x138>
  800f74:	e0bffc17 	ldw	r2,-16(fp)
  800f78:	10c00917 	ldw	r3,36(r2)
  800f7c:	e0bffc17 	ldw	r2,-16(fp)
  800f80:	10800117 	ldw	r2,4(r2)
  800f84:	18bff736 	bltu	r3,r2,800f64 <__alt_data_end+0xff800f64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  800f88:	e0bffc17 	ldw	r2,-16(fp)
  800f8c:	10c00a17 	ldw	r3,40(r2)
  800f90:	e0bff717 	ldw	r2,-36(fp)
  800f94:	18800726 	beq	r3,r2,800fb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800f98:	e0bffe17 	ldw	r2,-8(fp)
  800f9c:	00bfb716 	blt	zero,r2,800e7c <__alt_data_end+0xff800e7c>
  800fa0:	00000506 	br	800fb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  800fa4:	0001883a 	nop
  800fa8:	00000306 	br	800fb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  800fac:	0001883a 	nop
  800fb0:	00000106 	br	800fb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  800fb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800fb8:	e0fff517 	ldw	r3,-44(fp)
  800fbc:	e0bffd17 	ldw	r2,-12(fp)
  800fc0:	18801826 	beq	r3,r2,801024 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800fc4:	0005303a 	rdctl	r2,status
  800fc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800fcc:	e0fffb17 	ldw	r3,-20(fp)
  800fd0:	00bfff84 	movi	r2,-2
  800fd4:	1884703a 	and	r2,r3,r2
  800fd8:	1001703a 	wrctl	status,r2
  
  return context;
  800fdc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  800fe0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800fe4:	e0bffc17 	ldw	r2,-16(fp)
  800fe8:	10800817 	ldw	r2,32(r2)
  800fec:	10c00054 	ori	r3,r2,1
  800ff0:	e0bffc17 	ldw	r2,-16(fp)
  800ff4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800ff8:	e0bffc17 	ldw	r2,-16(fp)
  800ffc:	10800017 	ldw	r2,0(r2)
  801000:	10800104 	addi	r2,r2,4
  801004:	1007883a 	mov	r3,r2
  801008:	e0bffc17 	ldw	r2,-16(fp)
  80100c:	10800817 	ldw	r2,32(r2)
  801010:	18800035 	stwio	r2,0(r3)
  801014:	e0bffa17 	ldw	r2,-24(fp)
  801018:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80101c:	e0bff917 	ldw	r2,-28(fp)
  801020:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  801024:	e0fff517 	ldw	r3,-44(fp)
  801028:	e0bffd17 	ldw	r2,-12(fp)
  80102c:	18800426 	beq	r3,r2,801040 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  801030:	e0fff517 	ldw	r3,-44(fp)
  801034:	e0bffd17 	ldw	r2,-12(fp)
  801038:	1885c83a 	sub	r2,r3,r2
  80103c:	00000606 	br	801058 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  801040:	e0bfff17 	ldw	r2,-4(fp)
  801044:	1090000c 	andi	r2,r2,16384
  801048:	10000226 	beq	r2,zero,801054 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80104c:	00bffd44 	movi	r2,-11
  801050:	00000106 	br	801058 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  801054:	00bffec4 	movi	r2,-5
}
  801058:	e037883a 	mov	sp,fp
  80105c:	dfc00117 	ldw	ra,4(sp)
  801060:	df000017 	ldw	fp,0(sp)
  801064:	dec00204 	addi	sp,sp,8
  801068:	f800283a 	ret

0080106c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80106c:	defff304 	addi	sp,sp,-52
  801070:	dfc00c15 	stw	ra,48(sp)
  801074:	df000b15 	stw	fp,44(sp)
  801078:	df000b04 	addi	fp,sp,44
  80107c:	e13ffc15 	stw	r4,-16(fp)
  801080:	e17ffd15 	stw	r5,-12(fp)
  801084:	e1bffe15 	stw	r6,-8(fp)
  801088:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80108c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  801090:	e0bffd17 	ldw	r2,-12(fp)
  801094:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801098:	00003706 	br	801178 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80109c:	e0bffc17 	ldw	r2,-16(fp)
  8010a0:	10800c17 	ldw	r2,48(r2)
  8010a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8010a8:	e0bffc17 	ldw	r2,-16(fp)
  8010ac:	10800d17 	ldw	r2,52(r2)
  8010b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8010b4:	e0fff917 	ldw	r3,-28(fp)
  8010b8:	e0bff517 	ldw	r2,-44(fp)
  8010bc:	1880062e 	bgeu	r3,r2,8010d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8010c0:	e0fff517 	ldw	r3,-44(fp)
  8010c4:	e0bff917 	ldw	r2,-28(fp)
  8010c8:	1885c83a 	sub	r2,r3,r2
  8010cc:	10bfffc4 	addi	r2,r2,-1
  8010d0:	e0bff615 	stw	r2,-40(fp)
  8010d4:	00000b06 	br	801104 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8010d8:	e0bff517 	ldw	r2,-44(fp)
  8010dc:	10000526 	beq	r2,zero,8010f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8010e0:	00c20004 	movi	r3,2048
  8010e4:	e0bff917 	ldw	r2,-28(fp)
  8010e8:	1885c83a 	sub	r2,r3,r2
  8010ec:	e0bff615 	stw	r2,-40(fp)
  8010f0:	00000406 	br	801104 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8010f4:	00c1ffc4 	movi	r3,2047
  8010f8:	e0bff917 	ldw	r2,-28(fp)
  8010fc:	1885c83a 	sub	r2,r3,r2
  801100:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  801104:	e0bff617 	ldw	r2,-40(fp)
  801108:	10001e26 	beq	r2,zero,801184 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80110c:	e0fffe17 	ldw	r3,-8(fp)
  801110:	e0bff617 	ldw	r2,-40(fp)
  801114:	1880022e 	bgeu	r3,r2,801120 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  801118:	e0bffe17 	ldw	r2,-8(fp)
  80111c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  801120:	e0bffc17 	ldw	r2,-16(fp)
  801124:	10c20e04 	addi	r3,r2,2104
  801128:	e0bff917 	ldw	r2,-28(fp)
  80112c:	1885883a 	add	r2,r3,r2
  801130:	e1bff617 	ldw	r6,-40(fp)
  801134:	e17ffd17 	ldw	r5,-12(fp)
  801138:	1009883a 	mov	r4,r2
  80113c:	0803e580 	call	803e58 <memcpy>
      ptr   += n;
  801140:	e0fffd17 	ldw	r3,-12(fp)
  801144:	e0bff617 	ldw	r2,-40(fp)
  801148:	1885883a 	add	r2,r3,r2
  80114c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  801150:	e0fffe17 	ldw	r3,-8(fp)
  801154:	e0bff617 	ldw	r2,-40(fp)
  801158:	1885c83a 	sub	r2,r3,r2
  80115c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  801160:	e0fff917 	ldw	r3,-28(fp)
  801164:	e0bff617 	ldw	r2,-40(fp)
  801168:	1885883a 	add	r2,r3,r2
  80116c:	10c1ffcc 	andi	r3,r2,2047
  801170:	e0bffc17 	ldw	r2,-16(fp)
  801174:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801178:	e0bffe17 	ldw	r2,-8(fp)
  80117c:	00bfc716 	blt	zero,r2,80109c <__alt_data_end+0xff80109c>
  801180:	00000106 	br	801188 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  801184:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801188:	0005303a 	rdctl	r2,status
  80118c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801190:	e0fffb17 	ldw	r3,-20(fp)
  801194:	00bfff84 	movi	r2,-2
  801198:	1884703a 	and	r2,r3,r2
  80119c:	1001703a 	wrctl	status,r2
  
  return context;
  8011a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8011a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10800817 	ldw	r2,32(r2)
  8011b0:	10c00094 	ori	r3,r2,2
  8011b4:	e0bffc17 	ldw	r2,-16(fp)
  8011b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8011bc:	e0bffc17 	ldw	r2,-16(fp)
  8011c0:	10800017 	ldw	r2,0(r2)
  8011c4:	10800104 	addi	r2,r2,4
  8011c8:	1007883a 	mov	r3,r2
  8011cc:	e0bffc17 	ldw	r2,-16(fp)
  8011d0:	10800817 	ldw	r2,32(r2)
  8011d4:	18800035 	stwio	r2,0(r3)
  8011d8:	e0bffa17 	ldw	r2,-24(fp)
  8011dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8011e0:	e0bff817 	ldw	r2,-32(fp)
  8011e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	0080100e 	bge	zero,r2,801230 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8011f0:	e0bfff17 	ldw	r2,-4(fp)
  8011f4:	1090000c 	andi	r2,r2,16384
  8011f8:	1000101e 	bne	r2,zero,80123c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8011fc:	0001883a 	nop
  801200:	e0bffc17 	ldw	r2,-16(fp)
  801204:	10c00d17 	ldw	r3,52(r2)
  801208:	e0bff517 	ldw	r2,-44(fp)
  80120c:	1880051e 	bne	r3,r2,801224 <altera_avalon_jtag_uart_write+0x1b8>
  801210:	e0bffc17 	ldw	r2,-16(fp)
  801214:	10c00917 	ldw	r3,36(r2)
  801218:	e0bffc17 	ldw	r2,-16(fp)
  80121c:	10800117 	ldw	r2,4(r2)
  801220:	18bff736 	bltu	r3,r2,801200 <__alt_data_end+0xff801200>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  801224:	e0bffc17 	ldw	r2,-16(fp)
  801228:	10800917 	ldw	r2,36(r2)
  80122c:	1000051e 	bne	r2,zero,801244 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  801230:	e0bffe17 	ldw	r2,-8(fp)
  801234:	00bfd016 	blt	zero,r2,801178 <__alt_data_end+0xff801178>
  801238:	00000306 	br	801248 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80123c:	0001883a 	nop
  801240:	00000106 	br	801248 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  801244:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  801248:	e0fffd17 	ldw	r3,-12(fp)
  80124c:	e0bff717 	ldw	r2,-36(fp)
  801250:	18800426 	beq	r3,r2,801264 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  801254:	e0fffd17 	ldw	r3,-12(fp)
  801258:	e0bff717 	ldw	r2,-36(fp)
  80125c:	1885c83a 	sub	r2,r3,r2
  801260:	00000606 	br	80127c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  801264:	e0bfff17 	ldw	r2,-4(fp)
  801268:	1090000c 	andi	r2,r2,16384
  80126c:	10000226 	beq	r2,zero,801278 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  801270:	00bffd44 	movi	r2,-11
  801274:	00000106 	br	80127c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  801278:	00bffec4 	movi	r2,-5
}
  80127c:	e037883a 	mov	sp,fp
  801280:	dfc00117 	ldw	ra,4(sp)
  801284:	df000017 	ldw	fp,0(sp)
  801288:	dec00204 	addi	sp,sp,8
  80128c:	f800283a 	ret

00801290 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  801290:	defffa04 	addi	sp,sp,-24
  801294:	dfc00515 	stw	ra,20(sp)
  801298:	df000415 	stw	fp,16(sp)
  80129c:	df000404 	addi	fp,sp,16
  8012a0:	e13ffe15 	stw	r4,-8(fp)
  8012a4:	2805883a 	mov	r2,r5
  8012a8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8012ac:	e0bffe17 	ldw	r2,-8(fp)
  8012b0:	10800017 	ldw	r2,0(r2)
  8012b4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8012b8:	008003f4 	movhi	r2,15
  8012bc:	10909004 	addi	r2,r2,16960
  8012c0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8012c4:	e0bffe17 	ldw	r2,-8(fp)
  8012c8:	10800803 	ldbu	r2,32(r2)
  8012cc:	10803fcc 	andi	r2,r2,255
  8012d0:	1080201c 	xori	r2,r2,128
  8012d4:	10bfe004 	addi	r2,r2,-128
  8012d8:	1000151e 	bne	r2,zero,801330 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8012dc:	00000906 	br	801304 <lcd_write_command+0x74>
    if (--i == 0)
  8012e0:	e0bffc17 	ldw	r2,-16(fp)
  8012e4:	10bfffc4 	addi	r2,r2,-1
  8012e8:	e0bffc15 	stw	r2,-16(fp)
  8012ec:	e0bffc17 	ldw	r2,-16(fp)
  8012f0:	1000041e 	bne	r2,zero,801304 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8012f4:	e0bffe17 	ldw	r2,-8(fp)
  8012f8:	00c00044 	movi	r3,1
  8012fc:	10c00805 	stb	r3,32(r2)
      return;
  801300:	00000c06 	br	801334 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801304:	e0bffd17 	ldw	r2,-12(fp)
  801308:	10800104 	addi	r2,r2,4
  80130c:	10800037 	ldwio	r2,0(r2)
  801310:	1080200c 	andi	r2,r2,128
  801314:	103ff21e 	bne	r2,zero,8012e0 <__alt_data_end+0xff8012e0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801318:	01001904 	movi	r4,100
  80131c:	080390c0 	call	80390c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  801320:	e0bffd17 	ldw	r2,-12(fp)
  801324:	e0ffff03 	ldbu	r3,-4(fp)
  801328:	10c00035 	stwio	r3,0(r2)
  80132c:	00000106 	br	801334 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  801330:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  801334:	e037883a 	mov	sp,fp
  801338:	dfc00117 	ldw	ra,4(sp)
  80133c:	df000017 	ldw	fp,0(sp)
  801340:	dec00204 	addi	sp,sp,8
  801344:	f800283a 	ret

00801348 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801348:	defffa04 	addi	sp,sp,-24
  80134c:	dfc00515 	stw	ra,20(sp)
  801350:	df000415 	stw	fp,16(sp)
  801354:	df000404 	addi	fp,sp,16
  801358:	e13ffe15 	stw	r4,-8(fp)
  80135c:	2805883a 	mov	r2,r5
  801360:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801364:	e0bffe17 	ldw	r2,-8(fp)
  801368:	10800017 	ldw	r2,0(r2)
  80136c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801370:	008003f4 	movhi	r2,15
  801374:	10909004 	addi	r2,r2,16960
  801378:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80137c:	e0bffe17 	ldw	r2,-8(fp)
  801380:	10800803 	ldbu	r2,32(r2)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1080201c 	xori	r2,r2,128
  80138c:	10bfe004 	addi	r2,r2,-128
  801390:	10001d1e 	bne	r2,zero,801408 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801394:	00000906 	br	8013bc <lcd_write_data+0x74>
    if (--i == 0)
  801398:	e0bffc17 	ldw	r2,-16(fp)
  80139c:	10bfffc4 	addi	r2,r2,-1
  8013a0:	e0bffc15 	stw	r2,-16(fp)
  8013a4:	e0bffc17 	ldw	r2,-16(fp)
  8013a8:	1000041e 	bne	r2,zero,8013bc <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8013ac:	e0bffe17 	ldw	r2,-8(fp)
  8013b0:	00c00044 	movi	r3,1
  8013b4:	10c00805 	stb	r3,32(r2)
      return;
  8013b8:	00001406 	br	80140c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8013bc:	e0bffd17 	ldw	r2,-12(fp)
  8013c0:	10800104 	addi	r2,r2,4
  8013c4:	10800037 	ldwio	r2,0(r2)
  8013c8:	1080200c 	andi	r2,r2,128
  8013cc:	103ff21e 	bne	r2,zero,801398 <__alt_data_end+0xff801398>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8013d0:	01001904 	movi	r4,100
  8013d4:	080390c0 	call	80390c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8013d8:	e0bffd17 	ldw	r2,-12(fp)
  8013dc:	10800204 	addi	r2,r2,8
  8013e0:	1007883a 	mov	r3,r2
  8013e4:	e0bfff03 	ldbu	r2,-4(fp)
  8013e8:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8013ec:	e0bffe17 	ldw	r2,-8(fp)
  8013f0:	108008c3 	ldbu	r2,35(r2)
  8013f4:	10800044 	addi	r2,r2,1
  8013f8:	1007883a 	mov	r3,r2
  8013fc:	e0bffe17 	ldw	r2,-8(fp)
  801400:	10c008c5 	stb	r3,35(r2)
  801404:	00000106 	br	80140c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  801408:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80140c:	e037883a 	mov	sp,fp
  801410:	dfc00117 	ldw	ra,4(sp)
  801414:	df000017 	ldw	fp,0(sp)
  801418:	dec00204 	addi	sp,sp,8
  80141c:	f800283a 	ret

00801420 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  801420:	defffc04 	addi	sp,sp,-16
  801424:	dfc00315 	stw	ra,12(sp)
  801428:	df000215 	stw	fp,8(sp)
  80142c:	df000204 	addi	fp,sp,8
  801430:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  801434:	01400044 	movi	r5,1
  801438:	e13fff17 	ldw	r4,-4(fp)
  80143c:	08012900 	call	801290 <lcd_write_command>

  sp->x = 0;
  801440:	e0bfff17 	ldw	r2,-4(fp)
  801444:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  801448:	e0bfff17 	ldw	r2,-4(fp)
  80144c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  801450:	e0bfff17 	ldw	r2,-4(fp)
  801454:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801458:	e03ffe15 	stw	zero,-8(fp)
  80145c:	00001b06 	br	8014cc <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  801460:	e0bffe17 	ldw	r2,-8(fp)
  801464:	108018e4 	muli	r2,r2,99
  801468:	10801004 	addi	r2,r2,64
  80146c:	e0ffff17 	ldw	r3,-4(fp)
  801470:	1885883a 	add	r2,r3,r2
  801474:	01801444 	movi	r6,81
  801478:	01400804 	movi	r5,32
  80147c:	1009883a 	mov	r4,r2
  801480:	0803fa00 	call	803fa0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  801484:	e0bffe17 	ldw	r2,-8(fp)
  801488:	108018e4 	muli	r2,r2,99
  80148c:	10800c04 	addi	r2,r2,48
  801490:	e0ffff17 	ldw	r3,-4(fp)
  801494:	1885883a 	add	r2,r3,r2
  801498:	01800404 	movi	r6,16
  80149c:	01400804 	movi	r5,32
  8014a0:	1009883a 	mov	r4,r2
  8014a4:	0803fa00 	call	803fa0 <memset>
    sp->line[y].width = 0;
  8014a8:	e0ffff17 	ldw	r3,-4(fp)
  8014ac:	e0bffe17 	ldw	r2,-8(fp)
  8014b0:	108018e4 	muli	r2,r2,99
  8014b4:	1885883a 	add	r2,r3,r2
  8014b8:	10802444 	addi	r2,r2,145
  8014bc:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8014c0:	e0bffe17 	ldw	r2,-8(fp)
  8014c4:	10800044 	addi	r2,r2,1
  8014c8:	e0bffe15 	stw	r2,-8(fp)
  8014cc:	e0bffe17 	ldw	r2,-8(fp)
  8014d0:	10800090 	cmplti	r2,r2,2
  8014d4:	103fe21e 	bne	r2,zero,801460 <__alt_data_end+0xff801460>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8014d8:	0001883a 	nop
  8014dc:	e037883a 	mov	sp,fp
  8014e0:	dfc00117 	ldw	ra,4(sp)
  8014e4:	df000017 	ldw	fp,0(sp)
  8014e8:	dec00204 	addi	sp,sp,8
  8014ec:	f800283a 	ret

008014f0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8014f0:	defff704 	addi	sp,sp,-36
  8014f4:	dfc00815 	stw	ra,32(sp)
  8014f8:	df000715 	stw	fp,28(sp)
  8014fc:	df000704 	addi	fp,sp,28
  801500:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  801504:	e0bfff17 	ldw	r2,-4(fp)
  801508:	10800943 	ldbu	r2,37(r2)
  80150c:	10803fcc 	andi	r2,r2,255
  801510:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801514:	e03ff915 	stw	zero,-28(fp)
  801518:	00006706 	br	8016b8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80151c:	e0ffff17 	ldw	r3,-4(fp)
  801520:	e0bff917 	ldw	r2,-28(fp)
  801524:	108018e4 	muli	r2,r2,99
  801528:	1885883a 	add	r2,r3,r2
  80152c:	10802444 	addi	r2,r2,145
  801530:	10800003 	ldbu	r2,0(r2)
  801534:	10803fcc 	andi	r2,r2,255
  801538:	1080201c 	xori	r2,r2,128
  80153c:	10bfe004 	addi	r2,r2,-128
  801540:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  801544:	e0ffff17 	ldw	r3,-4(fp)
  801548:	e0bff917 	ldw	r2,-28(fp)
  80154c:	108018e4 	muli	r2,r2,99
  801550:	1885883a 	add	r2,r3,r2
  801554:	10802484 	addi	r2,r2,146
  801558:	10800003 	ldbu	r2,0(r2)
  80155c:	10c03fcc 	andi	r3,r2,255
  801560:	e0bffc17 	ldw	r2,-16(fp)
  801564:	1885383a 	mul	r2,r3,r2
  801568:	1005d23a 	srai	r2,r2,8
  80156c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801570:	e0fffb17 	ldw	r3,-20(fp)
  801574:	e0bffd17 	ldw	r2,-12(fp)
  801578:	18800116 	blt	r3,r2,801580 <lcd_repaint_screen+0x90>
      offset = 0;
  80157c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801580:	e03ffa15 	stw	zero,-24(fp)
  801584:	00004606 	br	8016a0 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  801588:	e0fffa17 	ldw	r3,-24(fp)
  80158c:	e0bffb17 	ldw	r2,-20(fp)
  801590:	1885883a 	add	r2,r3,r2
  801594:	e17ffd17 	ldw	r5,-12(fp)
  801598:	1009883a 	mov	r4,r2
  80159c:	08063140 	call	806314 <__modsi3>
  8015a0:	1009883a 	mov	r4,r2
  8015a4:	e0ffff17 	ldw	r3,-4(fp)
  8015a8:	e0bff917 	ldw	r2,-28(fp)
  8015ac:	108018e4 	muli	r2,r2,99
  8015b0:	1885883a 	add	r2,r3,r2
  8015b4:	1105883a 	add	r2,r2,r4
  8015b8:	10801004 	addi	r2,r2,64
  8015bc:	10800003 	ldbu	r2,0(r2)
  8015c0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8015c4:	e0ffff17 	ldw	r3,-4(fp)
  8015c8:	e0bff917 	ldw	r2,-28(fp)
  8015cc:	108018e4 	muli	r2,r2,99
  8015d0:	1887883a 	add	r3,r3,r2
  8015d4:	e0bffa17 	ldw	r2,-24(fp)
  8015d8:	1885883a 	add	r2,r3,r2
  8015dc:	10800c04 	addi	r2,r2,48
  8015e0:	10800003 	ldbu	r2,0(r2)
  8015e4:	10c03fcc 	andi	r3,r2,255
  8015e8:	18c0201c 	xori	r3,r3,128
  8015ec:	18ffe004 	addi	r3,r3,-128
  8015f0:	e0bffe07 	ldb	r2,-8(fp)
  8015f4:	18802726 	beq	r3,r2,801694 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8015f8:	e0fff917 	ldw	r3,-28(fp)
  8015fc:	d0a00004 	addi	r2,gp,-32768
  801600:	1885883a 	add	r2,r3,r2
  801604:	10800003 	ldbu	r2,0(r2)
  801608:	1007883a 	mov	r3,r2
  80160c:	e0bffa17 	ldw	r2,-24(fp)
  801610:	1885883a 	add	r2,r3,r2
  801614:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  801618:	e0fffe43 	ldbu	r3,-7(fp)
  80161c:	e0bfff17 	ldw	r2,-4(fp)
  801620:	108008c3 	ldbu	r2,35(r2)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	18800a26 	beq	r3,r2,80165c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  801634:	e0fffe43 	ldbu	r3,-7(fp)
  801638:	00bfe004 	movi	r2,-128
  80163c:	1884b03a 	or	r2,r3,r2
  801640:	10803fcc 	andi	r2,r2,255
  801644:	100b883a 	mov	r5,r2
  801648:	e13fff17 	ldw	r4,-4(fp)
  80164c:	08012900 	call	801290 <lcd_write_command>
          sp->address = address;
  801650:	e0fffe43 	ldbu	r3,-7(fp)
  801654:	e0bfff17 	ldw	r2,-4(fp)
  801658:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80165c:	e0bffe03 	ldbu	r2,-8(fp)
  801660:	10803fcc 	andi	r2,r2,255
  801664:	100b883a 	mov	r5,r2
  801668:	e13fff17 	ldw	r4,-4(fp)
  80166c:	08013480 	call	801348 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801670:	e0ffff17 	ldw	r3,-4(fp)
  801674:	e0bff917 	ldw	r2,-28(fp)
  801678:	108018e4 	muli	r2,r2,99
  80167c:	1887883a 	add	r3,r3,r2
  801680:	e0bffa17 	ldw	r2,-24(fp)
  801684:	1885883a 	add	r2,r3,r2
  801688:	10800c04 	addi	r2,r2,48
  80168c:	e0fffe03 	ldbu	r3,-8(fp)
  801690:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801694:	e0bffa17 	ldw	r2,-24(fp)
  801698:	10800044 	addi	r2,r2,1
  80169c:	e0bffa15 	stw	r2,-24(fp)
  8016a0:	e0bffa17 	ldw	r2,-24(fp)
  8016a4:	10800410 	cmplti	r2,r2,16
  8016a8:	103fb71e 	bne	r2,zero,801588 <__alt_data_end+0xff801588>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8016ac:	e0bff917 	ldw	r2,-28(fp)
  8016b0:	10800044 	addi	r2,r2,1
  8016b4:	e0bff915 	stw	r2,-28(fp)
  8016b8:	e0bff917 	ldw	r2,-28(fp)
  8016bc:	10800090 	cmplti	r2,r2,2
  8016c0:	103f961e 	bne	r2,zero,80151c <__alt_data_end+0xff80151c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8016c4:	0001883a 	nop
  8016c8:	e037883a 	mov	sp,fp
  8016cc:	dfc00117 	ldw	ra,4(sp)
  8016d0:	df000017 	ldw	fp,0(sp)
  8016d4:	dec00204 	addi	sp,sp,8
  8016d8:	f800283a 	ret

008016dc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8016dc:	defffc04 	addi	sp,sp,-16
  8016e0:	dfc00315 	stw	ra,12(sp)
  8016e4:	df000215 	stw	fp,8(sp)
  8016e8:	df000204 	addi	fp,sp,8
  8016ec:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8016f0:	e03ffe15 	stw	zero,-8(fp)
  8016f4:	00001d06 	br	80176c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8016f8:	e0bffe17 	ldw	r2,-8(fp)
  8016fc:	00800f16 	blt	zero,r2,80173c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801700:	e0bffe17 	ldw	r2,-8(fp)
  801704:	108018e4 	muli	r2,r2,99
  801708:	10801004 	addi	r2,r2,64
  80170c:	e0ffff17 	ldw	r3,-4(fp)
  801710:	1889883a 	add	r4,r3,r2
  801714:	e0bffe17 	ldw	r2,-8(fp)
  801718:	10800044 	addi	r2,r2,1
  80171c:	108018e4 	muli	r2,r2,99
  801720:	10801004 	addi	r2,r2,64
  801724:	e0ffff17 	ldw	r3,-4(fp)
  801728:	1885883a 	add	r2,r3,r2
  80172c:	01801404 	movi	r6,80
  801730:	100b883a 	mov	r5,r2
  801734:	0803e580 	call	803e58 <memcpy>
  801738:	00000906 	br	801760 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80173c:	e0bffe17 	ldw	r2,-8(fp)
  801740:	108018e4 	muli	r2,r2,99
  801744:	10801004 	addi	r2,r2,64
  801748:	e0ffff17 	ldw	r3,-4(fp)
  80174c:	1885883a 	add	r2,r3,r2
  801750:	01801404 	movi	r6,80
  801754:	01400804 	movi	r5,32
  801758:	1009883a 	mov	r4,r2
  80175c:	0803fa00 	call	803fa0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801760:	e0bffe17 	ldw	r2,-8(fp)
  801764:	10800044 	addi	r2,r2,1
  801768:	e0bffe15 	stw	r2,-8(fp)
  80176c:	e0bffe17 	ldw	r2,-8(fp)
  801770:	10800090 	cmplti	r2,r2,2
  801774:	103fe01e 	bne	r2,zero,8016f8 <__alt_data_end+0xff8016f8>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  801778:	e0bfff17 	ldw	r2,-4(fp)
  80177c:	10800883 	ldbu	r2,34(r2)
  801780:	10bfffc4 	addi	r2,r2,-1
  801784:	1007883a 	mov	r3,r2
  801788:	e0bfff17 	ldw	r2,-4(fp)
  80178c:	10c00885 	stb	r3,34(r2)
}
  801790:	0001883a 	nop
  801794:	e037883a 	mov	sp,fp
  801798:	dfc00117 	ldw	ra,4(sp)
  80179c:	df000017 	ldw	fp,0(sp)
  8017a0:	dec00204 	addi	sp,sp,8
  8017a4:	f800283a 	ret

008017a8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8017a8:	defff904 	addi	sp,sp,-28
  8017ac:	dfc00615 	stw	ra,24(sp)
  8017b0:	df000515 	stw	fp,20(sp)
  8017b4:	df000504 	addi	fp,sp,20
  8017b8:	e13ffe15 	stw	r4,-8(fp)
  8017bc:	2805883a 	mov	r2,r5
  8017c0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8017c4:	e03ffb15 	stw	zero,-20(fp)
  8017c8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8017cc:	e0bffe17 	ldw	r2,-8(fp)
  8017d0:	10800a03 	ldbu	r2,40(r2)
  8017d4:	10803fcc 	andi	r2,r2,255
  8017d8:	1080201c 	xori	r2,r2,128
  8017dc:	10bfe004 	addi	r2,r2,-128
  8017e0:	108016d8 	cmpnei	r2,r2,91
  8017e4:	1000411e 	bne	r2,zero,8018ec <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8017e8:	e0bffe17 	ldw	r2,-8(fp)
  8017ec:	10800a04 	addi	r2,r2,40
  8017f0:	10800044 	addi	r2,r2,1
  8017f4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8017f8:	00000c06 	br	80182c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8017fc:	e0bffb17 	ldw	r2,-20(fp)
  801800:	10c002a4 	muli	r3,r2,10
  801804:	e0bffd17 	ldw	r2,-12(fp)
  801808:	11000044 	addi	r4,r2,1
  80180c:	e13ffd15 	stw	r4,-12(fp)
  801810:	10800003 	ldbu	r2,0(r2)
  801814:	10803fcc 	andi	r2,r2,255
  801818:	1080201c 	xori	r2,r2,128
  80181c:	10bfe004 	addi	r2,r2,-128
  801820:	10bff404 	addi	r2,r2,-48
  801824:	1885883a 	add	r2,r3,r2
  801828:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80182c:	d0e00a17 	ldw	r3,-32728(gp)
  801830:	e0bffd17 	ldw	r2,-12(fp)
  801834:	10800003 	ldbu	r2,0(r2)
  801838:	10803fcc 	andi	r2,r2,255
  80183c:	1080201c 	xori	r2,r2,128
  801840:	10bfe004 	addi	r2,r2,-128
  801844:	10800044 	addi	r2,r2,1
  801848:	1885883a 	add	r2,r3,r2
  80184c:	10800003 	ldbu	r2,0(r2)
  801850:	10803fcc 	andi	r2,r2,255
  801854:	1080010c 	andi	r2,r2,4
  801858:	103fe81e 	bne	r2,zero,8017fc <__alt_data_end+0xff8017fc>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80185c:	e0bffd17 	ldw	r2,-12(fp)
  801860:	10800003 	ldbu	r2,0(r2)
  801864:	10803fcc 	andi	r2,r2,255
  801868:	1080201c 	xori	r2,r2,128
  80186c:	10bfe004 	addi	r2,r2,-128
  801870:	10800ed8 	cmpnei	r2,r2,59
  801874:	10001f1e 	bne	r2,zero,8018f4 <lcd_handle_escape+0x14c>
    {
      ptr++;
  801878:	e0bffd17 	ldw	r2,-12(fp)
  80187c:	10800044 	addi	r2,r2,1
  801880:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  801884:	00000c06 	br	8018b8 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  801888:	e0bffc17 	ldw	r2,-16(fp)
  80188c:	10c002a4 	muli	r3,r2,10
  801890:	e0bffd17 	ldw	r2,-12(fp)
  801894:	11000044 	addi	r4,r2,1
  801898:	e13ffd15 	stw	r4,-12(fp)
  80189c:	10800003 	ldbu	r2,0(r2)
  8018a0:	10803fcc 	andi	r2,r2,255
  8018a4:	1080201c 	xori	r2,r2,128
  8018a8:	10bfe004 	addi	r2,r2,-128
  8018ac:	10bff404 	addi	r2,r2,-48
  8018b0:	1885883a 	add	r2,r3,r2
  8018b4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8018b8:	d0e00a17 	ldw	r3,-32728(gp)
  8018bc:	e0bffd17 	ldw	r2,-12(fp)
  8018c0:	10800003 	ldbu	r2,0(r2)
  8018c4:	10803fcc 	andi	r2,r2,255
  8018c8:	1080201c 	xori	r2,r2,128
  8018cc:	10bfe004 	addi	r2,r2,-128
  8018d0:	10800044 	addi	r2,r2,1
  8018d4:	1885883a 	add	r2,r3,r2
  8018d8:	10800003 	ldbu	r2,0(r2)
  8018dc:	10803fcc 	andi	r2,r2,255
  8018e0:	1080010c 	andi	r2,r2,4
  8018e4:	103fe81e 	bne	r2,zero,801888 <__alt_data_end+0xff801888>
  8018e8:	00000206 	br	8018f4 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8018ec:	00bfffc4 	movi	r2,-1
  8018f0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8018f4:	e0bfff07 	ldb	r2,-4(fp)
  8018f8:	10c012a0 	cmpeqi	r3,r2,74
  8018fc:	1800291e 	bne	r3,zero,8019a4 <lcd_handle_escape+0x1fc>
  801900:	10c012c8 	cmpgei	r3,r2,75
  801904:	1800031e 	bne	r3,zero,801914 <lcd_handle_escape+0x16c>
  801908:	10801220 	cmpeqi	r2,r2,72
  80190c:	1000061e 	bne	r2,zero,801928 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  801910:	00004a06 	br	801a3c <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  801914:	10c012e0 	cmpeqi	r3,r2,75
  801918:	1800281e 	bne	r3,zero,8019bc <lcd_handle_escape+0x214>
  80191c:	108019a0 	cmpeqi	r2,r2,102
  801920:	1000011e 	bne	r2,zero,801928 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  801924:	00004506 	br	801a3c <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  801928:	e0bffc17 	ldw	r2,-16(fp)
  80192c:	0080050e 	bge	zero,r2,801944 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  801930:	e0bffc17 	ldw	r2,-16(fp)
  801934:	10bfffc4 	addi	r2,r2,-1
  801938:	1007883a 	mov	r3,r2
  80193c:	e0bffe17 	ldw	r2,-8(fp)
  801940:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  801944:	e0bffb17 	ldw	r2,-20(fp)
  801948:	0080370e 	bge	zero,r2,801a28 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80194c:	e0bffb17 	ldw	r2,-20(fp)
  801950:	10bfffc4 	addi	r2,r2,-1
  801954:	1007883a 	mov	r3,r2
  801958:	e0bffe17 	ldw	r2,-8(fp)
  80195c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801960:	e0bffe17 	ldw	r2,-8(fp)
  801964:	10800883 	ldbu	r2,34(r2)
  801968:	10803fcc 	andi	r2,r2,255
  80196c:	10800170 	cmpltui	r2,r2,5
  801970:	1000061e 	bne	r2,zero,80198c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  801974:	e0bffe17 	ldw	r2,-8(fp)
  801978:	00c00104 	movi	r3,4
  80197c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  801980:	00000206 	br	80198c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  801984:	e13ffe17 	ldw	r4,-8(fp)
  801988:	08016dc0 	call	8016dc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80198c:	e0bffe17 	ldw	r2,-8(fp)
  801990:	10800883 	ldbu	r2,34(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	108000e8 	cmpgeui	r2,r2,3
  80199c:	103ff91e 	bne	r2,zero,801984 <__alt_data_end+0xff801984>
        lcd_scroll_up(sp);
    }
    break;
  8019a0:	00002106 	br	801a28 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8019a4:	e0bffb17 	ldw	r2,-20(fp)
  8019a8:	10800098 	cmpnei	r2,r2,2
  8019ac:	1000201e 	bne	r2,zero,801a30 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8019b0:	e13ffe17 	ldw	r4,-8(fp)
  8019b4:	08014200 	call	801420 <lcd_clear_screen>
    break;
  8019b8:	00001d06 	br	801a30 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8019bc:	e0bffb17 	ldw	r2,-20(fp)
  8019c0:	00801d16 	blt	zero,r2,801a38 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8019c4:	e0bffe17 	ldw	r2,-8(fp)
  8019c8:	10800843 	ldbu	r2,33(r2)
  8019cc:	10803fcc 	andi	r2,r2,255
  8019d0:	10801428 	cmpgeui	r2,r2,80
  8019d4:	1000181e 	bne	r2,zero,801a38 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8019d8:	e0bffe17 	ldw	r2,-8(fp)
  8019dc:	10800883 	ldbu	r2,34(r2)
  8019e0:	10803fcc 	andi	r2,r2,255
  8019e4:	108018e4 	muli	r2,r2,99
  8019e8:	10801004 	addi	r2,r2,64
  8019ec:	e0fffe17 	ldw	r3,-8(fp)
  8019f0:	1887883a 	add	r3,r3,r2
  8019f4:	e0bffe17 	ldw	r2,-8(fp)
  8019f8:	10800843 	ldbu	r2,33(r2)
  8019fc:	10803fcc 	andi	r2,r2,255
  801a00:	1889883a 	add	r4,r3,r2
  801a04:	e0bffe17 	ldw	r2,-8(fp)
  801a08:	10800843 	ldbu	r2,33(r2)
  801a0c:	10803fcc 	andi	r2,r2,255
  801a10:	00c01404 	movi	r3,80
  801a14:	1885c83a 	sub	r2,r3,r2
  801a18:	100d883a 	mov	r6,r2
  801a1c:	01400804 	movi	r5,32
  801a20:	0803fa00 	call	803fa0 <memset>
    }
    break;
  801a24:	00000406 	br	801a38 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  801a28:	0001883a 	nop
  801a2c:	00000306 	br	801a3c <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  801a30:	0001883a 	nop
  801a34:	00000106 	br	801a3c <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  801a38:	0001883a 	nop
  }
}
  801a3c:	0001883a 	nop
  801a40:	e037883a 	mov	sp,fp
  801a44:	dfc00117 	ldw	ra,4(sp)
  801a48:	df000017 	ldw	fp,0(sp)
  801a4c:	dec00204 	addi	sp,sp,8
  801a50:	f800283a 	ret

00801a54 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801a54:	defff304 	addi	sp,sp,-52
  801a58:	dfc00c15 	stw	ra,48(sp)
  801a5c:	df000b15 	stw	fp,44(sp)
  801a60:	df000b04 	addi	fp,sp,44
  801a64:	e13ffc15 	stw	r4,-16(fp)
  801a68:	e17ffd15 	stw	r5,-12(fp)
  801a6c:	e1bffe15 	stw	r6,-8(fp)
  801a70:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801a74:	e0bffe17 	ldw	r2,-8(fp)
  801a78:	e0fffd17 	ldw	r3,-12(fp)
  801a7c:	1885883a 	add	r2,r3,r2
  801a80:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801a84:	e0bffc17 	ldw	r2,-16(fp)
  801a88:	00c00044 	movi	r3,1
  801a8c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  801a90:	00009906 	br	801cf8 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  801a94:	e0bffd17 	ldw	r2,-12(fp)
  801a98:	10800003 	ldbu	r2,0(r2)
  801a9c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  801aa0:	e0bffc17 	ldw	r2,-16(fp)
  801aa4:	10800903 	ldbu	r2,36(r2)
  801aa8:	10803fcc 	andi	r2,r2,255
  801aac:	1080201c 	xori	r2,r2,128
  801ab0:	10bfe004 	addi	r2,r2,-128
  801ab4:	10003716 	blt	r2,zero,801b94 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  801ab8:	e0bffc17 	ldw	r2,-16(fp)
  801abc:	10800903 	ldbu	r2,36(r2)
  801ac0:	10803fcc 	andi	r2,r2,255
  801ac4:	1080201c 	xori	r2,r2,128
  801ac8:	10bfe004 	addi	r2,r2,-128
  801acc:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  801ad0:	e0bffa17 	ldw	r2,-24(fp)
  801ad4:	1000031e 	bne	r2,zero,801ae4 <altera_avalon_lcd_16207_write+0x90>
  801ad8:	e0bff907 	ldb	r2,-28(fp)
  801adc:	108016d8 	cmpnei	r2,r2,91
  801ae0:	10000d1e 	bne	r2,zero,801b18 <altera_avalon_lcd_16207_write+0xc4>
  801ae4:	e0bffa17 	ldw	r2,-24(fp)
  801ae8:	10001826 	beq	r2,zero,801b4c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  801aec:	d0e00a17 	ldw	r3,-32728(gp)
  801af0:	e0bff907 	ldb	r2,-28(fp)
  801af4:	10800044 	addi	r2,r2,1
  801af8:	1885883a 	add	r2,r3,r2
  801afc:	10800003 	ldbu	r2,0(r2)
  801b00:	10803fcc 	andi	r2,r2,255
  801b04:	1080010c 	andi	r2,r2,4
  801b08:	1000101e 	bne	r2,zero,801b4c <altera_avalon_lcd_16207_write+0xf8>
  801b0c:	e0bff907 	ldb	r2,-28(fp)
  801b10:	10800ee0 	cmpeqi	r2,r2,59
  801b14:	10000d1e 	bne	r2,zero,801b4c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  801b18:	e0fffc17 	ldw	r3,-16(fp)
  801b1c:	e0bffa17 	ldw	r2,-24(fp)
  801b20:	1885883a 	add	r2,r3,r2
  801b24:	10800a04 	addi	r2,r2,40
  801b28:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801b2c:	e0bff907 	ldb	r2,-28(fp)
  801b30:	100b883a 	mov	r5,r2
  801b34:	e13ffc17 	ldw	r4,-16(fp)
  801b38:	08017a80 	call	8017a8 <lcd_handle_escape>

        sp->esccount = -1;
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	00ffffc4 	movi	r3,-1
  801b44:	10c00905 	stb	r3,36(r2)
  801b48:	00006806 	br	801cec <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801b4c:	e0bffc17 	ldw	r2,-16(fp)
  801b50:	10800903 	ldbu	r2,36(r2)
  801b54:	10803fcc 	andi	r2,r2,255
  801b58:	108001e8 	cmpgeui	r2,r2,7
  801b5c:	1000631e 	bne	r2,zero,801cec <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  801b60:	e0fffc17 	ldw	r3,-16(fp)
  801b64:	e0bffa17 	ldw	r2,-24(fp)
  801b68:	1885883a 	add	r2,r3,r2
  801b6c:	10800a04 	addi	r2,r2,40
  801b70:	e0fff903 	ldbu	r3,-28(fp)
  801b74:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  801b78:	e0bffc17 	ldw	r2,-16(fp)
  801b7c:	10800903 	ldbu	r2,36(r2)
  801b80:	10800044 	addi	r2,r2,1
  801b84:	1007883a 	mov	r3,r2
  801b88:	e0bffc17 	ldw	r2,-16(fp)
  801b8c:	10c00905 	stb	r3,36(r2)
  801b90:	00005606 	br	801cec <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  801b94:	e0bff907 	ldb	r2,-28(fp)
  801b98:	108006d8 	cmpnei	r2,r2,27
  801b9c:	1000031e 	bne	r2,zero,801bac <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  801ba0:	e0bffc17 	ldw	r2,-16(fp)
  801ba4:	10000905 	stb	zero,36(r2)
  801ba8:	00005006 	br	801cec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  801bac:	e0bff907 	ldb	r2,-28(fp)
  801bb0:	10800358 	cmpnei	r2,r2,13
  801bb4:	1000031e 	bne	r2,zero,801bc4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  801bb8:	e0bffc17 	ldw	r2,-16(fp)
  801bbc:	10000845 	stb	zero,33(r2)
  801bc0:	00004a06 	br	801cec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  801bc4:	e0bff907 	ldb	r2,-28(fp)
  801bc8:	10800298 	cmpnei	r2,r2,10
  801bcc:	1000101e 	bne	r2,zero,801c10 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  801bd0:	e0bffc17 	ldw	r2,-16(fp)
  801bd4:	10000845 	stb	zero,33(r2)
      sp->y++;
  801bd8:	e0bffc17 	ldw	r2,-16(fp)
  801bdc:	10800883 	ldbu	r2,34(r2)
  801be0:	10800044 	addi	r2,r2,1
  801be4:	1007883a 	mov	r3,r2
  801be8:	e0bffc17 	ldw	r2,-16(fp)
  801bec:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  801bf0:	e0bffc17 	ldw	r2,-16(fp)
  801bf4:	10800883 	ldbu	r2,34(r2)
  801bf8:	10803fcc 	andi	r2,r2,255
  801bfc:	108000f0 	cmpltui	r2,r2,3
  801c00:	10003a1e 	bne	r2,zero,801cec <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  801c04:	e13ffc17 	ldw	r4,-16(fp)
  801c08:	08016dc0 	call	8016dc <lcd_scroll_up>
  801c0c:	00003706 	br	801cec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  801c10:	e0bff907 	ldb	r2,-28(fp)
  801c14:	10800218 	cmpnei	r2,r2,8
  801c18:	10000b1e 	bne	r2,zero,801c48 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  801c1c:	e0bffc17 	ldw	r2,-16(fp)
  801c20:	10800843 	ldbu	r2,33(r2)
  801c24:	10803fcc 	andi	r2,r2,255
  801c28:	10003026 	beq	r2,zero,801cec <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  801c2c:	e0bffc17 	ldw	r2,-16(fp)
  801c30:	10800843 	ldbu	r2,33(r2)
  801c34:	10bfffc4 	addi	r2,r2,-1
  801c38:	1007883a 	mov	r3,r2
  801c3c:	e0bffc17 	ldw	r2,-16(fp)
  801c40:	10c00845 	stb	r3,33(r2)
  801c44:	00002906 	br	801cec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  801c48:	d0e00a17 	ldw	r3,-32728(gp)
  801c4c:	e0bff907 	ldb	r2,-28(fp)
  801c50:	10800044 	addi	r2,r2,1
  801c54:	1885883a 	add	r2,r3,r2
  801c58:	10800003 	ldbu	r2,0(r2)
  801c5c:	10803fcc 	andi	r2,r2,255
  801c60:	1080201c 	xori	r2,r2,128
  801c64:	10bfe004 	addi	r2,r2,-128
  801c68:	108025cc 	andi	r2,r2,151
  801c6c:	10001f26 	beq	r2,zero,801cec <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	10800883 	ldbu	r2,34(r2)
  801c78:	10803fcc 	andi	r2,r2,255
  801c7c:	108000b0 	cmpltui	r2,r2,2
  801c80:	1000021e 	bne	r2,zero,801c8c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  801c84:	e13ffc17 	ldw	r4,-16(fp)
  801c88:	08016dc0 	call	8016dc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801c8c:	e0bffc17 	ldw	r2,-16(fp)
  801c90:	10800843 	ldbu	r2,33(r2)
  801c94:	10803fcc 	andi	r2,r2,255
  801c98:	10801428 	cmpgeui	r2,r2,80
  801c9c:	10000d1e 	bne	r2,zero,801cd4 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  801ca0:	e0bffc17 	ldw	r2,-16(fp)
  801ca4:	10800883 	ldbu	r2,34(r2)
  801ca8:	10c03fcc 	andi	r3,r2,255
  801cac:	e0bffc17 	ldw	r2,-16(fp)
  801cb0:	10800843 	ldbu	r2,33(r2)
  801cb4:	10803fcc 	andi	r2,r2,255
  801cb8:	e13ffc17 	ldw	r4,-16(fp)
  801cbc:	18c018e4 	muli	r3,r3,99
  801cc0:	20c7883a 	add	r3,r4,r3
  801cc4:	1885883a 	add	r2,r3,r2
  801cc8:	10801004 	addi	r2,r2,64
  801ccc:	e0fff903 	ldbu	r3,-28(fp)
  801cd0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  801cd4:	e0bffc17 	ldw	r2,-16(fp)
  801cd8:	10800843 	ldbu	r2,33(r2)
  801cdc:	10800044 	addi	r2,r2,1
  801ce0:	1007883a 	mov	r3,r2
  801ce4:	e0bffc17 	ldw	r2,-16(fp)
  801ce8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801cec:	e0bffd17 	ldw	r2,-12(fp)
  801cf0:	10800044 	addi	r2,r2,1
  801cf4:	e0bffd15 	stw	r2,-12(fp)
  801cf8:	e0fffd17 	ldw	r3,-12(fp)
  801cfc:	e0bff817 	ldw	r2,-32(fp)
  801d00:	18bf6436 	bltu	r3,r2,801a94 <__alt_data_end+0xff801a94>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  801d04:	00800404 	movi	r2,16
  801d08:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801d0c:	e03ff515 	stw	zero,-44(fp)
  801d10:	00003706 	br	801df0 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801d14:	00801404 	movi	r2,80
  801d18:	e0bff715 	stw	r2,-36(fp)
  801d1c:	00001106 	br	801d64 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  801d20:	e0bff717 	ldw	r2,-36(fp)
  801d24:	10bfffc4 	addi	r2,r2,-1
  801d28:	e13ffc17 	ldw	r4,-16(fp)
  801d2c:	e0fff517 	ldw	r3,-44(fp)
  801d30:	18c018e4 	muli	r3,r3,99
  801d34:	20c7883a 	add	r3,r4,r3
  801d38:	1885883a 	add	r2,r3,r2
  801d3c:	10801004 	addi	r2,r2,64
  801d40:	10800003 	ldbu	r2,0(r2)
  801d44:	10803fcc 	andi	r2,r2,255
  801d48:	1080201c 	xori	r2,r2,128
  801d4c:	10bfe004 	addi	r2,r2,-128
  801d50:	10800820 	cmpeqi	r2,r2,32
  801d54:	10000626 	beq	r2,zero,801d70 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801d58:	e0bff717 	ldw	r2,-36(fp)
  801d5c:	10bfffc4 	addi	r2,r2,-1
  801d60:	e0bff715 	stw	r2,-36(fp)
  801d64:	e0bff717 	ldw	r2,-36(fp)
  801d68:	00bfed16 	blt	zero,r2,801d20 <__alt_data_end+0xff801d20>
  801d6c:	00000106 	br	801d74 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  801d70:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801d74:	e0bff717 	ldw	r2,-36(fp)
  801d78:	10800448 	cmpgei	r2,r2,17
  801d7c:	1000031e 	bne	r2,zero,801d8c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  801d80:	00800404 	movi	r2,16
  801d84:	e0bff715 	stw	r2,-36(fp)
  801d88:	00000306 	br	801d98 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  801d8c:	e0bff717 	ldw	r2,-36(fp)
  801d90:	10800044 	addi	r2,r2,1
  801d94:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  801d98:	e0bff717 	ldw	r2,-36(fp)
  801d9c:	1009883a 	mov	r4,r2
  801da0:	e0fffc17 	ldw	r3,-16(fp)
  801da4:	e0bff517 	ldw	r2,-44(fp)
  801da8:	108018e4 	muli	r2,r2,99
  801dac:	1885883a 	add	r2,r3,r2
  801db0:	10802444 	addi	r2,r2,145
  801db4:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  801db8:	e0fff617 	ldw	r3,-40(fp)
  801dbc:	e0bff717 	ldw	r2,-36(fp)
  801dc0:	1880020e 	bge	r3,r2,801dcc <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  801dc4:	e0bff717 	ldw	r2,-36(fp)
  801dc8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801dcc:	e0fffc17 	ldw	r3,-16(fp)
  801dd0:	e0bff517 	ldw	r2,-44(fp)
  801dd4:	108018e4 	muli	r2,r2,99
  801dd8:	1885883a 	add	r2,r3,r2
  801ddc:	10802484 	addi	r2,r2,146
  801de0:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801de4:	e0bff517 	ldw	r2,-44(fp)
  801de8:	10800044 	addi	r2,r2,1
  801dec:	e0bff515 	stw	r2,-44(fp)
  801df0:	e0bff517 	ldw	r2,-44(fp)
  801df4:	10800090 	cmplti	r2,r2,2
  801df8:	103fc61e 	bne	r2,zero,801d14 <__alt_data_end+0xff801d14>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801dfc:	e0bff617 	ldw	r2,-40(fp)
  801e00:	10800448 	cmpgei	r2,r2,17
  801e04:	1000031e 	bne	r2,zero,801e14 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	10000985 	stb	zero,38(r2)
  801e10:	00002e06 	br	801ecc <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  801e14:	e0bff617 	ldw	r2,-40(fp)
  801e18:	1085883a 	add	r2,r2,r2
  801e1c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  801e20:	e0bff617 	ldw	r2,-40(fp)
  801e24:	1007883a 	mov	r3,r2
  801e28:	e0bffc17 	ldw	r2,-16(fp)
  801e2c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801e30:	e03ff515 	stw	zero,-44(fp)
  801e34:	00002206 	br	801ec0 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  801e38:	e0fffc17 	ldw	r3,-16(fp)
  801e3c:	e0bff517 	ldw	r2,-44(fp)
  801e40:	108018e4 	muli	r2,r2,99
  801e44:	1885883a 	add	r2,r3,r2
  801e48:	10802444 	addi	r2,r2,145
  801e4c:	10800003 	ldbu	r2,0(r2)
  801e50:	10803fcc 	andi	r2,r2,255
  801e54:	1080201c 	xori	r2,r2,128
  801e58:	10bfe004 	addi	r2,r2,-128
  801e5c:	10800450 	cmplti	r2,r2,17
  801e60:	1000141e 	bne	r2,zero,801eb4 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801e64:	e0fffc17 	ldw	r3,-16(fp)
  801e68:	e0bff517 	ldw	r2,-44(fp)
  801e6c:	108018e4 	muli	r2,r2,99
  801e70:	1885883a 	add	r2,r3,r2
  801e74:	10802444 	addi	r2,r2,145
  801e78:	10800003 	ldbu	r2,0(r2)
  801e7c:	10803fcc 	andi	r2,r2,255
  801e80:	1080201c 	xori	r2,r2,128
  801e84:	10bfe004 	addi	r2,r2,-128
  801e88:	1004923a 	slli	r2,r2,8
  801e8c:	e17ff617 	ldw	r5,-40(fp)
  801e90:	1009883a 	mov	r4,r2
  801e94:	08062900 	call	806290 <__divsi3>
  801e98:	1009883a 	mov	r4,r2
  801e9c:	e0fffc17 	ldw	r3,-16(fp)
  801ea0:	e0bff517 	ldw	r2,-44(fp)
  801ea4:	108018e4 	muli	r2,r2,99
  801ea8:	1885883a 	add	r2,r3,r2
  801eac:	10802484 	addi	r2,r2,146
  801eb0:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801eb4:	e0bff517 	ldw	r2,-44(fp)
  801eb8:	10800044 	addi	r2,r2,1
  801ebc:	e0bff515 	stw	r2,-44(fp)
  801ec0:	e0bff517 	ldw	r2,-44(fp)
  801ec4:	10800090 	cmplti	r2,r2,2
  801ec8:	103fdb1e 	bne	r2,zero,801e38 <__alt_data_end+0xff801e38>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801ecc:	e0bffc17 	ldw	r2,-16(fp)
  801ed0:	10800943 	ldbu	r2,37(r2)
  801ed4:	10803fcc 	andi	r2,r2,255
  801ed8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  801edc:	e13ffc17 	ldw	r4,-16(fp)
  801ee0:	08014f00 	call	8014f0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801ee4:	e0bffc17 	ldw	r2,-16(fp)
  801ee8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801eec:	e0bffc17 	ldw	r2,-16(fp)
  801ef0:	10800943 	ldbu	r2,37(r2)
  801ef4:	10c03fcc 	andi	r3,r2,255
  801ef8:	e0bffb17 	ldw	r2,-20(fp)
  801efc:	18800426 	beq	r3,r2,801f10 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801f00:	e0bffc17 	ldw	r2,-16(fp)
  801f04:	00c00044 	movi	r3,1
  801f08:	10c009c5 	stb	r3,39(r2)
  }
  801f0c:	003fef06 	br	801ecc <__alt_data_end+0xff801ecc>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  801f10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801f14:	e0bffe17 	ldw	r2,-8(fp)
}
  801f18:	e037883a 	mov	sp,fp
  801f1c:	dfc00117 	ldw	ra,4(sp)
  801f20:	df000017 	ldw	fp,0(sp)
  801f24:	dec00204 	addi	sp,sp,8
  801f28:	f800283a 	ret

00801f2c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801f2c:	defffc04 	addi	sp,sp,-16
  801f30:	dfc00315 	stw	ra,12(sp)
  801f34:	df000215 	stw	fp,8(sp)
  801f38:	df000204 	addi	fp,sp,8
  801f3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801f40:	e0bfff17 	ldw	r2,-4(fp)
  801f44:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  801f48:	e0bffe17 	ldw	r2,-8(fp)
  801f4c:	10800943 	ldbu	r2,37(r2)
  801f50:	10803fcc 	andi	r2,r2,255
  801f54:	10c00044 	addi	r3,r2,1
  801f58:	e0bffe17 	ldw	r2,-8(fp)
  801f5c:	10800983 	ldbu	r2,38(r2)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	18800316 	blt	r3,r2,801f74 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  801f68:	e0bffe17 	ldw	r2,-8(fp)
  801f6c:	10000945 	stb	zero,37(r2)
  801f70:	00000606 	br	801f8c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  801f74:	e0bffe17 	ldw	r2,-8(fp)
  801f78:	10800943 	ldbu	r2,37(r2)
  801f7c:	10800044 	addi	r2,r2,1
  801f80:	1007883a 	mov	r3,r2
  801f84:	e0bffe17 	ldw	r2,-8(fp)
  801f88:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  801f8c:	e0bffe17 	ldw	r2,-8(fp)
  801f90:	10800983 	ldbu	r2,38(r2)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	10000826 	beq	r2,zero,801fbc <alt_lcd_16207_timeout+0x90>
  801f9c:	e0bffe17 	ldw	r2,-8(fp)
  801fa0:	108009c3 	ldbu	r2,39(r2)
  801fa4:	10803fcc 	andi	r2,r2,255
  801fa8:	1080201c 	xori	r2,r2,128
  801fac:	10bfe004 	addi	r2,r2,-128
  801fb0:	1000021e 	bne	r2,zero,801fbc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  801fb4:	e13ffe17 	ldw	r4,-8(fp)
  801fb8:	08014f00 	call	8014f0 <lcd_repaint_screen>

  return sp->period;
  801fbc:	e0bffe17 	ldw	r2,-8(fp)
  801fc0:	10800717 	ldw	r2,28(r2)
}
  801fc4:	e037883a 	mov	sp,fp
  801fc8:	dfc00117 	ldw	ra,4(sp)
  801fcc:	df000017 	ldw	fp,0(sp)
  801fd0:	dec00204 	addi	sp,sp,8
  801fd4:	f800283a 	ret

00801fd8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801fd8:	defffc04 	addi	sp,sp,-16
  801fdc:	dfc00315 	stw	ra,12(sp)
  801fe0:	df000215 	stw	fp,8(sp)
  801fe4:	df000204 	addi	fp,sp,8
  801fe8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  801fec:	e0bfff17 	ldw	r2,-4(fp)
  801ff0:	10800017 	ldw	r2,0(r2)
  801ff4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801ff8:	e0bfff17 	ldw	r2,-4(fp)
  801ffc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  802000:	010ea604 	movi	r4,15000
  802004:	080390c0 	call	80390c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802008:	e0bffe17 	ldw	r2,-8(fp)
  80200c:	00c00c04 	movi	r3,48
  802010:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  802014:	01040104 	movi	r4,4100
  802018:	080390c0 	call	80390c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80201c:	e0bffe17 	ldw	r2,-8(fp)
  802020:	00c00c04 	movi	r3,48
  802024:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  802028:	0100fa04 	movi	r4,1000
  80202c:	080390c0 	call	80390c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802030:	e0bffe17 	ldw	r2,-8(fp)
  802034:	00c00c04 	movi	r3,48
  802038:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80203c:	01400e04 	movi	r5,56
  802040:	e13fff17 	ldw	r4,-4(fp)
  802044:	08012900 	call	801290 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  802048:	01400204 	movi	r5,8
  80204c:	e13fff17 	ldw	r4,-4(fp)
  802050:	08012900 	call	801290 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  802054:	e13fff17 	ldw	r4,-4(fp)
  802058:	08014200 	call	801420 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80205c:	01400184 	movi	r5,6
  802060:	e13fff17 	ldw	r4,-4(fp)
  802064:	08012900 	call	801290 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  802068:	01400304 	movi	r5,12
  80206c:	e13fff17 	ldw	r4,-4(fp)
  802070:	08012900 	call	801290 <lcd_write_command>

  sp->esccount = -1;
  802074:	e0bfff17 	ldw	r2,-4(fp)
  802078:	00ffffc4 	movi	r3,-1
  80207c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  802080:	e0bfff17 	ldw	r2,-4(fp)
  802084:	10800a04 	addi	r2,r2,40
  802088:	01800204 	movi	r6,8
  80208c:	000b883a 	mov	r5,zero
  802090:	1009883a 	mov	r4,r2
  802094:	0803fa00 	call	803fa0 <memset>

  sp->scrollpos = 0;
  802098:	e0bfff17 	ldw	r2,-4(fp)
  80209c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8020a0:	e0bfff17 	ldw	r2,-4(fp)
  8020a4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8020a8:	e0bfff17 	ldw	r2,-4(fp)
  8020ac:	100009c5 	stb	zero,39(r2)
  8020b0:	d0a71c17 	ldw	r2,-25488(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8020b4:	01400284 	movi	r5,10
  8020b8:	1009883a 	mov	r4,r2
  8020bc:	08063880 	call	806388 <__udivsi3>
  8020c0:	1007883a 	mov	r3,r2
  8020c4:	e0bfff17 	ldw	r2,-4(fp)
  8020c8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8020cc:	e0bfff17 	ldw	r2,-4(fp)
  8020d0:	10c00104 	addi	r3,r2,4
  8020d4:	e0bfff17 	ldw	r2,-4(fp)
  8020d8:	10800717 	ldw	r2,28(r2)
  8020dc:	e1ffff17 	ldw	r7,-4(fp)
  8020e0:	01802034 	movhi	r6,128
  8020e4:	3187cb04 	addi	r6,r6,7980
  8020e8:	100b883a 	mov	r5,r2
  8020ec:	1809883a 	mov	r4,r3
  8020f0:	0802ce00 	call	802ce0 <alt_alarm_start>
}
  8020f4:	0001883a 	nop
  8020f8:	e037883a 	mov	sp,fp
  8020fc:	dfc00117 	ldw	ra,4(sp)
  802100:	df000017 	ldw	fp,0(sp)
  802104:	dec00204 	addi	sp,sp,8
  802108:	f800283a 	ret

0080210c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80210c:	defffa04 	addi	sp,sp,-24
  802110:	dfc00515 	stw	ra,20(sp)
  802114:	df000415 	stw	fp,16(sp)
  802118:	df000404 	addi	fp,sp,16
  80211c:	e13ffd15 	stw	r4,-12(fp)
  802120:	e17ffe15 	stw	r5,-8(fp)
  802124:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  802128:	e0bffd17 	ldw	r2,-12(fp)
  80212c:	10800017 	ldw	r2,0(r2)
  802130:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  802134:	e0bffc17 	ldw	r2,-16(fp)
  802138:	10c00a04 	addi	r3,r2,40
  80213c:	e0bffd17 	ldw	r2,-12(fp)
  802140:	10800217 	ldw	r2,8(r2)
  802144:	100f883a 	mov	r7,r2
  802148:	e1bfff17 	ldw	r6,-4(fp)
  80214c:	e17ffe17 	ldw	r5,-8(fp)
  802150:	1809883a 	mov	r4,r3
  802154:	0801a540 	call	801a54 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  802158:	e037883a 	mov	sp,fp
  80215c:	dfc00117 	ldw	ra,4(sp)
  802160:	df000017 	ldw	fp,0(sp)
  802164:	dec00204 	addi	sp,sp,8
  802168:	f800283a 	ret

0080216c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80216c:	defff904 	addi	sp,sp,-28
  802170:	dfc00615 	stw	ra,24(sp)
  802174:	df000515 	stw	fp,20(sp)
  802178:	df000504 	addi	fp,sp,20
  80217c:	e13ffe15 	stw	r4,-8(fp)
  802180:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  802184:	0007883a 	mov	r3,zero
  802188:	e0bffe17 	ldw	r2,-8(fp)
  80218c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  802190:	e0bffe17 	ldw	r2,-8(fp)
  802194:	10800104 	addi	r2,r2,4
  802198:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80219c:	0005303a 	rdctl	r2,status
  8021a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8021a4:	e0fffc17 	ldw	r3,-16(fp)
  8021a8:	00bfff84 	movi	r2,-2
  8021ac:	1884703a 	and	r2,r3,r2
  8021b0:	1001703a 	wrctl	status,r2
  
  return context;
  8021b4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8021b8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  8021bc:	08038040 	call	803804 <alt_tick>
  8021c0:	e0bffb17 	ldw	r2,-20(fp)
  8021c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8021c8:	e0bffd17 	ldw	r2,-12(fp)
  8021cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8021d0:	0001883a 	nop
  8021d4:	e037883a 	mov	sp,fp
  8021d8:	dfc00117 	ldw	ra,4(sp)
  8021dc:	df000017 	ldw	fp,0(sp)
  8021e0:	dec00204 	addi	sp,sp,8
  8021e4:	f800283a 	ret

008021e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8021e8:	defff904 	addi	sp,sp,-28
  8021ec:	dfc00615 	stw	ra,24(sp)
  8021f0:	df000515 	stw	fp,20(sp)
  8021f4:	df000504 	addi	fp,sp,20
  8021f8:	e13ffc15 	stw	r4,-16(fp)
  8021fc:	e17ffd15 	stw	r5,-12(fp)
  802200:	e1bffe15 	stw	r6,-8(fp)
  802204:	e1ffff15 	stw	r7,-4(fp)
  802208:	e0bfff17 	ldw	r2,-4(fp)
  80220c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  802210:	d0a71c17 	ldw	r2,-25488(gp)
  802214:	1000021e 	bne	r2,zero,802220 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  802218:	e0bffb17 	ldw	r2,-20(fp)
  80221c:	d0a71c15 	stw	r2,-25488(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  802220:	e0bffc17 	ldw	r2,-16(fp)
  802224:	10800104 	addi	r2,r2,4
  802228:	00c001c4 	movi	r3,7
  80222c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  802230:	01802034 	movhi	r6,128
  802234:	31885b04 	addi	r6,r6,8556
  802238:	e17ffc17 	ldw	r5,-16(fp)
  80223c:	e13ffe17 	ldw	r4,-8(fp)
  802240:	08033300 	call	803330 <alt_irq_register>
#endif  
}
  802244:	0001883a 	nop
  802248:	e037883a 	mov	sp,fp
  80224c:	dfc00117 	ldw	ra,4(sp)
  802250:	df000017 	ldw	fp,0(sp)
  802254:	dec00204 	addi	sp,sp,8
  802258:	f800283a 	ret

0080225c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80225c:	defffa04 	addi	sp,sp,-24
  802260:	dfc00515 	stw	ra,20(sp)
  802264:	df000415 	stw	fp,16(sp)
  802268:	df000404 	addi	fp,sp,16
  80226c:	e13ffd15 	stw	r4,-12(fp)
  802270:	e17ffe15 	stw	r5,-8(fp)
  802274:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802278:	e0bffd17 	ldw	r2,-12(fp)
  80227c:	10800017 	ldw	r2,0(r2)
  802280:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	10c00a04 	addi	r3,r2,40
  80228c:	e0bffd17 	ldw	r2,-12(fp)
  802290:	10800217 	ldw	r2,8(r2)
  802294:	100f883a 	mov	r7,r2
  802298:	e1bfff17 	ldw	r6,-4(fp)
  80229c:	e17ffe17 	ldw	r5,-8(fp)
  8022a0:	1809883a 	mov	r4,r3
  8022a4:	08023580 	call	802358 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8022a8:	e037883a 	mov	sp,fp
  8022ac:	dfc00117 	ldw	ra,4(sp)
  8022b0:	df000017 	ldw	fp,0(sp)
  8022b4:	dec00204 	addi	sp,sp,8
  8022b8:	f800283a 	ret

008022bc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8022bc:	defffa04 	addi	sp,sp,-24
  8022c0:	dfc00515 	stw	ra,20(sp)
  8022c4:	df000415 	stw	fp,16(sp)
  8022c8:	df000404 	addi	fp,sp,16
  8022cc:	e13ffd15 	stw	r4,-12(fp)
  8022d0:	e17ffe15 	stw	r5,-8(fp)
  8022d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8022d8:	e0bffd17 	ldw	r2,-12(fp)
  8022dc:	10800017 	ldw	r2,0(r2)
  8022e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	10c00a04 	addi	r3,r2,40
  8022ec:	e0bffd17 	ldw	r2,-12(fp)
  8022f0:	10800217 	ldw	r2,8(r2)
  8022f4:	100f883a 	mov	r7,r2
  8022f8:	e1bfff17 	ldw	r6,-4(fp)
  8022fc:	e17ffe17 	ldw	r5,-8(fp)
  802300:	1809883a 	mov	r4,r3
  802304:	08024580 	call	802458 <altera_avalon_uart_write>
      fd->fd_flags);
}
  802308:	e037883a 	mov	sp,fp
  80230c:	dfc00117 	ldw	ra,4(sp)
  802310:	df000017 	ldw	fp,0(sp)
  802314:	dec00204 	addi	sp,sp,8
  802318:	f800283a 	ret

0080231c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80231c:	defffe04 	addi	sp,sp,-8
  802320:	dfc00115 	stw	ra,4(sp)
  802324:	df000015 	stw	fp,0(sp)
  802328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80232c:	d0a00617 	ldw	r2,-32744(gp)
  802330:	10000326 	beq	r2,zero,802340 <alt_get_errno+0x24>
  802334:	d0a00617 	ldw	r2,-32744(gp)
  802338:	103ee83a 	callr	r2
  80233c:	00000106 	br	802344 <alt_get_errno+0x28>
  802340:	d0a71f04 	addi	r2,gp,-25476
}
  802344:	e037883a 	mov	sp,fp
  802348:	dfc00117 	ldw	ra,4(sp)
  80234c:	df000017 	ldw	fp,0(sp)
  802350:	dec00204 	addi	sp,sp,8
  802354:	f800283a 	ret

00802358 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  802358:	defff804 	addi	sp,sp,-32
  80235c:	dfc00715 	stw	ra,28(sp)
  802360:	df000615 	stw	fp,24(sp)
  802364:	df000604 	addi	fp,sp,24
  802368:	e13ffc15 	stw	r4,-16(fp)
  80236c:	e17ffd15 	stw	r5,-12(fp)
  802370:	e1bffe15 	stw	r6,-8(fp)
  802374:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
  802378:	e0bfff17 	ldw	r2,-4(fp)
  80237c:	1090000c 	andi	r2,r2,16384
  802380:	1005003a 	cmpeq	r2,r2,zero
  802384:	10803fcc 	andi	r2,r2,255
  802388:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10800017 	ldw	r2,0(r2)
  802394:	10800204 	addi	r2,r2,8
  802398:	10800037 	ldwio	r2,0(r2)
  80239c:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
  8023a0:	e0bffc17 	ldw	r2,-16(fp)
  8023a4:	10800017 	ldw	r2,0(r2)
  8023a8:	10800204 	addi	r2,r2,8
  8023ac:	0007883a 	mov	r3,zero
  8023b0:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
  8023b4:	e0bffb17 	ldw	r2,-20(fp)
  8023b8:	1080200c 	andi	r2,r2,128
  8023bc:	10000b26 	beq	r2,zero,8023ec <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8023c0:	e0bffc17 	ldw	r2,-16(fp)
  8023c4:	10800017 	ldw	r2,0(r2)
  8023c8:	10800037 	ldwio	r2,0(r2)
  8023cc:	1007883a 	mov	r3,r2
  8023d0:	e0bffd17 	ldw	r2,-12(fp)
  8023d4:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8023d8:	e0bffb17 	ldw	r2,-20(fp)
  8023dc:	108000cc 	andi	r2,r2,3
  8023e0:	1000021e 	bne	r2,zero,8023ec <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
  8023e4:	00800044 	movi	r2,1
  8023e8:	00000706 	br	802408 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
  8023ec:	e0bffa17 	ldw	r2,-24(fp)
  8023f0:	103fe61e 	bne	r2,zero,80238c <__alt_data_end+0xff80238c>

  ALT_ERRNO = EWOULDBLOCK;
  8023f4:	080231c0 	call	80231c <alt_get_errno>
  8023f8:	1007883a 	mov	r3,r2
  8023fc:	008002c4 	movi	r2,11
  802400:	18800015 	stw	r2,0(r3)
 
  return 0;
  802404:	0005883a 	mov	r2,zero
}
  802408:	e037883a 	mov	sp,fp
  80240c:	dfc00117 	ldw	ra,4(sp)
  802410:	df000017 	ldw	fp,0(sp)
  802414:	dec00204 	addi	sp,sp,8
  802418:	f800283a 	ret

0080241c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80241c:	defffe04 	addi	sp,sp,-8
  802420:	dfc00115 	stw	ra,4(sp)
  802424:	df000015 	stw	fp,0(sp)
  802428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80242c:	d0a00617 	ldw	r2,-32744(gp)
  802430:	10000326 	beq	r2,zero,802440 <alt_get_errno+0x24>
  802434:	d0a00617 	ldw	r2,-32744(gp)
  802438:	103ee83a 	callr	r2
  80243c:	00000106 	br	802444 <alt_get_errno+0x28>
  802440:	d0a71f04 	addi	r2,gp,-25476
}
  802444:	e037883a 	mov	sp,fp
  802448:	dfc00117 	ldw	ra,4(sp)
  80244c:	df000017 	ldw	fp,0(sp)
  802450:	dec00204 	addi	sp,sp,8
  802454:	f800283a 	ret

00802458 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  802458:	defff704 	addi	sp,sp,-36
  80245c:	dfc00815 	stw	ra,32(sp)
  802460:	df000715 	stw	fp,28(sp)
  802464:	df000704 	addi	fp,sp,28
  802468:	e13ffc15 	stw	r4,-16(fp)
  80246c:	e17ffd15 	stw	r5,-12(fp)
  802470:	e1bffe15 	stw	r6,-8(fp)
  802474:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
  802478:	e0bfff17 	ldw	r2,-4(fp)
  80247c:	1090000c 	andi	r2,r2,16384
  802480:	1005003a 	cmpeq	r2,r2,zero
  802484:	10803fcc 	andi	r2,r2,255
  802488:	e0bffa15 	stw	r2,-24(fp)
  count = len;
  80248c:	e0bffe17 	ldw	r2,-8(fp)
  802490:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10800017 	ldw	r2,0(r2)
  80249c:	10800204 	addi	r2,r2,8
  8024a0:	10800037 	ldwio	r2,0(r2)
  8024a4:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
  8024a8:	e0bffb17 	ldw	r2,-20(fp)
  8024ac:	1080100c 	andi	r2,r2,64
  8024b0:	10000f26 	beq	r2,zero,8024f0 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
  8024b4:	e0bffc17 	ldw	r2,-16(fp)
  8024b8:	10800017 	ldw	r2,0(r2)
  8024bc:	10800104 	addi	r2,r2,4
  8024c0:	1009883a 	mov	r4,r2
  8024c4:	e0bffd17 	ldw	r2,-12(fp)
  8024c8:	10c00044 	addi	r3,r2,1
  8024cc:	e0fffd15 	stw	r3,-12(fp)
  8024d0:	10800003 	ldbu	r2,0(r2)
  8024d4:	10803fcc 	andi	r2,r2,255
  8024d8:	1080201c 	xori	r2,r2,128
  8024dc:	10bfe004 	addi	r2,r2,-128
  8024e0:	20800035 	stwio	r2,0(r4)
      count--;
  8024e4:	e0bff917 	ldw	r2,-28(fp)
  8024e8:	10bfffc4 	addi	r2,r2,-1
  8024ec:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
  8024f0:	e0bffa17 	ldw	r2,-24(fp)
  8024f4:	10000226 	beq	r2,zero,802500 <altera_avalon_uart_write+0xa8>
  8024f8:	e0bff917 	ldw	r2,-28(fp)
  8024fc:	103fe51e 	bne	r2,zero,802494 <__alt_data_end+0xff802494>

  if (count)
  802500:	e0bff917 	ldw	r2,-28(fp)
  802504:	10000426 	beq	r2,zero,802518 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
  802508:	080241c0 	call	80241c <alt_get_errno>
  80250c:	1007883a 	mov	r3,r2
  802510:	008002c4 	movi	r2,11
  802514:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
  802518:	e0fffe17 	ldw	r3,-8(fp)
  80251c:	e0bff917 	ldw	r2,-28(fp)
  802520:	1885c83a 	sub	r2,r3,r2
}
  802524:	e037883a 	mov	sp,fp
  802528:	dfc00117 	ldw	ra,4(sp)
  80252c:	df000017 	ldw	fp,0(sp)
  802530:	dec00204 	addi	sp,sp,8
  802534:	f800283a 	ret

00802538 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  802538:	defffc04 	addi	sp,sp,-16
  80253c:	dfc00315 	stw	ra,12(sp)
  802540:	df000215 	stw	fp,8(sp)
  802544:	df000204 	addi	fp,sp,8
  802548:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  80254c:	d1600304 	addi	r5,gp,-32756
  802550:	e13fff17 	ldw	r4,-4(fp)
  802554:	080312c0 	call	80312c <alt_find_dev>
  802558:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  80255c:	e0bffe17 	ldw	r2,-8(fp)
}
  802560:	e037883a 	mov	sp,fp
  802564:	dfc00117 	ldw	ra,4(sp)
  802568:	df000017 	ldw	fp,0(sp)
  80256c:	dec00204 	addi	sp,sp,8
  802570:	f800283a 	ret

00802574 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  802574:	defffd04 	addi	sp,sp,-12
  802578:	df000215 	stw	fp,8(sp)
  80257c:	df000204 	addi	fp,sp,8
  802580:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802584:	e0bfff17 	ldw	r2,-4(fp)
  802588:	10800a17 	ldw	r2,40(r2)
  80258c:	10800037 	ldwio	r2,0(r2)
  802590:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  802594:	e0bffe17 	ldw	r2,-8(fp)
  802598:	10800054 	ori	r2,r2,1
  80259c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8025a0:	e0bfff17 	ldw	r2,-4(fp)
  8025a4:	10800a17 	ldw	r2,40(r2)
  8025a8:	1007883a 	mov	r3,r2
  8025ac:	e0bffe17 	ldw	r2,-8(fp)
  8025b0:	18800035 	stwio	r2,0(r3)
}
  8025b4:	0001883a 	nop
  8025b8:	e037883a 	mov	sp,fp
  8025bc:	df000017 	ldw	fp,0(sp)
  8025c0:	dec00104 	addi	sp,sp,4
  8025c4:	f800283a 	ret

008025c8 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  8025c8:	defffd04 	addi	sp,sp,-12
  8025cc:	df000215 	stw	fp,8(sp)
  8025d0:	df000204 	addi	fp,sp,8
  8025d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8025d8:	e0bfff17 	ldw	r2,-4(fp)
  8025dc:	10800a17 	ldw	r2,40(r2)
  8025e0:	10800037 	ldwio	r2,0(r2)
  8025e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  8025e8:	e0fffe17 	ldw	r3,-8(fp)
  8025ec:	00bfff84 	movi	r2,-2
  8025f0:	1884703a 	and	r2,r3,r2
  8025f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8025f8:	e0bfff17 	ldw	r2,-4(fp)
  8025fc:	10800a17 	ldw	r2,40(r2)
  802600:	1007883a 	mov	r3,r2
  802604:	e0bffe17 	ldw	r2,-8(fp)
  802608:	18800035 	stwio	r2,0(r3)
}
  80260c:	0001883a 	nop
  802610:	e037883a 	mov	sp,fp
  802614:	df000017 	ldw	fp,0(sp)
  802618:	dec00104 	addi	sp,sp,4
  80261c:	f800283a 	ret

00802620 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  802620:	defffd04 	addi	sp,sp,-12
  802624:	df000215 	stw	fp,8(sp)
  802628:	df000204 	addi	fp,sp,8
  80262c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802630:	e0bfff17 	ldw	r2,-4(fp)
  802634:	10800a17 	ldw	r2,40(r2)
  802638:	10800037 	ldwio	r2,0(r2)
  80263c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  802640:	e0bffe17 	ldw	r2,-8(fp)
  802644:	10800094 	ori	r2,r2,2
  802648:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80264c:	e0bfff17 	ldw	r2,-4(fp)
  802650:	10800a17 	ldw	r2,40(r2)
  802654:	1007883a 	mov	r3,r2
  802658:	e0bffe17 	ldw	r2,-8(fp)
  80265c:	18800035 	stwio	r2,0(r3)
}
  802660:	0001883a 	nop
  802664:	e037883a 	mov	sp,fp
  802668:	df000017 	ldw	fp,0(sp)
  80266c:	dec00104 	addi	sp,sp,4
  802670:	f800283a 	ret

00802674 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  802674:	defffd04 	addi	sp,sp,-12
  802678:	df000215 	stw	fp,8(sp)
  80267c:	df000204 	addi	fp,sp,8
  802680:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802684:	e0bfff17 	ldw	r2,-4(fp)
  802688:	10800a17 	ldw	r2,40(r2)
  80268c:	10800037 	ldwio	r2,0(r2)
  802690:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  802694:	e0fffe17 	ldw	r3,-8(fp)
  802698:	00bfff44 	movi	r2,-3
  80269c:	1884703a 	and	r2,r3,r2
  8026a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8026a4:	e0bfff17 	ldw	r2,-4(fp)
  8026a8:	10800a17 	ldw	r2,40(r2)
  8026ac:	1007883a 	mov	r3,r2
  8026b0:	e0bffe17 	ldw	r2,-8(fp)
  8026b4:	18800035 	stwio	r2,0(r3)
}
  8026b8:	0001883a 	nop
  8026bc:	e037883a 	mov	sp,fp
  8026c0:	df000017 	ldw	fp,0(sp)
  8026c4:	dec00104 	addi	sp,sp,4
  8026c8:	f800283a 	ret

008026cc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  8026cc:	defffd04 	addi	sp,sp,-12
  8026d0:	df000215 	stw	fp,8(sp)
  8026d4:	df000204 	addi	fp,sp,8
  8026d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8026dc:	e0bfff17 	ldw	r2,-4(fp)
  8026e0:	10800a17 	ldw	r2,40(r2)
  8026e4:	10800037 	ldwio	r2,0(r2)
  8026e8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8026ec:	e0bffe17 	ldw	r2,-8(fp)
  8026f0:	1080400c 	andi	r2,r2,256
  8026f4:	1004c03a 	cmpne	r2,r2,zero
  8026f8:	10803fcc 	andi	r2,r2,255
}
  8026fc:	e037883a 	mov	sp,fp
  802700:	df000017 	ldw	fp,0(sp)
  802704:	dec00104 	addi	sp,sp,4
  802708:	f800283a 	ret

0080270c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  80270c:	defffd04 	addi	sp,sp,-12
  802710:	df000215 	stw	fp,8(sp)
  802714:	df000204 	addi	fp,sp,8
  802718:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80271c:	e0bfff17 	ldw	r2,-4(fp)
  802720:	10800a17 	ldw	r2,40(r2)
  802724:	10800037 	ldwio	r2,0(r2)
  802728:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  80272c:	e0bffe17 	ldw	r2,-8(fp)
  802730:	1080800c 	andi	r2,r2,512
  802734:	1004c03a 	cmpne	r2,r2,zero
  802738:	10803fcc 	andi	r2,r2,255
}
  80273c:	e037883a 	mov	sp,fp
  802740:	df000017 	ldw	fp,0(sp)
  802744:	dec00104 	addi	sp,sp,4
  802748:	f800283a 	ret

0080274c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  80274c:	defffd04 	addi	sp,sp,-12
  802750:	df000215 	stw	fp,8(sp)
  802754:	df000204 	addi	fp,sp,8
  802758:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80275c:	e0bfff17 	ldw	r2,-4(fp)
  802760:	10800a17 	ldw	r2,40(r2)
  802764:	10800037 	ldwio	r2,0(r2)
  802768:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  80276c:	e0bffe17 	ldw	r2,-8(fp)
  802770:	10800114 	ori	r2,r2,4
  802774:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  802778:	e0bffe17 	ldw	r2,-8(fp)
  80277c:	10800214 	ori	r2,r2,8
  802780:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  802784:	e0bfff17 	ldw	r2,-4(fp)
  802788:	10800a17 	ldw	r2,40(r2)
  80278c:	1007883a 	mov	r3,r2
  802790:	e0bffe17 	ldw	r2,-8(fp)
  802794:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  802798:	e0fffe17 	ldw	r3,-8(fp)
  80279c:	00bffec4 	movi	r2,-5
  8027a0:	1884703a 	and	r2,r3,r2
  8027a4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  8027a8:	e0fffe17 	ldw	r3,-8(fp)
  8027ac:	00bffdc4 	movi	r2,-9
  8027b0:	1884703a 	and	r2,r3,r2
  8027b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8027b8:	e0bfff17 	ldw	r2,-4(fp)
  8027bc:	10800a17 	ldw	r2,40(r2)
  8027c0:	1007883a 	mov	r3,r2
  8027c4:	e0bffe17 	ldw	r2,-8(fp)
  8027c8:	18800035 	stwio	r2,0(r3)
}
  8027cc:	0001883a 	nop
  8027d0:	e037883a 	mov	sp,fp
  8027d4:	df000017 	ldw	fp,0(sp)
  8027d8:	dec00104 	addi	sp,sp,4
  8027dc:	f800283a 	ret

008027e0 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  8027e0:	defffc04 	addi	sp,sp,-16
  8027e4:	df000315 	stw	fp,12(sp)
  8027e8:	df000304 	addi	fp,sp,12
  8027ec:	e13ffe15 	stw	r4,-8(fp)
  8027f0:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8027f4:	e0bffe17 	ldw	r2,-8(fp)
  8027f8:	10800a17 	ldw	r2,40(r2)
  8027fc:	10800104 	addi	r2,r2,4
  802800:	10800037 	ldwio	r2,0(r2)
  802804:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  802808:	e0bfff17 	ldw	r2,-4(fp)
  80280c:	1000041e 	bne	r2,zero,802820 <alt_up_audio_read_fifo_avail+0x40>
  802810:	e0bffd17 	ldw	r2,-12(fp)
  802814:	10bfc00c 	andi	r2,r2,65280
  802818:	1004d23a 	srli	r2,r2,8
  80281c:	00000206 	br	802828 <alt_up_audio_read_fifo_avail+0x48>
  802820:	e0bffd17 	ldw	r2,-12(fp)
  802824:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802828:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  80282c:	e0bffd17 	ldw	r2,-12(fp)
}
  802830:	e037883a 	mov	sp,fp
  802834:	df000017 	ldw	fp,0(sp)
  802838:	dec00104 	addi	sp,sp,4
  80283c:	f800283a 	ret

00802840 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  802840:	defffa04 	addi	sp,sp,-24
  802844:	dfc00515 	stw	ra,20(sp)
  802848:	df000415 	stw	fp,16(sp)
  80284c:	df000404 	addi	fp,sp,16
  802850:	e13ffd15 	stw	r4,-12(fp)
  802854:	e17ffe15 	stw	r5,-8(fp)
  802858:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  80285c:	01400044 	movi	r5,1
  802860:	e13ffd17 	ldw	r4,-12(fp)
  802864:	08027e00 	call	8027e0 <alt_up_audio_read_fifo_avail>
  802868:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  80286c:	e0bffc17 	ldw	r2,-16(fp)
  802870:	10801868 	cmpgeui	r2,r2,97
  802874:	1000021e 	bne	r2,zero,802880 <alt_up_audio_record_r+0x40>
		return 0;
  802878:	0005883a 	mov	r2,zero
  80287c:	00000506 	br	802894 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  802880:	01c00044 	movi	r7,1
  802884:	e1bfff17 	ldw	r6,-4(fp)
  802888:	e17ffe17 	ldw	r5,-8(fp)
  80288c:	e13ffd17 	ldw	r4,-12(fp)
  802890:	0802a400 	call	802a40 <alt_up_audio_read_fifo>
}
  802894:	e037883a 	mov	sp,fp
  802898:	dfc00117 	ldw	ra,4(sp)
  80289c:	df000017 	ldw	fp,0(sp)
  8028a0:	dec00204 	addi	sp,sp,8
  8028a4:	f800283a 	ret

008028a8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8028a8:	defffa04 	addi	sp,sp,-24
  8028ac:	dfc00515 	stw	ra,20(sp)
  8028b0:	df000415 	stw	fp,16(sp)
  8028b4:	df000404 	addi	fp,sp,16
  8028b8:	e13ffd15 	stw	r4,-12(fp)
  8028bc:	e17ffe15 	stw	r5,-8(fp)
  8028c0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  8028c4:	000b883a 	mov	r5,zero
  8028c8:	e13ffd17 	ldw	r4,-12(fp)
  8028cc:	08027e00 	call	8027e0 <alt_up_audio_read_fifo_avail>
  8028d0:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  8028d4:	e0bffc17 	ldw	r2,-16(fp)
  8028d8:	10801868 	cmpgeui	r2,r2,97
  8028dc:	1000021e 	bne	r2,zero,8028e8 <alt_up_audio_record_l+0x40>
		return 0;
  8028e0:	0005883a 	mov	r2,zero
  8028e4:	00000506 	br	8028fc <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8028e8:	000f883a 	mov	r7,zero
  8028ec:	e1bfff17 	ldw	r6,-4(fp)
  8028f0:	e17ffe17 	ldw	r5,-8(fp)
  8028f4:	e13ffd17 	ldw	r4,-12(fp)
  8028f8:	0802a400 	call	802a40 <alt_up_audio_read_fifo>
}
  8028fc:	e037883a 	mov	sp,fp
  802900:	dfc00117 	ldw	ra,4(sp)
  802904:	df000017 	ldw	fp,0(sp)
  802908:	dec00204 	addi	sp,sp,8
  80290c:	f800283a 	ret

00802910 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  802910:	defffc04 	addi	sp,sp,-16
  802914:	df000315 	stw	fp,12(sp)
  802918:	df000304 	addi	fp,sp,12
  80291c:	e13ffe15 	stw	r4,-8(fp)
  802920:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802924:	e0bffe17 	ldw	r2,-8(fp)
  802928:	10800a17 	ldw	r2,40(r2)
  80292c:	10800104 	addi	r2,r2,4
  802930:	10800037 	ldwio	r2,0(r2)
  802934:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802938:	e0bfff17 	ldw	r2,-4(fp)
  80293c:	1000031e 	bne	r2,zero,80294c <alt_up_audio_write_fifo_space+0x3c>
  802940:	e0bffd17 	ldw	r2,-12(fp)
  802944:	1004d63a 	srli	r2,r2,24
  802948:	00000306 	br	802958 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  80294c:	e0bffd17 	ldw	r2,-12(fp)
  802950:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802954:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802958:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  80295c:	e0bffd17 	ldw	r2,-12(fp)
}
  802960:	e037883a 	mov	sp,fp
  802964:	df000017 	ldw	fp,0(sp)
  802968:	dec00104 	addi	sp,sp,4
  80296c:	f800283a 	ret

00802970 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  802970:	defffa04 	addi	sp,sp,-24
  802974:	dfc00515 	stw	ra,20(sp)
  802978:	df000415 	stw	fp,16(sp)
  80297c:	df000404 	addi	fp,sp,16
  802980:	e13ffd15 	stw	r4,-12(fp)
  802984:	e17ffe15 	stw	r5,-8(fp)
  802988:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  80298c:	01400044 	movi	r5,1
  802990:	e13ffd17 	ldw	r4,-12(fp)
  802994:	08029100 	call	802910 <alt_up_audio_write_fifo_space>
  802998:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  80299c:	e0bffc17 	ldw	r2,-16(fp)
  8029a0:	10801868 	cmpgeui	r2,r2,97
  8029a4:	1000021e 	bne	r2,zero,8029b0 <alt_up_audio_play_r+0x40>
		return 0;
  8029a8:	0005883a 	mov	r2,zero
  8029ac:	00000506 	br	8029c4 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8029b0:	01c00044 	movi	r7,1
  8029b4:	e1bfff17 	ldw	r6,-4(fp)
  8029b8:	e17ffe17 	ldw	r5,-8(fp)
  8029bc:	e13ffd17 	ldw	r4,-12(fp)
  8029c0:	0802b200 	call	802b20 <alt_up_audio_write_fifo>
}
  8029c4:	e037883a 	mov	sp,fp
  8029c8:	dfc00117 	ldw	ra,4(sp)
  8029cc:	df000017 	ldw	fp,0(sp)
  8029d0:	dec00204 	addi	sp,sp,8
  8029d4:	f800283a 	ret

008029d8 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8029d8:	defffa04 	addi	sp,sp,-24
  8029dc:	dfc00515 	stw	ra,20(sp)
  8029e0:	df000415 	stw	fp,16(sp)
  8029e4:	df000404 	addi	fp,sp,16
  8029e8:	e13ffd15 	stw	r4,-12(fp)
  8029ec:	e17ffe15 	stw	r5,-8(fp)
  8029f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  8029f4:	000b883a 	mov	r5,zero
  8029f8:	e13ffd17 	ldw	r4,-12(fp)
  8029fc:	08029100 	call	802910 <alt_up_audio_write_fifo_space>
  802a00:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  802a04:	e0bffc17 	ldw	r2,-16(fp)
  802a08:	10801868 	cmpgeui	r2,r2,97
  802a0c:	1000021e 	bne	r2,zero,802a18 <alt_up_audio_play_l+0x40>
		return 0;
  802a10:	0005883a 	mov	r2,zero
  802a14:	00000506 	br	802a2c <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  802a18:	000f883a 	mov	r7,zero
  802a1c:	e1bfff17 	ldw	r6,-4(fp)
  802a20:	e17ffe17 	ldw	r5,-8(fp)
  802a24:	e13ffd17 	ldw	r4,-12(fp)
  802a28:	0802b200 	call	802b20 <alt_up_audio_write_fifo>
}
  802a2c:	e037883a 	mov	sp,fp
  802a30:	dfc00117 	ldw	ra,4(sp)
  802a34:	df000017 	ldw	fp,0(sp)
  802a38:	dec00204 	addi	sp,sp,8
  802a3c:	f800283a 	ret

00802a40 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  802a40:	defff904 	addi	sp,sp,-28
  802a44:	df000615 	stw	fp,24(sp)
  802a48:	df000604 	addi	fp,sp,24
  802a4c:	e13ffc15 	stw	r4,-16(fp)
  802a50:	e17ffd15 	stw	r5,-12(fp)
  802a54:	e1bffe15 	stw	r6,-8(fp)
  802a58:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  802a5c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  802a60:	00002506 	br	802af8 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802a64:	e0bffc17 	ldw	r2,-16(fp)
  802a68:	10800a17 	ldw	r2,40(r2)
  802a6c:	10800104 	addi	r2,r2,4
  802a70:	10800037 	ldwio	r2,0(r2)
  802a74:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  802a78:	e0bfff17 	ldw	r2,-4(fp)
  802a7c:	1000041e 	bne	r2,zero,802a90 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  802a80:	e0bffb17 	ldw	r2,-20(fp)
  802a84:	10bfc00c 	andi	r2,r2,65280
			:
  802a88:	1004d23a 	srli	r2,r2,8
  802a8c:	00000206 	br	802a98 <alt_up_audio_read_fifo+0x58>
  802a90:	e0bffb17 	ldw	r2,-20(fp)
  802a94:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802a98:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  802a9c:	e0bffb17 	ldw	r2,-20(fp)
  802aa0:	10001926 	beq	r2,zero,802b08 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  802aa4:	e0bffa17 	ldw	r2,-24(fp)
  802aa8:	1085883a 	add	r2,r2,r2
  802aac:	1085883a 	add	r2,r2,r2
  802ab0:	1007883a 	mov	r3,r2
  802ab4:	e0bffd17 	ldw	r2,-12(fp)
  802ab8:	10c5883a 	add	r2,r2,r3
  802abc:	e0ffff17 	ldw	r3,-4(fp)
  802ac0:	1800051e 	bne	r3,zero,802ad8 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  802ac4:	e0fffc17 	ldw	r3,-16(fp)
  802ac8:	18c00a17 	ldw	r3,40(r3)
  802acc:	18c00204 	addi	r3,r3,8
  802ad0:	18c00037 	ldwio	r3,0(r3)
  802ad4:	00000406 	br	802ae8 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  802ad8:	e0fffc17 	ldw	r3,-16(fp)
  802adc:	18c00a17 	ldw	r3,40(r3)
  802ae0:	18c00304 	addi	r3,r3,12
  802ae4:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  802ae8:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  802aec:	e0bffa17 	ldw	r2,-24(fp)
  802af0:	10800044 	addi	r2,r2,1
  802af4:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  802af8:	e0fffa17 	ldw	r3,-24(fp)
  802afc:	e0bffe17 	ldw	r2,-8(fp)
  802b00:	18bfd816 	blt	r3,r2,802a64 <__alt_data_end+0xff802a64>
  802b04:	00000106 	br	802b0c <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
  802b08:	0001883a 	nop
		}
	}
	return count;
  802b0c:	e0bffa17 	ldw	r2,-24(fp)
}
  802b10:	e037883a 	mov	sp,fp
  802b14:	df000017 	ldw	fp,0(sp)
  802b18:	dec00104 	addi	sp,sp,4
  802b1c:	f800283a 	ret

00802b20 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  802b20:	defff904 	addi	sp,sp,-28
  802b24:	df000615 	stw	fp,24(sp)
  802b28:	df000604 	addi	fp,sp,24
  802b2c:	e13ffc15 	stw	r4,-16(fp)
  802b30:	e17ffd15 	stw	r5,-12(fp)
  802b34:	e1bffe15 	stw	r6,-8(fp)
  802b38:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  802b3c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  802b40:	00002f06 	br	802c00 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802b44:	e0bffc17 	ldw	r2,-16(fp)
  802b48:	10800a17 	ldw	r2,40(r2)
  802b4c:	10800104 	addi	r2,r2,4
  802b50:	10800037 	ldwio	r2,0(r2)
  802b54:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802b58:	e0bfff17 	ldw	r2,-4(fp)
  802b5c:	1000031e 	bne	r2,zero,802b6c <alt_up_audio_write_fifo+0x4c>
  802b60:	e0bffb17 	ldw	r2,-20(fp)
  802b64:	1004d63a 	srli	r2,r2,24
  802b68:	00000306 	br	802b78 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  802b6c:	e0bffb17 	ldw	r2,-20(fp)
  802b70:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802b74:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802b78:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  802b7c:	e0bffb17 	ldw	r2,-20(fp)
  802b80:	10002326 	beq	r2,zero,802c10 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  802b84:	e0bfff17 	ldw	r2,-4(fp)
  802b88:	10000f1e 	bne	r2,zero,802bc8 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10800a17 	ldw	r2,40(r2)
  802b94:	10800204 	addi	r2,r2,8
  802b98:	1009883a 	mov	r4,r2
  802b9c:	e0bffa17 	ldw	r2,-24(fp)
  802ba0:	10c00044 	addi	r3,r2,1
  802ba4:	e0fffa15 	stw	r3,-24(fp)
  802ba8:	1085883a 	add	r2,r2,r2
  802bac:	1085883a 	add	r2,r2,r2
  802bb0:	1007883a 	mov	r3,r2
  802bb4:	e0bffd17 	ldw	r2,-12(fp)
  802bb8:	10c5883a 	add	r2,r2,r3
  802bbc:	10800017 	ldw	r2,0(r2)
  802bc0:	20800035 	stwio	r2,0(r4)
  802bc4:	00000e06 	br	802c00 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  802bc8:	e0bffc17 	ldw	r2,-16(fp)
  802bcc:	10800a17 	ldw	r2,40(r2)
  802bd0:	10800304 	addi	r2,r2,12
  802bd4:	1009883a 	mov	r4,r2
  802bd8:	e0bffa17 	ldw	r2,-24(fp)
  802bdc:	10c00044 	addi	r3,r2,1
  802be0:	e0fffa15 	stw	r3,-24(fp)
  802be4:	1085883a 	add	r2,r2,r2
  802be8:	1085883a 	add	r2,r2,r2
  802bec:	1007883a 	mov	r3,r2
  802bf0:	e0bffd17 	ldw	r2,-12(fp)
  802bf4:	10c5883a 	add	r2,r2,r3
  802bf8:	10800017 	ldw	r2,0(r2)
  802bfc:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  802c00:	e0fffa17 	ldw	r3,-24(fp)
  802c04:	e0bffe17 	ldw	r2,-8(fp)
  802c08:	18bfce16 	blt	r3,r2,802b44 <__alt_data_end+0xff802b44>
  802c0c:	00000106 	br	802c14 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
  802c10:	0001883a 	nop
		}
	}
	return count;
  802c14:	e0bffa17 	ldw	r2,-24(fp)
}
  802c18:	e037883a 	mov	sp,fp
  802c1c:	df000017 	ldw	fp,0(sp)
  802c20:	dec00104 	addi	sp,sp,4
  802c24:	f800283a 	ret

00802c28 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  802c28:	defffd04 	addi	sp,sp,-12
  802c2c:	df000215 	stw	fp,8(sp)
  802c30:	df000204 	addi	fp,sp,8
  802c34:	e13ffe15 	stw	r4,-8(fp)
  802c38:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  802c3c:	e0bfff17 	ldw	r2,-4(fp)
  802c40:	1000051e 	bne	r2,zero,802c58 <alt_up_audio_read_fifo_head+0x30>
  802c44:	e0bffe17 	ldw	r2,-8(fp)
  802c48:	10800a17 	ldw	r2,40(r2)
  802c4c:	10800204 	addi	r2,r2,8
  802c50:	10800037 	ldwio	r2,0(r2)
  802c54:	00000406 	br	802c68 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  802c58:	e0bffe17 	ldw	r2,-8(fp)
  802c5c:	10800a17 	ldw	r2,40(r2)
  802c60:	10800304 	addi	r2,r2,12
  802c64:	10800037 	ldwio	r2,0(r2)
}
  802c68:	e037883a 	mov	sp,fp
  802c6c:	df000017 	ldw	fp,0(sp)
  802c70:	dec00104 	addi	sp,sp,4
  802c74:	f800283a 	ret

00802c78 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  802c78:	defffc04 	addi	sp,sp,-16
  802c7c:	df000315 	stw	fp,12(sp)
  802c80:	df000304 	addi	fp,sp,12
  802c84:	e13ffd15 	stw	r4,-12(fp)
  802c88:	e17ffe15 	stw	r5,-8(fp)
  802c8c:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  802c90:	e0bfff17 	ldw	r2,-4(fp)
  802c94:	1000071e 	bne	r2,zero,802cb4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  802c98:	e0bffd17 	ldw	r2,-12(fp)
  802c9c:	10800a17 	ldw	r2,40(r2)
  802ca0:	10800204 	addi	r2,r2,8
  802ca4:	1007883a 	mov	r3,r2
  802ca8:	e0bffe17 	ldw	r2,-8(fp)
  802cac:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
  802cb0:	00000606 	br	802ccc <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  802cb4:	e0bffd17 	ldw	r2,-12(fp)
  802cb8:	10800a17 	ldw	r2,40(r2)
  802cbc:	10800304 	addi	r2,r2,12
  802cc0:	1007883a 	mov	r3,r2
  802cc4:	e0bffe17 	ldw	r2,-8(fp)
  802cc8:	18800035 	stwio	r2,0(r3)
}
  802ccc:	0001883a 	nop
  802cd0:	e037883a 	mov	sp,fp
  802cd4:	df000017 	ldw	fp,0(sp)
  802cd8:	dec00104 	addi	sp,sp,4
  802cdc:	f800283a 	ret

00802ce0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  802ce0:	defff504 	addi	sp,sp,-44
  802ce4:	df000a15 	stw	fp,40(sp)
  802ce8:	df000a04 	addi	fp,sp,40
  802cec:	e13ffc15 	stw	r4,-16(fp)
  802cf0:	e17ffd15 	stw	r5,-12(fp)
  802cf4:	e1bffe15 	stw	r6,-8(fp)
  802cf8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  802cfc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802d00:	d0a71c17 	ldw	r2,-25488(gp)
  
  if (alt_ticks_per_second ())
  802d04:	10003c26 	beq	r2,zero,802df8 <alt_alarm_start+0x118>
  {
    if (alarm)
  802d08:	e0bffc17 	ldw	r2,-16(fp)
  802d0c:	10003826 	beq	r2,zero,802df0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	e0fffe17 	ldw	r3,-8(fp)
  802d18:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	e0ffff17 	ldw	r3,-4(fp)
  802d24:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d28:	0005303a 	rdctl	r2,status
  802d2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d30:	e0fff917 	ldw	r3,-28(fp)
  802d34:	00bfff84 	movi	r2,-2
  802d38:	1884703a 	and	r2,r3,r2
  802d3c:	1001703a 	wrctl	status,r2
  
  return context;
  802d40:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  802d44:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  802d48:	d0a71d17 	ldw	r2,-25484(gp)
      
      current_nticks = alt_nticks();
  802d4c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  802d50:	e0fffd17 	ldw	r3,-12(fp)
  802d54:	e0bff617 	ldw	r2,-40(fp)
  802d58:	1885883a 	add	r2,r3,r2
  802d5c:	10c00044 	addi	r3,r2,1
  802d60:	e0bffc17 	ldw	r2,-16(fp)
  802d64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10c00217 	ldw	r3,8(r2)
  802d70:	e0bff617 	ldw	r2,-40(fp)
  802d74:	1880042e 	bgeu	r3,r2,802d88 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  802d78:	e0bffc17 	ldw	r2,-16(fp)
  802d7c:	00c00044 	movi	r3,1
  802d80:	10c00405 	stb	r3,16(r2)
  802d84:	00000206 	br	802d90 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  802d88:	e0bffc17 	ldw	r2,-16(fp)
  802d8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802d90:	e0bffc17 	ldw	r2,-16(fp)
  802d94:	d0e00804 	addi	r3,gp,-32736
  802d98:	e0fffa15 	stw	r3,-24(fp)
  802d9c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802da0:	e0bffb17 	ldw	r2,-20(fp)
  802da4:	e0fffa17 	ldw	r3,-24(fp)
  802da8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802dac:	e0bffa17 	ldw	r2,-24(fp)
  802db0:	10c00017 	ldw	r3,0(r2)
  802db4:	e0bffb17 	ldw	r2,-20(fp)
  802db8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802dbc:	e0bffa17 	ldw	r2,-24(fp)
  802dc0:	10800017 	ldw	r2,0(r2)
  802dc4:	e0fffb17 	ldw	r3,-20(fp)
  802dc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802dcc:	e0bffa17 	ldw	r2,-24(fp)
  802dd0:	e0fffb17 	ldw	r3,-20(fp)
  802dd4:	10c00015 	stw	r3,0(r2)
  802dd8:	e0bff817 	ldw	r2,-32(fp)
  802ddc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802de0:	e0bff717 	ldw	r2,-36(fp)
  802de4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  802de8:	0005883a 	mov	r2,zero
  802dec:	00000306 	br	802dfc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  802df0:	00bffa84 	movi	r2,-22
  802df4:	00000106 	br	802dfc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  802df8:	00bfde84 	movi	r2,-134
  }
}
  802dfc:	e037883a 	mov	sp,fp
  802e00:	df000017 	ldw	fp,0(sp)
  802e04:	dec00104 	addi	sp,sp,4
  802e08:	f800283a 	ret

00802e0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802e0c:	defffe04 	addi	sp,sp,-8
  802e10:	dfc00115 	stw	ra,4(sp)
  802e14:	df000015 	stw	fp,0(sp)
  802e18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802e1c:	d0a00617 	ldw	r2,-32744(gp)
  802e20:	10000326 	beq	r2,zero,802e30 <alt_get_errno+0x24>
  802e24:	d0a00617 	ldw	r2,-32744(gp)
  802e28:	103ee83a 	callr	r2
  802e2c:	00000106 	br	802e34 <alt_get_errno+0x28>
  802e30:	d0a71f04 	addi	r2,gp,-25476
}
  802e34:	e037883a 	mov	sp,fp
  802e38:	dfc00117 	ldw	ra,4(sp)
  802e3c:	df000017 	ldw	fp,0(sp)
  802e40:	dec00204 	addi	sp,sp,8
  802e44:	f800283a 	ret

00802e48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802e48:	defffb04 	addi	sp,sp,-20
  802e4c:	dfc00415 	stw	ra,16(sp)
  802e50:	df000315 	stw	fp,12(sp)
  802e54:	df000304 	addi	fp,sp,12
  802e58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802e5c:	e0bfff17 	ldw	r2,-4(fp)
  802e60:	10000616 	blt	r2,zero,802e7c <close+0x34>
  802e64:	e0bfff17 	ldw	r2,-4(fp)
  802e68:	10c00324 	muli	r3,r2,12
  802e6c:	00802074 	movhi	r2,129
  802e70:	10a00d04 	addi	r2,r2,-32716
  802e74:	1885883a 	add	r2,r3,r2
  802e78:	00000106 	br	802e80 <close+0x38>
  802e7c:	0005883a 	mov	r2,zero
  802e80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802e84:	e0bffd17 	ldw	r2,-12(fp)
  802e88:	10001926 	beq	r2,zero,802ef0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802e8c:	e0bffd17 	ldw	r2,-12(fp)
  802e90:	10800017 	ldw	r2,0(r2)
  802e94:	10800417 	ldw	r2,16(r2)
  802e98:	10000626 	beq	r2,zero,802eb4 <close+0x6c>
  802e9c:	e0bffd17 	ldw	r2,-12(fp)
  802ea0:	10800017 	ldw	r2,0(r2)
  802ea4:	10800417 	ldw	r2,16(r2)
  802ea8:	e13ffd17 	ldw	r4,-12(fp)
  802eac:	103ee83a 	callr	r2
  802eb0:	00000106 	br	802eb8 <close+0x70>
  802eb4:	0005883a 	mov	r2,zero
  802eb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802ebc:	e13fff17 	ldw	r4,-4(fp)
  802ec0:	08037040 	call	803704 <alt_release_fd>
    if (rval < 0)
  802ec4:	e0bffe17 	ldw	r2,-8(fp)
  802ec8:	1000070e 	bge	r2,zero,802ee8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802ecc:	0802e0c0 	call	802e0c <alt_get_errno>
  802ed0:	1007883a 	mov	r3,r2
  802ed4:	e0bffe17 	ldw	r2,-8(fp)
  802ed8:	0085c83a 	sub	r2,zero,r2
  802edc:	18800015 	stw	r2,0(r3)
      return -1;
  802ee0:	00bfffc4 	movi	r2,-1
  802ee4:	00000706 	br	802f04 <close+0xbc>
    }
    return 0;
  802ee8:	0005883a 	mov	r2,zero
  802eec:	00000506 	br	802f04 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802ef0:	0802e0c0 	call	802e0c <alt_get_errno>
  802ef4:	1007883a 	mov	r3,r2
  802ef8:	00801444 	movi	r2,81
  802efc:	18800015 	stw	r2,0(r3)
    return -1;
  802f00:	00bfffc4 	movi	r2,-1
  }
}
  802f04:	e037883a 	mov	sp,fp
  802f08:	dfc00117 	ldw	ra,4(sp)
  802f0c:	df000017 	ldw	fp,0(sp)
  802f10:	dec00204 	addi	sp,sp,8
  802f14:	f800283a 	ret

00802f18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802f18:	defffe04 	addi	sp,sp,-8
  802f1c:	df000115 	stw	fp,4(sp)
  802f20:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802f24:	e03fff15 	stw	zero,-4(fp)
  802f28:	00000506 	br	802f40 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  802f2c:	e0bfff17 	ldw	r2,-4(fp)
  802f30:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802f34:	e0bfff17 	ldw	r2,-4(fp)
  802f38:	10800804 	addi	r2,r2,32
  802f3c:	e0bfff15 	stw	r2,-4(fp)
  802f40:	e0bfff17 	ldw	r2,-4(fp)
  802f44:	10820030 	cmpltui	r2,r2,2048
  802f48:	103ff81e 	bne	r2,zero,802f2c <__alt_data_end+0xff802f2c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802f4c:	0001883a 	nop
  802f50:	e037883a 	mov	sp,fp
  802f54:	df000017 	ldw	fp,0(sp)
  802f58:	dec00104 	addi	sp,sp,4
  802f5c:	f800283a 	ret

00802f60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802f60:	defffc04 	addi	sp,sp,-16
  802f64:	df000315 	stw	fp,12(sp)
  802f68:	df000304 	addi	fp,sp,12
  802f6c:	e13ffd15 	stw	r4,-12(fp)
  802f70:	e17ffe15 	stw	r5,-8(fp)
  802f74:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802f78:	e0bfff17 	ldw	r2,-4(fp)
}
  802f7c:	e037883a 	mov	sp,fp
  802f80:	df000017 	ldw	fp,0(sp)
  802f84:	dec00104 	addi	sp,sp,4
  802f88:	f800283a 	ret

00802f8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802f8c:	defffe04 	addi	sp,sp,-8
  802f90:	dfc00115 	stw	ra,4(sp)
  802f94:	df000015 	stw	fp,0(sp)
  802f98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802f9c:	d0a00617 	ldw	r2,-32744(gp)
  802fa0:	10000326 	beq	r2,zero,802fb0 <alt_get_errno+0x24>
  802fa4:	d0a00617 	ldw	r2,-32744(gp)
  802fa8:	103ee83a 	callr	r2
  802fac:	00000106 	br	802fb4 <alt_get_errno+0x28>
  802fb0:	d0a71f04 	addi	r2,gp,-25476
}
  802fb4:	e037883a 	mov	sp,fp
  802fb8:	dfc00117 	ldw	ra,4(sp)
  802fbc:	df000017 	ldw	fp,0(sp)
  802fc0:	dec00204 	addi	sp,sp,8
  802fc4:	f800283a 	ret

00802fc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802fc8:	defffa04 	addi	sp,sp,-24
  802fcc:	dfc00515 	stw	ra,20(sp)
  802fd0:	df000415 	stw	fp,16(sp)
  802fd4:	df000404 	addi	fp,sp,16
  802fd8:	e13ffe15 	stw	r4,-8(fp)
  802fdc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802fe0:	e0bffe17 	ldw	r2,-8(fp)
  802fe4:	10000326 	beq	r2,zero,802ff4 <alt_dev_llist_insert+0x2c>
  802fe8:	e0bffe17 	ldw	r2,-8(fp)
  802fec:	10800217 	ldw	r2,8(r2)
  802ff0:	1000061e 	bne	r2,zero,80300c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  802ff4:	0802f8c0 	call	802f8c <alt_get_errno>
  802ff8:	1007883a 	mov	r3,r2
  802ffc:	00800584 	movi	r2,22
  803000:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  803004:	00bffa84 	movi	r2,-22
  803008:	00001306 	br	803058 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80300c:	e0bffe17 	ldw	r2,-8(fp)
  803010:	e0ffff17 	ldw	r3,-4(fp)
  803014:	e0fffc15 	stw	r3,-16(fp)
  803018:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80301c:	e0bffd17 	ldw	r2,-12(fp)
  803020:	e0fffc17 	ldw	r3,-16(fp)
  803024:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  803028:	e0bffc17 	ldw	r2,-16(fp)
  80302c:	10c00017 	ldw	r3,0(r2)
  803030:	e0bffd17 	ldw	r2,-12(fp)
  803034:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803038:	e0bffc17 	ldw	r2,-16(fp)
  80303c:	10800017 	ldw	r2,0(r2)
  803040:	e0fffd17 	ldw	r3,-12(fp)
  803044:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  803048:	e0bffc17 	ldw	r2,-16(fp)
  80304c:	e0fffd17 	ldw	r3,-12(fp)
  803050:	10c00015 	stw	r3,0(r2)

  return 0;  
  803054:	0005883a 	mov	r2,zero
}
  803058:	e037883a 	mov	sp,fp
  80305c:	dfc00117 	ldw	ra,4(sp)
  803060:	df000017 	ldw	fp,0(sp)
  803064:	dec00204 	addi	sp,sp,8
  803068:	f800283a 	ret

0080306c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80306c:	defffd04 	addi	sp,sp,-12
  803070:	dfc00215 	stw	ra,8(sp)
  803074:	df000115 	stw	fp,4(sp)
  803078:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80307c:	00802034 	movhi	r2,128
  803080:	109aad04 	addi	r2,r2,27316
  803084:	e0bfff15 	stw	r2,-4(fp)
  803088:	00000606 	br	8030a4 <_do_ctors+0x38>
        (*ctor) (); 
  80308c:	e0bfff17 	ldw	r2,-4(fp)
  803090:	10800017 	ldw	r2,0(r2)
  803094:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  803098:	e0bfff17 	ldw	r2,-4(fp)
  80309c:	10bfff04 	addi	r2,r2,-4
  8030a0:	e0bfff15 	stw	r2,-4(fp)
  8030a4:	e0ffff17 	ldw	r3,-4(fp)
  8030a8:	00802034 	movhi	r2,128
  8030ac:	109aae04 	addi	r2,r2,27320
  8030b0:	18bff62e 	bgeu	r3,r2,80308c <__alt_data_end+0xff80308c>
        (*ctor) (); 
}
  8030b4:	0001883a 	nop
  8030b8:	e037883a 	mov	sp,fp
  8030bc:	dfc00117 	ldw	ra,4(sp)
  8030c0:	df000017 	ldw	fp,0(sp)
  8030c4:	dec00204 	addi	sp,sp,8
  8030c8:	f800283a 	ret

008030cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8030cc:	defffd04 	addi	sp,sp,-12
  8030d0:	dfc00215 	stw	ra,8(sp)
  8030d4:	df000115 	stw	fp,4(sp)
  8030d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8030dc:	00802034 	movhi	r2,128
  8030e0:	109aad04 	addi	r2,r2,27316
  8030e4:	e0bfff15 	stw	r2,-4(fp)
  8030e8:	00000606 	br	803104 <_do_dtors+0x38>
        (*dtor) (); 
  8030ec:	e0bfff17 	ldw	r2,-4(fp)
  8030f0:	10800017 	ldw	r2,0(r2)
  8030f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8030f8:	e0bfff17 	ldw	r2,-4(fp)
  8030fc:	10bfff04 	addi	r2,r2,-4
  803100:	e0bfff15 	stw	r2,-4(fp)
  803104:	e0ffff17 	ldw	r3,-4(fp)
  803108:	00802034 	movhi	r2,128
  80310c:	109aae04 	addi	r2,r2,27320
  803110:	18bff62e 	bgeu	r3,r2,8030ec <__alt_data_end+0xff8030ec>
        (*dtor) (); 
}
  803114:	0001883a 	nop
  803118:	e037883a 	mov	sp,fp
  80311c:	dfc00117 	ldw	ra,4(sp)
  803120:	df000017 	ldw	fp,0(sp)
  803124:	dec00204 	addi	sp,sp,8
  803128:	f800283a 	ret

0080312c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80312c:	defffa04 	addi	sp,sp,-24
  803130:	dfc00515 	stw	ra,20(sp)
  803134:	df000415 	stw	fp,16(sp)
  803138:	df000404 	addi	fp,sp,16
  80313c:	e13ffe15 	stw	r4,-8(fp)
  803140:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803144:	e0bfff17 	ldw	r2,-4(fp)
  803148:	10800017 	ldw	r2,0(r2)
  80314c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803150:	e13ffe17 	ldw	r4,-8(fp)
  803154:	08042300 	call	804230 <strlen>
  803158:	10800044 	addi	r2,r2,1
  80315c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803160:	00000d06 	br	803198 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803164:	e0bffc17 	ldw	r2,-16(fp)
  803168:	10800217 	ldw	r2,8(r2)
  80316c:	e0fffd17 	ldw	r3,-12(fp)
  803170:	180d883a 	mov	r6,r3
  803174:	e17ffe17 	ldw	r5,-8(fp)
  803178:	1009883a 	mov	r4,r2
  80317c:	0803ddc0 	call	803ddc <memcmp>
  803180:	1000021e 	bne	r2,zero,80318c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803184:	e0bffc17 	ldw	r2,-16(fp)
  803188:	00000706 	br	8031a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80318c:	e0bffc17 	ldw	r2,-16(fp)
  803190:	10800017 	ldw	r2,0(r2)
  803194:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803198:	e0fffc17 	ldw	r3,-16(fp)
  80319c:	e0bfff17 	ldw	r2,-4(fp)
  8031a0:	18bff01e 	bne	r3,r2,803164 <__alt_data_end+0xff803164>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8031a4:	0005883a 	mov	r2,zero
}
  8031a8:	e037883a 	mov	sp,fp
  8031ac:	dfc00117 	ldw	ra,4(sp)
  8031b0:	df000017 	ldw	fp,0(sp)
  8031b4:	dec00204 	addi	sp,sp,8
  8031b8:	f800283a 	ret

008031bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8031bc:	defffe04 	addi	sp,sp,-8
  8031c0:	dfc00115 	stw	ra,4(sp)
  8031c4:	df000015 	stw	fp,0(sp)
  8031c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8031cc:	01440004 	movi	r5,4096
  8031d0:	0009883a 	mov	r4,zero
  8031d4:	0803c640 	call	803c64 <alt_icache_flush>
#endif
}
  8031d8:	0001883a 	nop
  8031dc:	e037883a 	mov	sp,fp
  8031e0:	dfc00117 	ldw	ra,4(sp)
  8031e4:	df000017 	ldw	fp,0(sp)
  8031e8:	dec00204 	addi	sp,sp,8
  8031ec:	f800283a 	ret

008031f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8031f0:	defff904 	addi	sp,sp,-28
  8031f4:	dfc00615 	stw	ra,24(sp)
  8031f8:	df000515 	stw	fp,20(sp)
  8031fc:	df000504 	addi	fp,sp,20
  803200:	e13ffc15 	stw	r4,-16(fp)
  803204:	e17ffd15 	stw	r5,-12(fp)
  803208:	e1bffe15 	stw	r6,-8(fp)
  80320c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  803210:	e1bfff17 	ldw	r6,-4(fp)
  803214:	e17ffe17 	ldw	r5,-8(fp)
  803218:	e13ffd17 	ldw	r4,-12(fp)
  80321c:	08035b00 	call	8035b0 <open>
  803220:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  803224:	e0bffb17 	ldw	r2,-20(fp)
  803228:	10001c16 	blt	r2,zero,80329c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80322c:	00802074 	movhi	r2,129
  803230:	10a00d04 	addi	r2,r2,-32716
  803234:	e0fffb17 	ldw	r3,-20(fp)
  803238:	18c00324 	muli	r3,r3,12
  80323c:	10c5883a 	add	r2,r2,r3
  803240:	10c00017 	ldw	r3,0(r2)
  803244:	e0bffc17 	ldw	r2,-16(fp)
  803248:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80324c:	00802074 	movhi	r2,129
  803250:	10a00d04 	addi	r2,r2,-32716
  803254:	e0fffb17 	ldw	r3,-20(fp)
  803258:	18c00324 	muli	r3,r3,12
  80325c:	10c5883a 	add	r2,r2,r3
  803260:	10800104 	addi	r2,r2,4
  803264:	10c00017 	ldw	r3,0(r2)
  803268:	e0bffc17 	ldw	r2,-16(fp)
  80326c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  803270:	00802074 	movhi	r2,129
  803274:	10a00d04 	addi	r2,r2,-32716
  803278:	e0fffb17 	ldw	r3,-20(fp)
  80327c:	18c00324 	muli	r3,r3,12
  803280:	10c5883a 	add	r2,r2,r3
  803284:	10800204 	addi	r2,r2,8
  803288:	10c00017 	ldw	r3,0(r2)
  80328c:	e0bffc17 	ldw	r2,-16(fp)
  803290:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  803294:	e13ffb17 	ldw	r4,-20(fp)
  803298:	08037040 	call	803704 <alt_release_fd>
  }
} 
  80329c:	0001883a 	nop
  8032a0:	e037883a 	mov	sp,fp
  8032a4:	dfc00117 	ldw	ra,4(sp)
  8032a8:	df000017 	ldw	fp,0(sp)
  8032ac:	dec00204 	addi	sp,sp,8
  8032b0:	f800283a 	ret

008032b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8032b4:	defffb04 	addi	sp,sp,-20
  8032b8:	dfc00415 	stw	ra,16(sp)
  8032bc:	df000315 	stw	fp,12(sp)
  8032c0:	df000304 	addi	fp,sp,12
  8032c4:	e13ffd15 	stw	r4,-12(fp)
  8032c8:	e17ffe15 	stw	r5,-8(fp)
  8032cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8032d0:	01c07fc4 	movi	r7,511
  8032d4:	01800044 	movi	r6,1
  8032d8:	e17ffd17 	ldw	r5,-12(fp)
  8032dc:	01002074 	movhi	r4,129
  8032e0:	21201004 	addi	r4,r4,-32704
  8032e4:	08031f00 	call	8031f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8032e8:	01c07fc4 	movi	r7,511
  8032ec:	000d883a 	mov	r6,zero
  8032f0:	e17ffe17 	ldw	r5,-8(fp)
  8032f4:	01002074 	movhi	r4,129
  8032f8:	21200d04 	addi	r4,r4,-32716
  8032fc:	08031f00 	call	8031f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  803300:	01c07fc4 	movi	r7,511
  803304:	01800044 	movi	r6,1
  803308:	e17fff17 	ldw	r5,-4(fp)
  80330c:	01002074 	movhi	r4,129
  803310:	21201304 	addi	r4,r4,-32692
  803314:	08031f00 	call	8031f0 <alt_open_fd>
}  
  803318:	0001883a 	nop
  80331c:	e037883a 	mov	sp,fp
  803320:	dfc00117 	ldw	ra,4(sp)
  803324:	df000017 	ldw	fp,0(sp)
  803328:	dec00204 	addi	sp,sp,8
  80332c:	f800283a 	ret

00803330 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  803330:	defff004 	addi	sp,sp,-64
  803334:	df000f15 	stw	fp,60(sp)
  803338:	df000f04 	addi	fp,sp,60
  80333c:	e13ffd15 	stw	r4,-12(fp)
  803340:	e17ffe15 	stw	r5,-8(fp)
  803344:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  803348:	00bffa84 	movi	r2,-22
  80334c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803350:	e0bffd17 	ldw	r2,-12(fp)
  803354:	10800828 	cmpgeui	r2,r2,32
  803358:	1000501e 	bne	r2,zero,80349c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80335c:	0005303a 	rdctl	r2,status
  803360:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803364:	e0fff617 	ldw	r3,-40(fp)
  803368:	00bfff84 	movi	r2,-2
  80336c:	1884703a 	and	r2,r3,r2
  803370:	1001703a 	wrctl	status,r2
  
  return context;
  803374:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  803378:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80337c:	00802074 	movhi	r2,129
  803380:	10a9a504 	addi	r2,r2,-22892
  803384:	e0fffd17 	ldw	r3,-12(fp)
  803388:	180690fa 	slli	r3,r3,3
  80338c:	10c5883a 	add	r2,r2,r3
  803390:	e0ffff17 	ldw	r3,-4(fp)
  803394:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  803398:	00802074 	movhi	r2,129
  80339c:	10a9a504 	addi	r2,r2,-22892
  8033a0:	e0fffd17 	ldw	r3,-12(fp)
  8033a4:	180690fa 	slli	r3,r3,3
  8033a8:	10c5883a 	add	r2,r2,r3
  8033ac:	10800104 	addi	r2,r2,4
  8033b0:	e0fffe17 	ldw	r3,-8(fp)
  8033b4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8033b8:	e0bfff17 	ldw	r2,-4(fp)
  8033bc:	10001926 	beq	r2,zero,803424 <alt_irq_register+0xf4>
  8033c0:	e0bffd17 	ldw	r2,-12(fp)
  8033c4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8033c8:	0005303a 	rdctl	r2,status
  8033cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8033d0:	e0fff717 	ldw	r3,-36(fp)
  8033d4:	00bfff84 	movi	r2,-2
  8033d8:	1884703a 	and	r2,r3,r2
  8033dc:	1001703a 	wrctl	status,r2
  
  return context;
  8033e0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8033e4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8033e8:	00c00044 	movi	r3,1
  8033ec:	e0bff217 	ldw	r2,-56(fp)
  8033f0:	1884983a 	sll	r2,r3,r2
  8033f4:	1007883a 	mov	r3,r2
  8033f8:	d0a71b17 	ldw	r2,-25492(gp)
  8033fc:	1884b03a 	or	r2,r3,r2
  803400:	d0a71b15 	stw	r2,-25492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803404:	d0a71b17 	ldw	r2,-25492(gp)
  803408:	100170fa 	wrctl	ienable,r2
  80340c:	e0bff817 	ldw	r2,-32(fp)
  803410:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803414:	e0bff917 	ldw	r2,-28(fp)
  803418:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80341c:	0005883a 	mov	r2,zero
  803420:	00001906 	br	803488 <alt_irq_register+0x158>
  803424:	e0bffd17 	ldw	r2,-12(fp)
  803428:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80342c:	0005303a 	rdctl	r2,status
  803430:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803434:	e0fffa17 	ldw	r3,-24(fp)
  803438:	00bfff84 	movi	r2,-2
  80343c:	1884703a 	and	r2,r3,r2
  803440:	1001703a 	wrctl	status,r2
  
  return context;
  803444:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803448:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80344c:	00c00044 	movi	r3,1
  803450:	e0bff417 	ldw	r2,-48(fp)
  803454:	1884983a 	sll	r2,r3,r2
  803458:	0084303a 	nor	r2,zero,r2
  80345c:	1007883a 	mov	r3,r2
  803460:	d0a71b17 	ldw	r2,-25492(gp)
  803464:	1884703a 	and	r2,r3,r2
  803468:	d0a71b15 	stw	r2,-25492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80346c:	d0a71b17 	ldw	r2,-25492(gp)
  803470:	100170fa 	wrctl	ienable,r2
  803474:	e0bffb17 	ldw	r2,-20(fp)
  803478:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80347c:	e0bffc17 	ldw	r2,-16(fp)
  803480:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803484:	0005883a 	mov	r2,zero
  803488:	e0bff115 	stw	r2,-60(fp)
  80348c:	e0bff317 	ldw	r2,-52(fp)
  803490:	e0bff515 	stw	r2,-44(fp)
  803494:	e0bff517 	ldw	r2,-44(fp)
  803498:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80349c:	e0bff117 	ldw	r2,-60(fp)
}
  8034a0:	e037883a 	mov	sp,fp
  8034a4:	df000017 	ldw	fp,0(sp)
  8034a8:	dec00104 	addi	sp,sp,4
  8034ac:	f800283a 	ret

008034b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8034b0:	defffe04 	addi	sp,sp,-8
  8034b4:	dfc00115 	stw	ra,4(sp)
  8034b8:	df000015 	stw	fp,0(sp)
  8034bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8034c0:	d0a00617 	ldw	r2,-32744(gp)
  8034c4:	10000326 	beq	r2,zero,8034d4 <alt_get_errno+0x24>
  8034c8:	d0a00617 	ldw	r2,-32744(gp)
  8034cc:	103ee83a 	callr	r2
  8034d0:	00000106 	br	8034d8 <alt_get_errno+0x28>
  8034d4:	d0a71f04 	addi	r2,gp,-25476
}
  8034d8:	e037883a 	mov	sp,fp
  8034dc:	dfc00117 	ldw	ra,4(sp)
  8034e0:	df000017 	ldw	fp,0(sp)
  8034e4:	dec00204 	addi	sp,sp,8
  8034e8:	f800283a 	ret

008034ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8034ec:	defffd04 	addi	sp,sp,-12
  8034f0:	df000215 	stw	fp,8(sp)
  8034f4:	df000204 	addi	fp,sp,8
  8034f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8034fc:	e0bfff17 	ldw	r2,-4(fp)
  803500:	10800217 	ldw	r2,8(r2)
  803504:	10d00034 	orhi	r3,r2,16384
  803508:	e0bfff17 	ldw	r2,-4(fp)
  80350c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803510:	e03ffe15 	stw	zero,-8(fp)
  803514:	00001d06 	br	80358c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803518:	00802074 	movhi	r2,129
  80351c:	10a00d04 	addi	r2,r2,-32716
  803520:	e0fffe17 	ldw	r3,-8(fp)
  803524:	18c00324 	muli	r3,r3,12
  803528:	10c5883a 	add	r2,r2,r3
  80352c:	10c00017 	ldw	r3,0(r2)
  803530:	e0bfff17 	ldw	r2,-4(fp)
  803534:	10800017 	ldw	r2,0(r2)
  803538:	1880111e 	bne	r3,r2,803580 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80353c:	00802074 	movhi	r2,129
  803540:	10a00d04 	addi	r2,r2,-32716
  803544:	e0fffe17 	ldw	r3,-8(fp)
  803548:	18c00324 	muli	r3,r3,12
  80354c:	10c5883a 	add	r2,r2,r3
  803550:	10800204 	addi	r2,r2,8
  803554:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803558:	1000090e 	bge	r2,zero,803580 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80355c:	e0bffe17 	ldw	r2,-8(fp)
  803560:	10c00324 	muli	r3,r2,12
  803564:	00802074 	movhi	r2,129
  803568:	10a00d04 	addi	r2,r2,-32716
  80356c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803570:	e0bfff17 	ldw	r2,-4(fp)
  803574:	18800226 	beq	r3,r2,803580 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  803578:	00bffcc4 	movi	r2,-13
  80357c:	00000806 	br	8035a0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803580:	e0bffe17 	ldw	r2,-8(fp)
  803584:	10800044 	addi	r2,r2,1
  803588:	e0bffe15 	stw	r2,-8(fp)
  80358c:	d0a00517 	ldw	r2,-32748(gp)
  803590:	1007883a 	mov	r3,r2
  803594:	e0bffe17 	ldw	r2,-8(fp)
  803598:	18bfdf2e 	bgeu	r3,r2,803518 <__alt_data_end+0xff803518>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80359c:	0005883a 	mov	r2,zero
}
  8035a0:	e037883a 	mov	sp,fp
  8035a4:	df000017 	ldw	fp,0(sp)
  8035a8:	dec00104 	addi	sp,sp,4
  8035ac:	f800283a 	ret

008035b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8035b0:	defff604 	addi	sp,sp,-40
  8035b4:	dfc00915 	stw	ra,36(sp)
  8035b8:	df000815 	stw	fp,32(sp)
  8035bc:	df000804 	addi	fp,sp,32
  8035c0:	e13ffd15 	stw	r4,-12(fp)
  8035c4:	e17ffe15 	stw	r5,-8(fp)
  8035c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8035cc:	00bfffc4 	movi	r2,-1
  8035d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8035d4:	00bffb44 	movi	r2,-19
  8035d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8035dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8035e0:	d1600304 	addi	r5,gp,-32756
  8035e4:	e13ffd17 	ldw	r4,-12(fp)
  8035e8:	080312c0 	call	80312c <alt_find_dev>
  8035ec:	e0bff815 	stw	r2,-32(fp)
  8035f0:	e0bff817 	ldw	r2,-32(fp)
  8035f4:	1000051e 	bne	r2,zero,80360c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8035f8:	e13ffd17 	ldw	r4,-12(fp)
  8035fc:	0803ab80 	call	803ab8 <alt_find_file>
  803600:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  803604:	00800044 	movi	r2,1
  803608:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80360c:	e0bff817 	ldw	r2,-32(fp)
  803610:	10002926 	beq	r2,zero,8036b8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803614:	e13ff817 	ldw	r4,-32(fp)
  803618:	0803bc00 	call	803bc0 <alt_get_fd>
  80361c:	e0bff915 	stw	r2,-28(fp)
  803620:	e0bff917 	ldw	r2,-28(fp)
  803624:	1000030e 	bge	r2,zero,803634 <open+0x84>
    {
      status = index;
  803628:	e0bff917 	ldw	r2,-28(fp)
  80362c:	e0bffa15 	stw	r2,-24(fp)
  803630:	00002306 	br	8036c0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  803634:	e0bff917 	ldw	r2,-28(fp)
  803638:	10c00324 	muli	r3,r2,12
  80363c:	00802074 	movhi	r2,129
  803640:	10a00d04 	addi	r2,r2,-32716
  803644:	1885883a 	add	r2,r3,r2
  803648:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80364c:	e0fffe17 	ldw	r3,-8(fp)
  803650:	00900034 	movhi	r2,16384
  803654:	10bfffc4 	addi	r2,r2,-1
  803658:	1886703a 	and	r3,r3,r2
  80365c:	e0bffc17 	ldw	r2,-16(fp)
  803660:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  803664:	e0bffb17 	ldw	r2,-20(fp)
  803668:	1000051e 	bne	r2,zero,803680 <open+0xd0>
  80366c:	e13ffc17 	ldw	r4,-16(fp)
  803670:	08034ec0 	call	8034ec <alt_file_locked>
  803674:	e0bffa15 	stw	r2,-24(fp)
  803678:	e0bffa17 	ldw	r2,-24(fp)
  80367c:	10001016 	blt	r2,zero,8036c0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803680:	e0bff817 	ldw	r2,-32(fp)
  803684:	10800317 	ldw	r2,12(r2)
  803688:	10000826 	beq	r2,zero,8036ac <open+0xfc>
  80368c:	e0bff817 	ldw	r2,-32(fp)
  803690:	10800317 	ldw	r2,12(r2)
  803694:	e1ffff17 	ldw	r7,-4(fp)
  803698:	e1bffe17 	ldw	r6,-8(fp)
  80369c:	e17ffd17 	ldw	r5,-12(fp)
  8036a0:	e13ffc17 	ldw	r4,-16(fp)
  8036a4:	103ee83a 	callr	r2
  8036a8:	00000106 	br	8036b0 <open+0x100>
  8036ac:	0005883a 	mov	r2,zero
  8036b0:	e0bffa15 	stw	r2,-24(fp)
  8036b4:	00000206 	br	8036c0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8036b8:	00bffb44 	movi	r2,-19
  8036bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8036c0:	e0bffa17 	ldw	r2,-24(fp)
  8036c4:	1000090e 	bge	r2,zero,8036ec <open+0x13c>
  {
    alt_release_fd (index);  
  8036c8:	e13ff917 	ldw	r4,-28(fp)
  8036cc:	08037040 	call	803704 <alt_release_fd>
    ALT_ERRNO = -status;
  8036d0:	08034b00 	call	8034b0 <alt_get_errno>
  8036d4:	1007883a 	mov	r3,r2
  8036d8:	e0bffa17 	ldw	r2,-24(fp)
  8036dc:	0085c83a 	sub	r2,zero,r2
  8036e0:	18800015 	stw	r2,0(r3)
    return -1;
  8036e4:	00bfffc4 	movi	r2,-1
  8036e8:	00000106 	br	8036f0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8036ec:	e0bff917 	ldw	r2,-28(fp)
}
  8036f0:	e037883a 	mov	sp,fp
  8036f4:	dfc00117 	ldw	ra,4(sp)
  8036f8:	df000017 	ldw	fp,0(sp)
  8036fc:	dec00204 	addi	sp,sp,8
  803700:	f800283a 	ret

00803704 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803704:	defffe04 	addi	sp,sp,-8
  803708:	df000115 	stw	fp,4(sp)
  80370c:	df000104 	addi	fp,sp,4
  803710:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803714:	e0bfff17 	ldw	r2,-4(fp)
  803718:	108000d0 	cmplti	r2,r2,3
  80371c:	10000d1e 	bne	r2,zero,803754 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803720:	00802074 	movhi	r2,129
  803724:	10a00d04 	addi	r2,r2,-32716
  803728:	e0ffff17 	ldw	r3,-4(fp)
  80372c:	18c00324 	muli	r3,r3,12
  803730:	10c5883a 	add	r2,r2,r3
  803734:	10800204 	addi	r2,r2,8
  803738:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80373c:	00802074 	movhi	r2,129
  803740:	10a00d04 	addi	r2,r2,-32716
  803744:	e0ffff17 	ldw	r3,-4(fp)
  803748:	18c00324 	muli	r3,r3,12
  80374c:	10c5883a 	add	r2,r2,r3
  803750:	10000015 	stw	zero,0(r2)
  }
}
  803754:	0001883a 	nop
  803758:	e037883a 	mov	sp,fp
  80375c:	df000017 	ldw	fp,0(sp)
  803760:	dec00104 	addi	sp,sp,4
  803764:	f800283a 	ret

00803768 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  803768:	defffa04 	addi	sp,sp,-24
  80376c:	df000515 	stw	fp,20(sp)
  803770:	df000504 	addi	fp,sp,20
  803774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803778:	0005303a 	rdctl	r2,status
  80377c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803780:	e0fffc17 	ldw	r3,-16(fp)
  803784:	00bfff84 	movi	r2,-2
  803788:	1884703a 	and	r2,r3,r2
  80378c:	1001703a 	wrctl	status,r2
  
  return context;
  803790:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  803794:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  803798:	e0bfff17 	ldw	r2,-4(fp)
  80379c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8037a0:	e0bffd17 	ldw	r2,-12(fp)
  8037a4:	10800017 	ldw	r2,0(r2)
  8037a8:	e0fffd17 	ldw	r3,-12(fp)
  8037ac:	18c00117 	ldw	r3,4(r3)
  8037b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8037b4:	e0bffd17 	ldw	r2,-12(fp)
  8037b8:	10800117 	ldw	r2,4(r2)
  8037bc:	e0fffd17 	ldw	r3,-12(fp)
  8037c0:	18c00017 	ldw	r3,0(r3)
  8037c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8037c8:	e0bffd17 	ldw	r2,-12(fp)
  8037cc:	e0fffd17 	ldw	r3,-12(fp)
  8037d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8037d4:	e0bffd17 	ldw	r2,-12(fp)
  8037d8:	e0fffd17 	ldw	r3,-12(fp)
  8037dc:	10c00015 	stw	r3,0(r2)
  8037e0:	e0bffb17 	ldw	r2,-20(fp)
  8037e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8037e8:	e0bffe17 	ldw	r2,-8(fp)
  8037ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8037f0:	0001883a 	nop
  8037f4:	e037883a 	mov	sp,fp
  8037f8:	df000017 	ldw	fp,0(sp)
  8037fc:	dec00104 	addi	sp,sp,4
  803800:	f800283a 	ret

00803804 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803804:	defffb04 	addi	sp,sp,-20
  803808:	dfc00415 	stw	ra,16(sp)
  80380c:	df000315 	stw	fp,12(sp)
  803810:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803814:	d0a00817 	ldw	r2,-32736(gp)
  803818:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80381c:	d0a71d17 	ldw	r2,-25484(gp)
  803820:	10800044 	addi	r2,r2,1
  803824:	d0a71d15 	stw	r2,-25484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803828:	00002e06 	br	8038e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80382c:	e0bffd17 	ldw	r2,-12(fp)
  803830:	10800017 	ldw	r2,0(r2)
  803834:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803838:	e0bffd17 	ldw	r2,-12(fp)
  80383c:	10800403 	ldbu	r2,16(r2)
  803840:	10803fcc 	andi	r2,r2,255
  803844:	10000426 	beq	r2,zero,803858 <alt_tick+0x54>
  803848:	d0a71d17 	ldw	r2,-25484(gp)
  80384c:	1000021e 	bne	r2,zero,803858 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  803850:	e0bffd17 	ldw	r2,-12(fp)
  803854:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803858:	e0bffd17 	ldw	r2,-12(fp)
  80385c:	10800217 	ldw	r2,8(r2)
  803860:	d0e71d17 	ldw	r3,-25484(gp)
  803864:	18801d36 	bltu	r3,r2,8038dc <alt_tick+0xd8>
  803868:	e0bffd17 	ldw	r2,-12(fp)
  80386c:	10800403 	ldbu	r2,16(r2)
  803870:	10803fcc 	andi	r2,r2,255
  803874:	1000191e 	bne	r2,zero,8038dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  803878:	e0bffd17 	ldw	r2,-12(fp)
  80387c:	10800317 	ldw	r2,12(r2)
  803880:	e0fffd17 	ldw	r3,-12(fp)
  803884:	18c00517 	ldw	r3,20(r3)
  803888:	1809883a 	mov	r4,r3
  80388c:	103ee83a 	callr	r2
  803890:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803894:	e0bfff17 	ldw	r2,-4(fp)
  803898:	1000031e 	bne	r2,zero,8038a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80389c:	e13ffd17 	ldw	r4,-12(fp)
  8038a0:	08037680 	call	803768 <alt_alarm_stop>
  8038a4:	00000d06 	br	8038dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8038a8:	e0bffd17 	ldw	r2,-12(fp)
  8038ac:	10c00217 	ldw	r3,8(r2)
  8038b0:	e0bfff17 	ldw	r2,-4(fp)
  8038b4:	1887883a 	add	r3,r3,r2
  8038b8:	e0bffd17 	ldw	r2,-12(fp)
  8038bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8038c0:	e0bffd17 	ldw	r2,-12(fp)
  8038c4:	10c00217 	ldw	r3,8(r2)
  8038c8:	d0a71d17 	ldw	r2,-25484(gp)
  8038cc:	1880032e 	bgeu	r3,r2,8038dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8038d0:	e0bffd17 	ldw	r2,-12(fp)
  8038d4:	00c00044 	movi	r3,1
  8038d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8038dc:	e0bffe17 	ldw	r2,-8(fp)
  8038e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8038e4:	e0fffd17 	ldw	r3,-12(fp)
  8038e8:	d0a00804 	addi	r2,gp,-32736
  8038ec:	18bfcf1e 	bne	r3,r2,80382c <__alt_data_end+0xff80382c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8038f0:	0001883a 	nop
}
  8038f4:	0001883a 	nop
  8038f8:	e037883a 	mov	sp,fp
  8038fc:	dfc00117 	ldw	ra,4(sp)
  803900:	df000017 	ldw	fp,0(sp)
  803904:	dec00204 	addi	sp,sp,8
  803908:	f800283a 	ret

0080390c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80390c:	defffd04 	addi	sp,sp,-12
  803910:	dfc00215 	stw	ra,8(sp)
  803914:	df000115 	stw	fp,4(sp)
  803918:	df000104 	addi	fp,sp,4
  80391c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803920:	e13fff17 	ldw	r4,-4(fp)
  803924:	08039600 	call	803960 <alt_busy_sleep>
}
  803928:	e037883a 	mov	sp,fp
  80392c:	dfc00117 	ldw	ra,4(sp)
  803930:	df000017 	ldw	fp,0(sp)
  803934:	dec00204 	addi	sp,sp,8
  803938:	f800283a 	ret

0080393c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80393c:	deffff04 	addi	sp,sp,-4
  803940:	df000015 	stw	fp,0(sp)
  803944:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803948:	000170fa 	wrctl	ienable,zero
}
  80394c:	0001883a 	nop
  803950:	e037883a 	mov	sp,fp
  803954:	df000017 	ldw	fp,0(sp)
  803958:	dec00104 	addi	sp,sp,4
  80395c:	f800283a 	ret

00803960 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  803960:	defffa04 	addi	sp,sp,-24
  803964:	dfc00515 	stw	ra,20(sp)
  803968:	df000415 	stw	fp,16(sp)
  80396c:	df000404 	addi	fp,sp,16
  803970:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  803974:	008000c4 	movi	r2,3
  803978:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80397c:	e0fffd17 	ldw	r3,-12(fp)
  803980:	008003f4 	movhi	r2,15
  803984:	10909004 	addi	r2,r2,16960
  803988:	1885383a 	mul	r2,r3,r2
  80398c:	100b883a 	mov	r5,r2
  803990:	0100bef4 	movhi	r4,763
  803994:	213c2004 	addi	r4,r4,-3968
  803998:	08063880 	call	806388 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80399c:	100b883a 	mov	r5,r2
  8039a0:	01200034 	movhi	r4,32768
  8039a4:	213fffc4 	addi	r4,r4,-1
  8039a8:	08063880 	call	806388 <__udivsi3>
  8039ac:	100b883a 	mov	r5,r2
  8039b0:	e13fff17 	ldw	r4,-4(fp)
  8039b4:	08063880 	call	806388 <__udivsi3>
  8039b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8039bc:	e0bffe17 	ldw	r2,-8(fp)
  8039c0:	10002a26 	beq	r2,zero,803a6c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8039c4:	e03ffc15 	stw	zero,-16(fp)
  8039c8:	00001706 	br	803a28 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8039cc:	00a00034 	movhi	r2,32768
  8039d0:	10bfffc4 	addi	r2,r2,-1
  8039d4:	10bfffc4 	addi	r2,r2,-1
  8039d8:	103ffe1e 	bne	r2,zero,8039d4 <__alt_data_end+0xff8039d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8039dc:	e0fffd17 	ldw	r3,-12(fp)
  8039e0:	008003f4 	movhi	r2,15
  8039e4:	10909004 	addi	r2,r2,16960
  8039e8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8039ec:	100b883a 	mov	r5,r2
  8039f0:	0100bef4 	movhi	r4,763
  8039f4:	213c2004 	addi	r4,r4,-3968
  8039f8:	08063880 	call	806388 <__udivsi3>
  8039fc:	100b883a 	mov	r5,r2
  803a00:	01200034 	movhi	r4,32768
  803a04:	213fffc4 	addi	r4,r4,-1
  803a08:	08063880 	call	806388 <__udivsi3>
  803a0c:	1007883a 	mov	r3,r2
  803a10:	e0bfff17 	ldw	r2,-4(fp)
  803a14:	10c5c83a 	sub	r2,r2,r3
  803a18:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803a1c:	e0bffc17 	ldw	r2,-16(fp)
  803a20:	10800044 	addi	r2,r2,1
  803a24:	e0bffc15 	stw	r2,-16(fp)
  803a28:	e0fffc17 	ldw	r3,-16(fp)
  803a2c:	e0bffe17 	ldw	r2,-8(fp)
  803a30:	18bfe616 	blt	r3,r2,8039cc <__alt_data_end+0xff8039cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803a34:	e0fffd17 	ldw	r3,-12(fp)
  803a38:	008003f4 	movhi	r2,15
  803a3c:	10909004 	addi	r2,r2,16960
  803a40:	1885383a 	mul	r2,r3,r2
  803a44:	100b883a 	mov	r5,r2
  803a48:	0100bef4 	movhi	r4,763
  803a4c:	213c2004 	addi	r4,r4,-3968
  803a50:	08063880 	call	806388 <__udivsi3>
  803a54:	1007883a 	mov	r3,r2
  803a58:	e0bfff17 	ldw	r2,-4(fp)
  803a5c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803a60:	10bfffc4 	addi	r2,r2,-1
  803a64:	103ffe1e 	bne	r2,zero,803a60 <__alt_data_end+0xff803a60>
  803a68:	00000d06 	br	803aa0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803a6c:	e0fffd17 	ldw	r3,-12(fp)
  803a70:	008003f4 	movhi	r2,15
  803a74:	10909004 	addi	r2,r2,16960
  803a78:	1885383a 	mul	r2,r3,r2
  803a7c:	100b883a 	mov	r5,r2
  803a80:	0100bef4 	movhi	r4,763
  803a84:	213c2004 	addi	r4,r4,-3968
  803a88:	08063880 	call	806388 <__udivsi3>
  803a8c:	1007883a 	mov	r3,r2
  803a90:	e0bfff17 	ldw	r2,-4(fp)
  803a94:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803a98:	10bfffc4 	addi	r2,r2,-1
  803a9c:	00bffe16 	blt	zero,r2,803a98 <__alt_data_end+0xff803a98>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  803aa0:	0005883a 	mov	r2,zero
}
  803aa4:	e037883a 	mov	sp,fp
  803aa8:	dfc00117 	ldw	ra,4(sp)
  803aac:	df000017 	ldw	fp,0(sp)
  803ab0:	dec00204 	addi	sp,sp,8
  803ab4:	f800283a 	ret

00803ab8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803ab8:	defffb04 	addi	sp,sp,-20
  803abc:	dfc00415 	stw	ra,16(sp)
  803ac0:	df000315 	stw	fp,12(sp)
  803ac4:	df000304 	addi	fp,sp,12
  803ac8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803acc:	d0a00117 	ldw	r2,-32764(gp)
  803ad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803ad4:	00003106 	br	803b9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  803ad8:	e0bffd17 	ldw	r2,-12(fp)
  803adc:	10800217 	ldw	r2,8(r2)
  803ae0:	1009883a 	mov	r4,r2
  803ae4:	08042300 	call	804230 <strlen>
  803ae8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  803aec:	e0bffd17 	ldw	r2,-12(fp)
  803af0:	10c00217 	ldw	r3,8(r2)
  803af4:	e0bffe17 	ldw	r2,-8(fp)
  803af8:	10bfffc4 	addi	r2,r2,-1
  803afc:	1885883a 	add	r2,r3,r2
  803b00:	10800003 	ldbu	r2,0(r2)
  803b04:	10803fcc 	andi	r2,r2,255
  803b08:	1080201c 	xori	r2,r2,128
  803b0c:	10bfe004 	addi	r2,r2,-128
  803b10:	10800bd8 	cmpnei	r2,r2,47
  803b14:	1000031e 	bne	r2,zero,803b24 <alt_find_file+0x6c>
    {
      len -= 1;
  803b18:	e0bffe17 	ldw	r2,-8(fp)
  803b1c:	10bfffc4 	addi	r2,r2,-1
  803b20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803b24:	e0bffe17 	ldw	r2,-8(fp)
  803b28:	e0ffff17 	ldw	r3,-4(fp)
  803b2c:	1885883a 	add	r2,r3,r2
  803b30:	10800003 	ldbu	r2,0(r2)
  803b34:	10803fcc 	andi	r2,r2,255
  803b38:	1080201c 	xori	r2,r2,128
  803b3c:	10bfe004 	addi	r2,r2,-128
  803b40:	10800be0 	cmpeqi	r2,r2,47
  803b44:	1000081e 	bne	r2,zero,803b68 <alt_find_file+0xb0>
  803b48:	e0bffe17 	ldw	r2,-8(fp)
  803b4c:	e0ffff17 	ldw	r3,-4(fp)
  803b50:	1885883a 	add	r2,r3,r2
  803b54:	10800003 	ldbu	r2,0(r2)
  803b58:	10803fcc 	andi	r2,r2,255
  803b5c:	1080201c 	xori	r2,r2,128
  803b60:	10bfe004 	addi	r2,r2,-128
  803b64:	10000a1e 	bne	r2,zero,803b90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  803b68:	e0bffd17 	ldw	r2,-12(fp)
  803b6c:	10800217 	ldw	r2,8(r2)
  803b70:	e0fffe17 	ldw	r3,-8(fp)
  803b74:	180d883a 	mov	r6,r3
  803b78:	e17fff17 	ldw	r5,-4(fp)
  803b7c:	1009883a 	mov	r4,r2
  803b80:	0803ddc0 	call	803ddc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803b84:	1000021e 	bne	r2,zero,803b90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803b88:	e0bffd17 	ldw	r2,-12(fp)
  803b8c:	00000706 	br	803bac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  803b90:	e0bffd17 	ldw	r2,-12(fp)
  803b94:	10800017 	ldw	r2,0(r2)
  803b98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803b9c:	e0fffd17 	ldw	r3,-12(fp)
  803ba0:	d0a00104 	addi	r2,gp,-32764
  803ba4:	18bfcc1e 	bne	r3,r2,803ad8 <__alt_data_end+0xff803ad8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  803ba8:	0005883a 	mov	r2,zero
}
  803bac:	e037883a 	mov	sp,fp
  803bb0:	dfc00117 	ldw	ra,4(sp)
  803bb4:	df000017 	ldw	fp,0(sp)
  803bb8:	dec00204 	addi	sp,sp,8
  803bbc:	f800283a 	ret

00803bc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803bc0:	defffc04 	addi	sp,sp,-16
  803bc4:	df000315 	stw	fp,12(sp)
  803bc8:	df000304 	addi	fp,sp,12
  803bcc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  803bd0:	00bffa04 	movi	r2,-24
  803bd4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803bd8:	e03ffd15 	stw	zero,-12(fp)
  803bdc:	00001906 	br	803c44 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  803be0:	00802074 	movhi	r2,129
  803be4:	10a00d04 	addi	r2,r2,-32716
  803be8:	e0fffd17 	ldw	r3,-12(fp)
  803bec:	18c00324 	muli	r3,r3,12
  803bf0:	10c5883a 	add	r2,r2,r3
  803bf4:	10800017 	ldw	r2,0(r2)
  803bf8:	10000f1e 	bne	r2,zero,803c38 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  803bfc:	00802074 	movhi	r2,129
  803c00:	10a00d04 	addi	r2,r2,-32716
  803c04:	e0fffd17 	ldw	r3,-12(fp)
  803c08:	18c00324 	muli	r3,r3,12
  803c0c:	10c5883a 	add	r2,r2,r3
  803c10:	e0ffff17 	ldw	r3,-4(fp)
  803c14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  803c18:	d0e00517 	ldw	r3,-32748(gp)
  803c1c:	e0bffd17 	ldw	r2,-12(fp)
  803c20:	1880020e 	bge	r3,r2,803c2c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  803c24:	e0bffd17 	ldw	r2,-12(fp)
  803c28:	d0a00515 	stw	r2,-32748(gp)
      }
      rc = i;
  803c2c:	e0bffd17 	ldw	r2,-12(fp)
  803c30:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  803c34:	00000606 	br	803c50 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803c38:	e0bffd17 	ldw	r2,-12(fp)
  803c3c:	10800044 	addi	r2,r2,1
  803c40:	e0bffd15 	stw	r2,-12(fp)
  803c44:	e0bffd17 	ldw	r2,-12(fp)
  803c48:	10800810 	cmplti	r2,r2,32
  803c4c:	103fe41e 	bne	r2,zero,803be0 <__alt_data_end+0xff803be0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803c50:	e0bffe17 	ldw	r2,-8(fp)
}
  803c54:	e037883a 	mov	sp,fp
  803c58:	df000017 	ldw	fp,0(sp)
  803c5c:	dec00104 	addi	sp,sp,4
  803c60:	f800283a 	ret

00803c64 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  803c64:	defffb04 	addi	sp,sp,-20
  803c68:	df000415 	stw	fp,16(sp)
  803c6c:	df000404 	addi	fp,sp,16
  803c70:	e13ffe15 	stw	r4,-8(fp)
  803c74:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  803c78:	e0bfff17 	ldw	r2,-4(fp)
  803c7c:	10840070 	cmpltui	r2,r2,4097
  803c80:	1000021e 	bne	r2,zero,803c8c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  803c84:	00840004 	movi	r2,4096
  803c88:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  803c8c:	e0fffe17 	ldw	r3,-8(fp)
  803c90:	e0bfff17 	ldw	r2,-4(fp)
  803c94:	1885883a 	add	r2,r3,r2
  803c98:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803c9c:	e0bffe17 	ldw	r2,-8(fp)
  803ca0:	e0bffc15 	stw	r2,-16(fp)
  803ca4:	00000506 	br	803cbc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  803ca8:	e0bffc17 	ldw	r2,-16(fp)
  803cac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803cb0:	e0bffc17 	ldw	r2,-16(fp)
  803cb4:	10800804 	addi	r2,r2,32
  803cb8:	e0bffc15 	stw	r2,-16(fp)
  803cbc:	e0fffc17 	ldw	r3,-16(fp)
  803cc0:	e0bffd17 	ldw	r2,-12(fp)
  803cc4:	18bff836 	bltu	r3,r2,803ca8 <__alt_data_end+0xff803ca8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  803cc8:	e0bffe17 	ldw	r2,-8(fp)
  803ccc:	108007cc 	andi	r2,r2,31
  803cd0:	10000226 	beq	r2,zero,803cdc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  803cd4:	e0bffc17 	ldw	r2,-16(fp)
  803cd8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  803cdc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  803ce0:	0001883a 	nop
  803ce4:	e037883a 	mov	sp,fp
  803ce8:	df000017 	ldw	fp,0(sp)
  803cec:	dec00104 	addi	sp,sp,4
  803cf0:	f800283a 	ret

00803cf4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  803cf4:	defffe04 	addi	sp,sp,-8
  803cf8:	df000115 	stw	fp,4(sp)
  803cfc:	df000104 	addi	fp,sp,4
  803d00:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  803d04:	e0bfff17 	ldw	r2,-4(fp)
  803d08:	10bffe84 	addi	r2,r2,-6
  803d0c:	10c00428 	cmpgeui	r3,r2,16
  803d10:	18001a1e 	bne	r3,zero,803d7c <alt_exception_cause_generated_bad_addr+0x88>
  803d14:	100690ba 	slli	r3,r2,2
  803d18:	00802034 	movhi	r2,128
  803d1c:	108f4b04 	addi	r2,r2,15660
  803d20:	1885883a 	add	r2,r3,r2
  803d24:	10800017 	ldw	r2,0(r2)
  803d28:	1000683a 	jmp	r2
  803d2c:	00803d6c 	andhi	r2,zero,245
  803d30:	00803d6c 	andhi	r2,zero,245
  803d34:	00803d7c 	xorhi	r2,zero,245
  803d38:	00803d7c 	xorhi	r2,zero,245
  803d3c:	00803d7c 	xorhi	r2,zero,245
  803d40:	00803d6c 	andhi	r2,zero,245
  803d44:	00803d74 	movhi	r2,245
  803d48:	00803d7c 	xorhi	r2,zero,245
  803d4c:	00803d6c 	andhi	r2,zero,245
  803d50:	00803d6c 	andhi	r2,zero,245
  803d54:	00803d7c 	xorhi	r2,zero,245
  803d58:	00803d6c 	andhi	r2,zero,245
  803d5c:	00803d74 	movhi	r2,245
  803d60:	00803d7c 	xorhi	r2,zero,245
  803d64:	00803d7c 	xorhi	r2,zero,245
  803d68:	00803d6c 	andhi	r2,zero,245
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803d6c:	00800044 	movi	r2,1
  803d70:	00000306 	br	803d80 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803d74:	0005883a 	mov	r2,zero
  803d78:	00000106 	br	803d80 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  803d7c:	0005883a 	mov	r2,zero
  }
}
  803d80:	e037883a 	mov	sp,fp
  803d84:	df000017 	ldw	fp,0(sp)
  803d88:	dec00104 	addi	sp,sp,4
  803d8c:	f800283a 	ret

00803d90 <atexit>:
  803d90:	200b883a 	mov	r5,r4
  803d94:	000f883a 	mov	r7,zero
  803d98:	000d883a 	mov	r6,zero
  803d9c:	0009883a 	mov	r4,zero
  803da0:	08045741 	jmpi	804574 <__register_exitproc>

00803da4 <exit>:
  803da4:	defffe04 	addi	sp,sp,-8
  803da8:	000b883a 	mov	r5,zero
  803dac:	dc000015 	stw	r16,0(sp)
  803db0:	dfc00115 	stw	ra,4(sp)
  803db4:	2021883a 	mov	r16,r4
  803db8:	080468c0 	call	80468c <__call_exitprocs>
  803dbc:	00802074 	movhi	r2,129
  803dc0:	10a28304 	addi	r2,r2,-30196
  803dc4:	11000017 	ldw	r4,0(r2)
  803dc8:	20800f17 	ldw	r2,60(r4)
  803dcc:	10000126 	beq	r2,zero,803dd4 <exit+0x30>
  803dd0:	103ee83a 	callr	r2
  803dd4:	8009883a 	mov	r4,r16
  803dd8:	08064440 	call	806444 <_exit>

00803ddc <memcmp>:
  803ddc:	01c000c4 	movi	r7,3
  803de0:	3980192e 	bgeu	r7,r6,803e48 <memcmp+0x6c>
  803de4:	2144b03a 	or	r2,r4,r5
  803de8:	11c4703a 	and	r2,r2,r7
  803dec:	10000f26 	beq	r2,zero,803e2c <memcmp+0x50>
  803df0:	20800003 	ldbu	r2,0(r4)
  803df4:	28c00003 	ldbu	r3,0(r5)
  803df8:	10c0151e 	bne	r2,r3,803e50 <memcmp+0x74>
  803dfc:	31bfff84 	addi	r6,r6,-2
  803e00:	01ffffc4 	movi	r7,-1
  803e04:	00000406 	br	803e18 <memcmp+0x3c>
  803e08:	20800003 	ldbu	r2,0(r4)
  803e0c:	28c00003 	ldbu	r3,0(r5)
  803e10:	31bfffc4 	addi	r6,r6,-1
  803e14:	10c00e1e 	bne	r2,r3,803e50 <memcmp+0x74>
  803e18:	21000044 	addi	r4,r4,1
  803e1c:	29400044 	addi	r5,r5,1
  803e20:	31fff91e 	bne	r6,r7,803e08 <__alt_data_end+0xff803e08>
  803e24:	0005883a 	mov	r2,zero
  803e28:	f800283a 	ret
  803e2c:	20c00017 	ldw	r3,0(r4)
  803e30:	28800017 	ldw	r2,0(r5)
  803e34:	18bfee1e 	bne	r3,r2,803df0 <__alt_data_end+0xff803df0>
  803e38:	31bfff04 	addi	r6,r6,-4
  803e3c:	21000104 	addi	r4,r4,4
  803e40:	29400104 	addi	r5,r5,4
  803e44:	39bff936 	bltu	r7,r6,803e2c <__alt_data_end+0xff803e2c>
  803e48:	303fe91e 	bne	r6,zero,803df0 <__alt_data_end+0xff803df0>
  803e4c:	003ff506 	br	803e24 <__alt_data_end+0xff803e24>
  803e50:	10c5c83a 	sub	r2,r2,r3
  803e54:	f800283a 	ret

00803e58 <memcpy>:
  803e58:	defffd04 	addi	sp,sp,-12
  803e5c:	dfc00215 	stw	ra,8(sp)
  803e60:	dc400115 	stw	r17,4(sp)
  803e64:	dc000015 	stw	r16,0(sp)
  803e68:	00c003c4 	movi	r3,15
  803e6c:	2005883a 	mov	r2,r4
  803e70:	1980452e 	bgeu	r3,r6,803f88 <memcpy+0x130>
  803e74:	2906b03a 	or	r3,r5,r4
  803e78:	18c000cc 	andi	r3,r3,3
  803e7c:	1800441e 	bne	r3,zero,803f90 <memcpy+0x138>
  803e80:	347ffc04 	addi	r17,r6,-16
  803e84:	8822d13a 	srli	r17,r17,4
  803e88:	28c00104 	addi	r3,r5,4
  803e8c:	23400104 	addi	r13,r4,4
  803e90:	8820913a 	slli	r16,r17,4
  803e94:	2b000204 	addi	r12,r5,8
  803e98:	22c00204 	addi	r11,r4,8
  803e9c:	84000504 	addi	r16,r16,20
  803ea0:	2a800304 	addi	r10,r5,12
  803ea4:	22400304 	addi	r9,r4,12
  803ea8:	2c21883a 	add	r16,r5,r16
  803eac:	2811883a 	mov	r8,r5
  803eb0:	200f883a 	mov	r7,r4
  803eb4:	41000017 	ldw	r4,0(r8)
  803eb8:	1fc00017 	ldw	ra,0(r3)
  803ebc:	63c00017 	ldw	r15,0(r12)
  803ec0:	39000015 	stw	r4,0(r7)
  803ec4:	53800017 	ldw	r14,0(r10)
  803ec8:	6fc00015 	stw	ra,0(r13)
  803ecc:	5bc00015 	stw	r15,0(r11)
  803ed0:	4b800015 	stw	r14,0(r9)
  803ed4:	18c00404 	addi	r3,r3,16
  803ed8:	39c00404 	addi	r7,r7,16
  803edc:	42000404 	addi	r8,r8,16
  803ee0:	6b400404 	addi	r13,r13,16
  803ee4:	63000404 	addi	r12,r12,16
  803ee8:	5ac00404 	addi	r11,r11,16
  803eec:	52800404 	addi	r10,r10,16
  803ef0:	4a400404 	addi	r9,r9,16
  803ef4:	1c3fef1e 	bne	r3,r16,803eb4 <__alt_data_end+0xff803eb4>
  803ef8:	89c00044 	addi	r7,r17,1
  803efc:	380e913a 	slli	r7,r7,4
  803f00:	310003cc 	andi	r4,r6,15
  803f04:	02c000c4 	movi	r11,3
  803f08:	11c7883a 	add	r3,r2,r7
  803f0c:	29cb883a 	add	r5,r5,r7
  803f10:	5900212e 	bgeu	r11,r4,803f98 <memcpy+0x140>
  803f14:	1813883a 	mov	r9,r3
  803f18:	2811883a 	mov	r8,r5
  803f1c:	200f883a 	mov	r7,r4
  803f20:	42800017 	ldw	r10,0(r8)
  803f24:	4a400104 	addi	r9,r9,4
  803f28:	39ffff04 	addi	r7,r7,-4
  803f2c:	4abfff15 	stw	r10,-4(r9)
  803f30:	42000104 	addi	r8,r8,4
  803f34:	59fffa36 	bltu	r11,r7,803f20 <__alt_data_end+0xff803f20>
  803f38:	213fff04 	addi	r4,r4,-4
  803f3c:	2008d0ba 	srli	r4,r4,2
  803f40:	318000cc 	andi	r6,r6,3
  803f44:	21000044 	addi	r4,r4,1
  803f48:	2109883a 	add	r4,r4,r4
  803f4c:	2109883a 	add	r4,r4,r4
  803f50:	1907883a 	add	r3,r3,r4
  803f54:	290b883a 	add	r5,r5,r4
  803f58:	30000626 	beq	r6,zero,803f74 <memcpy+0x11c>
  803f5c:	198d883a 	add	r6,r3,r6
  803f60:	29c00003 	ldbu	r7,0(r5)
  803f64:	18c00044 	addi	r3,r3,1
  803f68:	29400044 	addi	r5,r5,1
  803f6c:	19ffffc5 	stb	r7,-1(r3)
  803f70:	19bffb1e 	bne	r3,r6,803f60 <__alt_data_end+0xff803f60>
  803f74:	dfc00217 	ldw	ra,8(sp)
  803f78:	dc400117 	ldw	r17,4(sp)
  803f7c:	dc000017 	ldw	r16,0(sp)
  803f80:	dec00304 	addi	sp,sp,12
  803f84:	f800283a 	ret
  803f88:	2007883a 	mov	r3,r4
  803f8c:	003ff206 	br	803f58 <__alt_data_end+0xff803f58>
  803f90:	2007883a 	mov	r3,r4
  803f94:	003ff106 	br	803f5c <__alt_data_end+0xff803f5c>
  803f98:	200d883a 	mov	r6,r4
  803f9c:	003fee06 	br	803f58 <__alt_data_end+0xff803f58>

00803fa0 <memset>:
  803fa0:	20c000cc 	andi	r3,r4,3
  803fa4:	2005883a 	mov	r2,r4
  803fa8:	18004426 	beq	r3,zero,8040bc <memset+0x11c>
  803fac:	31ffffc4 	addi	r7,r6,-1
  803fb0:	30004026 	beq	r6,zero,8040b4 <memset+0x114>
  803fb4:	2813883a 	mov	r9,r5
  803fb8:	200d883a 	mov	r6,r4
  803fbc:	2007883a 	mov	r3,r4
  803fc0:	00000406 	br	803fd4 <memset+0x34>
  803fc4:	3a3fffc4 	addi	r8,r7,-1
  803fc8:	31800044 	addi	r6,r6,1
  803fcc:	38003926 	beq	r7,zero,8040b4 <memset+0x114>
  803fd0:	400f883a 	mov	r7,r8
  803fd4:	18c00044 	addi	r3,r3,1
  803fd8:	32400005 	stb	r9,0(r6)
  803fdc:	1a0000cc 	andi	r8,r3,3
  803fe0:	403ff81e 	bne	r8,zero,803fc4 <__alt_data_end+0xff803fc4>
  803fe4:	010000c4 	movi	r4,3
  803fe8:	21c02d2e 	bgeu	r4,r7,8040a0 <memset+0x100>
  803fec:	29003fcc 	andi	r4,r5,255
  803ff0:	200c923a 	slli	r6,r4,8
  803ff4:	3108b03a 	or	r4,r6,r4
  803ff8:	200c943a 	slli	r6,r4,16
  803ffc:	218cb03a 	or	r6,r4,r6
  804000:	010003c4 	movi	r4,15
  804004:	21c0182e 	bgeu	r4,r7,804068 <memset+0xc8>
  804008:	3b3ffc04 	addi	r12,r7,-16
  80400c:	6018d13a 	srli	r12,r12,4
  804010:	1a000104 	addi	r8,r3,4
  804014:	1ac00204 	addi	r11,r3,8
  804018:	6008913a 	slli	r4,r12,4
  80401c:	1a800304 	addi	r10,r3,12
  804020:	1813883a 	mov	r9,r3
  804024:	21000504 	addi	r4,r4,20
  804028:	1909883a 	add	r4,r3,r4
  80402c:	49800015 	stw	r6,0(r9)
  804030:	41800015 	stw	r6,0(r8)
  804034:	59800015 	stw	r6,0(r11)
  804038:	51800015 	stw	r6,0(r10)
  80403c:	42000404 	addi	r8,r8,16
  804040:	4a400404 	addi	r9,r9,16
  804044:	5ac00404 	addi	r11,r11,16
  804048:	52800404 	addi	r10,r10,16
  80404c:	413ff71e 	bne	r8,r4,80402c <__alt_data_end+0xff80402c>
  804050:	63000044 	addi	r12,r12,1
  804054:	6018913a 	slli	r12,r12,4
  804058:	39c003cc 	andi	r7,r7,15
  80405c:	010000c4 	movi	r4,3
  804060:	1b07883a 	add	r3,r3,r12
  804064:	21c00e2e 	bgeu	r4,r7,8040a0 <memset+0x100>
  804068:	1813883a 	mov	r9,r3
  80406c:	3811883a 	mov	r8,r7
  804070:	010000c4 	movi	r4,3
  804074:	49800015 	stw	r6,0(r9)
  804078:	423fff04 	addi	r8,r8,-4
  80407c:	4a400104 	addi	r9,r9,4
  804080:	223ffc36 	bltu	r4,r8,804074 <__alt_data_end+0xff804074>
  804084:	393fff04 	addi	r4,r7,-4
  804088:	2008d0ba 	srli	r4,r4,2
  80408c:	39c000cc 	andi	r7,r7,3
  804090:	21000044 	addi	r4,r4,1
  804094:	2109883a 	add	r4,r4,r4
  804098:	2109883a 	add	r4,r4,r4
  80409c:	1907883a 	add	r3,r3,r4
  8040a0:	38000526 	beq	r7,zero,8040b8 <memset+0x118>
  8040a4:	19cf883a 	add	r7,r3,r7
  8040a8:	19400005 	stb	r5,0(r3)
  8040ac:	18c00044 	addi	r3,r3,1
  8040b0:	38fffd1e 	bne	r7,r3,8040a8 <__alt_data_end+0xff8040a8>
  8040b4:	f800283a 	ret
  8040b8:	f800283a 	ret
  8040bc:	2007883a 	mov	r3,r4
  8040c0:	300f883a 	mov	r7,r6
  8040c4:	003fc706 	br	803fe4 <__alt_data_end+0xff803fe4>

008040c8 <_putc_r>:
  8040c8:	defffc04 	addi	sp,sp,-16
  8040cc:	dc000215 	stw	r16,8(sp)
  8040d0:	dfc00315 	stw	ra,12(sp)
  8040d4:	2021883a 	mov	r16,r4
  8040d8:	20000226 	beq	r4,zero,8040e4 <_putc_r+0x1c>
  8040dc:	20800e17 	ldw	r2,56(r4)
  8040e0:	10001b26 	beq	r2,zero,804150 <_putc_r+0x88>
  8040e4:	30800217 	ldw	r2,8(r6)
  8040e8:	10bfffc4 	addi	r2,r2,-1
  8040ec:	30800215 	stw	r2,8(r6)
  8040f0:	10000a16 	blt	r2,zero,80411c <_putc_r+0x54>
  8040f4:	30800017 	ldw	r2,0(r6)
  8040f8:	11400005 	stb	r5,0(r2)
  8040fc:	30800017 	ldw	r2,0(r6)
  804100:	10c00044 	addi	r3,r2,1
  804104:	30c00015 	stw	r3,0(r6)
  804108:	10800003 	ldbu	r2,0(r2)
  80410c:	dfc00317 	ldw	ra,12(sp)
  804110:	dc000217 	ldw	r16,8(sp)
  804114:	dec00404 	addi	sp,sp,16
  804118:	f800283a 	ret
  80411c:	30c00617 	ldw	r3,24(r6)
  804120:	10c00616 	blt	r2,r3,80413c <_putc_r+0x74>
  804124:	30800017 	ldw	r2,0(r6)
  804128:	00c00284 	movi	r3,10
  80412c:	11400005 	stb	r5,0(r2)
  804130:	30800017 	ldw	r2,0(r6)
  804134:	11400003 	ldbu	r5,0(r2)
  804138:	28fff11e 	bne	r5,r3,804100 <__alt_data_end+0xff804100>
  80413c:	8009883a 	mov	r4,r16
  804140:	dfc00317 	ldw	ra,12(sp)
  804144:	dc000217 	ldw	r16,8(sp)
  804148:	dec00404 	addi	sp,sp,16
  80414c:	08042c81 	jmpi	8042c8 <__swbuf_r>
  804150:	d9400015 	stw	r5,0(sp)
  804154:	d9800115 	stw	r6,4(sp)
  804158:	0804e040 	call	804e04 <__sinit>
  80415c:	d9800117 	ldw	r6,4(sp)
  804160:	d9400017 	ldw	r5,0(sp)
  804164:	003fdf06 	br	8040e4 <__alt_data_end+0xff8040e4>

00804168 <putc>:
  804168:	00802074 	movhi	r2,129
  80416c:	defffc04 	addi	sp,sp,-16
  804170:	10a28404 	addi	r2,r2,-30192
  804174:	dc000115 	stw	r16,4(sp)
  804178:	14000017 	ldw	r16,0(r2)
  80417c:	dc400215 	stw	r17,8(sp)
  804180:	dfc00315 	stw	ra,12(sp)
  804184:	2023883a 	mov	r17,r4
  804188:	80000226 	beq	r16,zero,804194 <putc+0x2c>
  80418c:	80800e17 	ldw	r2,56(r16)
  804190:	10001a26 	beq	r2,zero,8041fc <putc+0x94>
  804194:	28800217 	ldw	r2,8(r5)
  804198:	10bfffc4 	addi	r2,r2,-1
  80419c:	28800215 	stw	r2,8(r5)
  8041a0:	10000b16 	blt	r2,zero,8041d0 <putc+0x68>
  8041a4:	28800017 	ldw	r2,0(r5)
  8041a8:	14400005 	stb	r17,0(r2)
  8041ac:	28800017 	ldw	r2,0(r5)
  8041b0:	10c00044 	addi	r3,r2,1
  8041b4:	28c00015 	stw	r3,0(r5)
  8041b8:	10800003 	ldbu	r2,0(r2)
  8041bc:	dfc00317 	ldw	ra,12(sp)
  8041c0:	dc400217 	ldw	r17,8(sp)
  8041c4:	dc000117 	ldw	r16,4(sp)
  8041c8:	dec00404 	addi	sp,sp,16
  8041cc:	f800283a 	ret
  8041d0:	28c00617 	ldw	r3,24(r5)
  8041d4:	10c00e16 	blt	r2,r3,804210 <putc+0xa8>
  8041d8:	28800017 	ldw	r2,0(r5)
  8041dc:	01000284 	movi	r4,10
  8041e0:	14400005 	stb	r17,0(r2)
  8041e4:	28800017 	ldw	r2,0(r5)
  8041e8:	10c00003 	ldbu	r3,0(r2)
  8041ec:	193ff01e 	bne	r3,r4,8041b0 <__alt_data_end+0xff8041b0>
  8041f0:	280d883a 	mov	r6,r5
  8041f4:	180b883a 	mov	r5,r3
  8041f8:	00000706 	br	804218 <putc+0xb0>
  8041fc:	8009883a 	mov	r4,r16
  804200:	d9400015 	stw	r5,0(sp)
  804204:	0804e040 	call	804e04 <__sinit>
  804208:	d9400017 	ldw	r5,0(sp)
  80420c:	003fe106 	br	804194 <__alt_data_end+0xff804194>
  804210:	280d883a 	mov	r6,r5
  804214:	880b883a 	mov	r5,r17
  804218:	8009883a 	mov	r4,r16
  80421c:	dfc00317 	ldw	ra,12(sp)
  804220:	dc400217 	ldw	r17,8(sp)
  804224:	dc000117 	ldw	r16,4(sp)
  804228:	dec00404 	addi	sp,sp,16
  80422c:	08042c81 	jmpi	8042c8 <__swbuf_r>

00804230 <strlen>:
  804230:	208000cc 	andi	r2,r4,3
  804234:	10002026 	beq	r2,zero,8042b8 <strlen+0x88>
  804238:	20800007 	ldb	r2,0(r4)
  80423c:	10002026 	beq	r2,zero,8042c0 <strlen+0x90>
  804240:	2005883a 	mov	r2,r4
  804244:	00000206 	br	804250 <strlen+0x20>
  804248:	10c00007 	ldb	r3,0(r2)
  80424c:	18001826 	beq	r3,zero,8042b0 <strlen+0x80>
  804250:	10800044 	addi	r2,r2,1
  804254:	10c000cc 	andi	r3,r2,3
  804258:	183ffb1e 	bne	r3,zero,804248 <__alt_data_end+0xff804248>
  80425c:	10c00017 	ldw	r3,0(r2)
  804260:	01ffbff4 	movhi	r7,65279
  804264:	39ffbfc4 	addi	r7,r7,-257
  804268:	00ca303a 	nor	r5,zero,r3
  80426c:	01a02074 	movhi	r6,32897
  804270:	19c7883a 	add	r3,r3,r7
  804274:	31a02004 	addi	r6,r6,-32640
  804278:	1946703a 	and	r3,r3,r5
  80427c:	1986703a 	and	r3,r3,r6
  804280:	1800091e 	bne	r3,zero,8042a8 <strlen+0x78>
  804284:	10800104 	addi	r2,r2,4
  804288:	10c00017 	ldw	r3,0(r2)
  80428c:	19cb883a 	add	r5,r3,r7
  804290:	00c6303a 	nor	r3,zero,r3
  804294:	28c6703a 	and	r3,r5,r3
  804298:	1986703a 	and	r3,r3,r6
  80429c:	183ff926 	beq	r3,zero,804284 <__alt_data_end+0xff804284>
  8042a0:	00000106 	br	8042a8 <strlen+0x78>
  8042a4:	10800044 	addi	r2,r2,1
  8042a8:	10c00007 	ldb	r3,0(r2)
  8042ac:	183ffd1e 	bne	r3,zero,8042a4 <__alt_data_end+0xff8042a4>
  8042b0:	1105c83a 	sub	r2,r2,r4
  8042b4:	f800283a 	ret
  8042b8:	2005883a 	mov	r2,r4
  8042bc:	003fe706 	br	80425c <__alt_data_end+0xff80425c>
  8042c0:	0005883a 	mov	r2,zero
  8042c4:	f800283a 	ret

008042c8 <__swbuf_r>:
  8042c8:	defffb04 	addi	sp,sp,-20
  8042cc:	dcc00315 	stw	r19,12(sp)
  8042d0:	dc800215 	stw	r18,8(sp)
  8042d4:	dc000015 	stw	r16,0(sp)
  8042d8:	dfc00415 	stw	ra,16(sp)
  8042dc:	dc400115 	stw	r17,4(sp)
  8042e0:	2025883a 	mov	r18,r4
  8042e4:	2827883a 	mov	r19,r5
  8042e8:	3021883a 	mov	r16,r6
  8042ec:	20000226 	beq	r4,zero,8042f8 <__swbuf_r+0x30>
  8042f0:	20800e17 	ldw	r2,56(r4)
  8042f4:	10004226 	beq	r2,zero,804400 <__swbuf_r+0x138>
  8042f8:	80800617 	ldw	r2,24(r16)
  8042fc:	8100030b 	ldhu	r4,12(r16)
  804300:	80800215 	stw	r2,8(r16)
  804304:	2080020c 	andi	r2,r4,8
  804308:	10003626 	beq	r2,zero,8043e4 <__swbuf_r+0x11c>
  80430c:	80c00417 	ldw	r3,16(r16)
  804310:	18003426 	beq	r3,zero,8043e4 <__swbuf_r+0x11c>
  804314:	2088000c 	andi	r2,r4,8192
  804318:	9c403fcc 	andi	r17,r19,255
  80431c:	10001a26 	beq	r2,zero,804388 <__swbuf_r+0xc0>
  804320:	80800017 	ldw	r2,0(r16)
  804324:	81000517 	ldw	r4,20(r16)
  804328:	10c7c83a 	sub	r3,r2,r3
  80432c:	1900200e 	bge	r3,r4,8043b0 <__swbuf_r+0xe8>
  804330:	18c00044 	addi	r3,r3,1
  804334:	81000217 	ldw	r4,8(r16)
  804338:	11400044 	addi	r5,r2,1
  80433c:	81400015 	stw	r5,0(r16)
  804340:	213fffc4 	addi	r4,r4,-1
  804344:	81000215 	stw	r4,8(r16)
  804348:	14c00005 	stb	r19,0(r2)
  80434c:	80800517 	ldw	r2,20(r16)
  804350:	10c01e26 	beq	r2,r3,8043cc <__swbuf_r+0x104>
  804354:	8080030b 	ldhu	r2,12(r16)
  804358:	1080004c 	andi	r2,r2,1
  80435c:	10000226 	beq	r2,zero,804368 <__swbuf_r+0xa0>
  804360:	00800284 	movi	r2,10
  804364:	88801926 	beq	r17,r2,8043cc <__swbuf_r+0x104>
  804368:	8805883a 	mov	r2,r17
  80436c:	dfc00417 	ldw	ra,16(sp)
  804370:	dcc00317 	ldw	r19,12(sp)
  804374:	dc800217 	ldw	r18,8(sp)
  804378:	dc400117 	ldw	r17,4(sp)
  80437c:	dc000017 	ldw	r16,0(sp)
  804380:	dec00504 	addi	sp,sp,20
  804384:	f800283a 	ret
  804388:	81401917 	ldw	r5,100(r16)
  80438c:	00b7ffc4 	movi	r2,-8193
  804390:	21080014 	ori	r4,r4,8192
  804394:	2884703a 	and	r2,r5,r2
  804398:	80801915 	stw	r2,100(r16)
  80439c:	80800017 	ldw	r2,0(r16)
  8043a0:	8100030d 	sth	r4,12(r16)
  8043a4:	81000517 	ldw	r4,20(r16)
  8043a8:	10c7c83a 	sub	r3,r2,r3
  8043ac:	193fe016 	blt	r3,r4,804330 <__alt_data_end+0xff804330>
  8043b0:	800b883a 	mov	r5,r16
  8043b4:	9009883a 	mov	r4,r18
  8043b8:	0804a280 	call	804a28 <_fflush_r>
  8043bc:	1000071e 	bne	r2,zero,8043dc <__swbuf_r+0x114>
  8043c0:	80800017 	ldw	r2,0(r16)
  8043c4:	00c00044 	movi	r3,1
  8043c8:	003fda06 	br	804334 <__alt_data_end+0xff804334>
  8043cc:	800b883a 	mov	r5,r16
  8043d0:	9009883a 	mov	r4,r18
  8043d4:	0804a280 	call	804a28 <_fflush_r>
  8043d8:	103fe326 	beq	r2,zero,804368 <__alt_data_end+0xff804368>
  8043dc:	00bfffc4 	movi	r2,-1
  8043e0:	003fe206 	br	80436c <__alt_data_end+0xff80436c>
  8043e4:	800b883a 	mov	r5,r16
  8043e8:	9009883a 	mov	r4,r18
  8043ec:	08044200 	call	804420 <__swsetup_r>
  8043f0:	103ffa1e 	bne	r2,zero,8043dc <__alt_data_end+0xff8043dc>
  8043f4:	8100030b 	ldhu	r4,12(r16)
  8043f8:	80c00417 	ldw	r3,16(r16)
  8043fc:	003fc506 	br	804314 <__alt_data_end+0xff804314>
  804400:	0804e040 	call	804e04 <__sinit>
  804404:	003fbc06 	br	8042f8 <__alt_data_end+0xff8042f8>

00804408 <__swbuf>:
  804408:	00802074 	movhi	r2,129
  80440c:	10a28404 	addi	r2,r2,-30192
  804410:	280d883a 	mov	r6,r5
  804414:	200b883a 	mov	r5,r4
  804418:	11000017 	ldw	r4,0(r2)
  80441c:	08042c81 	jmpi	8042c8 <__swbuf_r>

00804420 <__swsetup_r>:
  804420:	00802074 	movhi	r2,129
  804424:	defffd04 	addi	sp,sp,-12
  804428:	10a28404 	addi	r2,r2,-30192
  80442c:	dc400115 	stw	r17,4(sp)
  804430:	2023883a 	mov	r17,r4
  804434:	11000017 	ldw	r4,0(r2)
  804438:	dc000015 	stw	r16,0(sp)
  80443c:	dfc00215 	stw	ra,8(sp)
  804440:	2821883a 	mov	r16,r5
  804444:	20000226 	beq	r4,zero,804450 <__swsetup_r+0x30>
  804448:	20800e17 	ldw	r2,56(r4)
  80444c:	10003126 	beq	r2,zero,804514 <__swsetup_r+0xf4>
  804450:	8080030b 	ldhu	r2,12(r16)
  804454:	10c0020c 	andi	r3,r2,8
  804458:	1009883a 	mov	r4,r2
  80445c:	18000f26 	beq	r3,zero,80449c <__swsetup_r+0x7c>
  804460:	80c00417 	ldw	r3,16(r16)
  804464:	18001526 	beq	r3,zero,8044bc <__swsetup_r+0x9c>
  804468:	1100004c 	andi	r4,r2,1
  80446c:	20001c1e 	bne	r4,zero,8044e0 <__swsetup_r+0xc0>
  804470:	1080008c 	andi	r2,r2,2
  804474:	1000291e 	bne	r2,zero,80451c <__swsetup_r+0xfc>
  804478:	80800517 	ldw	r2,20(r16)
  80447c:	80800215 	stw	r2,8(r16)
  804480:	18001c26 	beq	r3,zero,8044f4 <__swsetup_r+0xd4>
  804484:	0005883a 	mov	r2,zero
  804488:	dfc00217 	ldw	ra,8(sp)
  80448c:	dc400117 	ldw	r17,4(sp)
  804490:	dc000017 	ldw	r16,0(sp)
  804494:	dec00304 	addi	sp,sp,12
  804498:	f800283a 	ret
  80449c:	2080040c 	andi	r2,r4,16
  8044a0:	10002e26 	beq	r2,zero,80455c <__swsetup_r+0x13c>
  8044a4:	2080010c 	andi	r2,r4,4
  8044a8:	10001e1e 	bne	r2,zero,804524 <__swsetup_r+0x104>
  8044ac:	80c00417 	ldw	r3,16(r16)
  8044b0:	20800214 	ori	r2,r4,8
  8044b4:	8080030d 	sth	r2,12(r16)
  8044b8:	183feb1e 	bne	r3,zero,804468 <__alt_data_end+0xff804468>
  8044bc:	1100a00c 	andi	r4,r2,640
  8044c0:	01408004 	movi	r5,512
  8044c4:	217fe826 	beq	r4,r5,804468 <__alt_data_end+0xff804468>
  8044c8:	800b883a 	mov	r5,r16
  8044cc:	8809883a 	mov	r4,r17
  8044d0:	08054100 	call	805410 <__smakebuf_r>
  8044d4:	8080030b 	ldhu	r2,12(r16)
  8044d8:	80c00417 	ldw	r3,16(r16)
  8044dc:	003fe206 	br	804468 <__alt_data_end+0xff804468>
  8044e0:	80800517 	ldw	r2,20(r16)
  8044e4:	80000215 	stw	zero,8(r16)
  8044e8:	0085c83a 	sub	r2,zero,r2
  8044ec:	80800615 	stw	r2,24(r16)
  8044f0:	183fe41e 	bne	r3,zero,804484 <__alt_data_end+0xff804484>
  8044f4:	80c0030b 	ldhu	r3,12(r16)
  8044f8:	0005883a 	mov	r2,zero
  8044fc:	1900200c 	andi	r4,r3,128
  804500:	203fe126 	beq	r4,zero,804488 <__alt_data_end+0xff804488>
  804504:	18c01014 	ori	r3,r3,64
  804508:	80c0030d 	sth	r3,12(r16)
  80450c:	00bfffc4 	movi	r2,-1
  804510:	003fdd06 	br	804488 <__alt_data_end+0xff804488>
  804514:	0804e040 	call	804e04 <__sinit>
  804518:	003fcd06 	br	804450 <__alt_data_end+0xff804450>
  80451c:	0005883a 	mov	r2,zero
  804520:	003fd606 	br	80447c <__alt_data_end+0xff80447c>
  804524:	81400c17 	ldw	r5,48(r16)
  804528:	28000626 	beq	r5,zero,804544 <__swsetup_r+0x124>
  80452c:	80801004 	addi	r2,r16,64
  804530:	28800326 	beq	r5,r2,804540 <__swsetup_r+0x120>
  804534:	8809883a 	mov	r4,r17
  804538:	0804f780 	call	804f78 <_free_r>
  80453c:	8100030b 	ldhu	r4,12(r16)
  804540:	80000c15 	stw	zero,48(r16)
  804544:	80c00417 	ldw	r3,16(r16)
  804548:	00bff6c4 	movi	r2,-37
  80454c:	1108703a 	and	r4,r2,r4
  804550:	80000115 	stw	zero,4(r16)
  804554:	80c00015 	stw	r3,0(r16)
  804558:	003fd506 	br	8044b0 <__alt_data_end+0xff8044b0>
  80455c:	00800244 	movi	r2,9
  804560:	88800015 	stw	r2,0(r17)
  804564:	20801014 	ori	r2,r4,64
  804568:	8080030d 	sth	r2,12(r16)
  80456c:	00bfffc4 	movi	r2,-1
  804570:	003fc506 	br	804488 <__alt_data_end+0xff804488>

00804574 <__register_exitproc>:
  804574:	defffa04 	addi	sp,sp,-24
  804578:	dc000315 	stw	r16,12(sp)
  80457c:	04002074 	movhi	r16,129
  804580:	84228304 	addi	r16,r16,-30196
  804584:	80c00017 	ldw	r3,0(r16)
  804588:	dc400415 	stw	r17,16(sp)
  80458c:	dfc00515 	stw	ra,20(sp)
  804590:	18805217 	ldw	r2,328(r3)
  804594:	2023883a 	mov	r17,r4
  804598:	10003726 	beq	r2,zero,804678 <__register_exitproc+0x104>
  80459c:	10c00117 	ldw	r3,4(r2)
  8045a0:	010007c4 	movi	r4,31
  8045a4:	20c00e16 	blt	r4,r3,8045e0 <__register_exitproc+0x6c>
  8045a8:	1a000044 	addi	r8,r3,1
  8045ac:	8800221e 	bne	r17,zero,804638 <__register_exitproc+0xc4>
  8045b0:	18c00084 	addi	r3,r3,2
  8045b4:	18c7883a 	add	r3,r3,r3
  8045b8:	18c7883a 	add	r3,r3,r3
  8045bc:	12000115 	stw	r8,4(r2)
  8045c0:	10c7883a 	add	r3,r2,r3
  8045c4:	19400015 	stw	r5,0(r3)
  8045c8:	0005883a 	mov	r2,zero
  8045cc:	dfc00517 	ldw	ra,20(sp)
  8045d0:	dc400417 	ldw	r17,16(sp)
  8045d4:	dc000317 	ldw	r16,12(sp)
  8045d8:	dec00604 	addi	sp,sp,24
  8045dc:	f800283a 	ret
  8045e0:	00800034 	movhi	r2,0
  8045e4:	10800004 	addi	r2,r2,0
  8045e8:	10002626 	beq	r2,zero,804684 <__register_exitproc+0x110>
  8045ec:	01006404 	movi	r4,400
  8045f0:	d9400015 	stw	r5,0(sp)
  8045f4:	d9800115 	stw	r6,4(sp)
  8045f8:	d9c00215 	stw	r7,8(sp)
  8045fc:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  804600:	d9400017 	ldw	r5,0(sp)
  804604:	d9800117 	ldw	r6,4(sp)
  804608:	d9c00217 	ldw	r7,8(sp)
  80460c:	10001d26 	beq	r2,zero,804684 <__register_exitproc+0x110>
  804610:	81000017 	ldw	r4,0(r16)
  804614:	10000115 	stw	zero,4(r2)
  804618:	02000044 	movi	r8,1
  80461c:	22405217 	ldw	r9,328(r4)
  804620:	0007883a 	mov	r3,zero
  804624:	12400015 	stw	r9,0(r2)
  804628:	20805215 	stw	r2,328(r4)
  80462c:	10006215 	stw	zero,392(r2)
  804630:	10006315 	stw	zero,396(r2)
  804634:	883fde26 	beq	r17,zero,8045b0 <__alt_data_end+0xff8045b0>
  804638:	18c9883a 	add	r4,r3,r3
  80463c:	2109883a 	add	r4,r4,r4
  804640:	1109883a 	add	r4,r2,r4
  804644:	21802215 	stw	r6,136(r4)
  804648:	01800044 	movi	r6,1
  80464c:	12406217 	ldw	r9,392(r2)
  804650:	30cc983a 	sll	r6,r6,r3
  804654:	4992b03a 	or	r9,r9,r6
  804658:	12406215 	stw	r9,392(r2)
  80465c:	21c04215 	stw	r7,264(r4)
  804660:	01000084 	movi	r4,2
  804664:	893fd21e 	bne	r17,r4,8045b0 <__alt_data_end+0xff8045b0>
  804668:	11006317 	ldw	r4,396(r2)
  80466c:	218cb03a 	or	r6,r4,r6
  804670:	11806315 	stw	r6,396(r2)
  804674:	003fce06 	br	8045b0 <__alt_data_end+0xff8045b0>
  804678:	18805304 	addi	r2,r3,332
  80467c:	18805215 	stw	r2,328(r3)
  804680:	003fc606 	br	80459c <__alt_data_end+0xff80459c>
  804684:	00bfffc4 	movi	r2,-1
  804688:	003fd006 	br	8045cc <__alt_data_end+0xff8045cc>

0080468c <__call_exitprocs>:
  80468c:	defff504 	addi	sp,sp,-44
  804690:	df000915 	stw	fp,36(sp)
  804694:	dd400615 	stw	r21,24(sp)
  804698:	dc800315 	stw	r18,12(sp)
  80469c:	dfc00a15 	stw	ra,40(sp)
  8046a0:	ddc00815 	stw	r23,32(sp)
  8046a4:	dd800715 	stw	r22,28(sp)
  8046a8:	dd000515 	stw	r20,20(sp)
  8046ac:	dcc00415 	stw	r19,16(sp)
  8046b0:	dc400215 	stw	r17,8(sp)
  8046b4:	dc000115 	stw	r16,4(sp)
  8046b8:	d9000015 	stw	r4,0(sp)
  8046bc:	2839883a 	mov	fp,r5
  8046c0:	04800044 	movi	r18,1
  8046c4:	057fffc4 	movi	r21,-1
  8046c8:	00802074 	movhi	r2,129
  8046cc:	10a28304 	addi	r2,r2,-30196
  8046d0:	12000017 	ldw	r8,0(r2)
  8046d4:	45005217 	ldw	r20,328(r8)
  8046d8:	44c05204 	addi	r19,r8,328
  8046dc:	a0001c26 	beq	r20,zero,804750 <__call_exitprocs+0xc4>
  8046e0:	a0800117 	ldw	r2,4(r20)
  8046e4:	15ffffc4 	addi	r23,r2,-1
  8046e8:	b8000d16 	blt	r23,zero,804720 <__call_exitprocs+0x94>
  8046ec:	14000044 	addi	r16,r2,1
  8046f0:	8421883a 	add	r16,r16,r16
  8046f4:	8421883a 	add	r16,r16,r16
  8046f8:	84402004 	addi	r17,r16,128
  8046fc:	a463883a 	add	r17,r20,r17
  804700:	a421883a 	add	r16,r20,r16
  804704:	e0001e26 	beq	fp,zero,804780 <__call_exitprocs+0xf4>
  804708:	80804017 	ldw	r2,256(r16)
  80470c:	e0801c26 	beq	fp,r2,804780 <__call_exitprocs+0xf4>
  804710:	bdffffc4 	addi	r23,r23,-1
  804714:	843fff04 	addi	r16,r16,-4
  804718:	8c7fff04 	addi	r17,r17,-4
  80471c:	bd7ff91e 	bne	r23,r21,804704 <__alt_data_end+0xff804704>
  804720:	00800034 	movhi	r2,0
  804724:	10800004 	addi	r2,r2,0
  804728:	10000926 	beq	r2,zero,804750 <__call_exitprocs+0xc4>
  80472c:	a0800117 	ldw	r2,4(r20)
  804730:	1000301e 	bne	r2,zero,8047f4 <__call_exitprocs+0x168>
  804734:	a0800017 	ldw	r2,0(r20)
  804738:	10003226 	beq	r2,zero,804804 <__call_exitprocs+0x178>
  80473c:	a009883a 	mov	r4,r20
  804740:	98800015 	stw	r2,0(r19)
  804744:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  804748:	9d000017 	ldw	r20,0(r19)
  80474c:	a03fe41e 	bne	r20,zero,8046e0 <__alt_data_end+0xff8046e0>
  804750:	dfc00a17 	ldw	ra,40(sp)
  804754:	df000917 	ldw	fp,36(sp)
  804758:	ddc00817 	ldw	r23,32(sp)
  80475c:	dd800717 	ldw	r22,28(sp)
  804760:	dd400617 	ldw	r21,24(sp)
  804764:	dd000517 	ldw	r20,20(sp)
  804768:	dcc00417 	ldw	r19,16(sp)
  80476c:	dc800317 	ldw	r18,12(sp)
  804770:	dc400217 	ldw	r17,8(sp)
  804774:	dc000117 	ldw	r16,4(sp)
  804778:	dec00b04 	addi	sp,sp,44
  80477c:	f800283a 	ret
  804780:	a0800117 	ldw	r2,4(r20)
  804784:	80c00017 	ldw	r3,0(r16)
  804788:	10bfffc4 	addi	r2,r2,-1
  80478c:	15c01426 	beq	r2,r23,8047e0 <__call_exitprocs+0x154>
  804790:	80000015 	stw	zero,0(r16)
  804794:	183fde26 	beq	r3,zero,804710 <__alt_data_end+0xff804710>
  804798:	95c8983a 	sll	r4,r18,r23
  80479c:	a0806217 	ldw	r2,392(r20)
  8047a0:	a5800117 	ldw	r22,4(r20)
  8047a4:	2084703a 	and	r2,r4,r2
  8047a8:	10000b26 	beq	r2,zero,8047d8 <__call_exitprocs+0x14c>
  8047ac:	a0806317 	ldw	r2,396(r20)
  8047b0:	2088703a 	and	r4,r4,r2
  8047b4:	20000c1e 	bne	r4,zero,8047e8 <__call_exitprocs+0x15c>
  8047b8:	89400017 	ldw	r5,0(r17)
  8047bc:	d9000017 	ldw	r4,0(sp)
  8047c0:	183ee83a 	callr	r3
  8047c4:	a0800117 	ldw	r2,4(r20)
  8047c8:	15bfbf1e 	bne	r2,r22,8046c8 <__alt_data_end+0xff8046c8>
  8047cc:	98800017 	ldw	r2,0(r19)
  8047d0:	153fcf26 	beq	r2,r20,804710 <__alt_data_end+0xff804710>
  8047d4:	003fbc06 	br	8046c8 <__alt_data_end+0xff8046c8>
  8047d8:	183ee83a 	callr	r3
  8047dc:	003ff906 	br	8047c4 <__alt_data_end+0xff8047c4>
  8047e0:	a5c00115 	stw	r23,4(r20)
  8047e4:	003feb06 	br	804794 <__alt_data_end+0xff804794>
  8047e8:	89000017 	ldw	r4,0(r17)
  8047ec:	183ee83a 	callr	r3
  8047f0:	003ff406 	br	8047c4 <__alt_data_end+0xff8047c4>
  8047f4:	a0800017 	ldw	r2,0(r20)
  8047f8:	a027883a 	mov	r19,r20
  8047fc:	1029883a 	mov	r20,r2
  804800:	003fb606 	br	8046dc <__alt_data_end+0xff8046dc>
  804804:	0005883a 	mov	r2,zero
  804808:	003ffb06 	br	8047f8 <__alt_data_end+0xff8047f8>

0080480c <__sflush_r>:
  80480c:	2880030b 	ldhu	r2,12(r5)
  804810:	defffb04 	addi	sp,sp,-20
  804814:	dcc00315 	stw	r19,12(sp)
  804818:	dc400115 	stw	r17,4(sp)
  80481c:	dfc00415 	stw	ra,16(sp)
  804820:	dc800215 	stw	r18,8(sp)
  804824:	dc000015 	stw	r16,0(sp)
  804828:	10c0020c 	andi	r3,r2,8
  80482c:	2823883a 	mov	r17,r5
  804830:	2027883a 	mov	r19,r4
  804834:	1800311e 	bne	r3,zero,8048fc <__sflush_r+0xf0>
  804838:	28c00117 	ldw	r3,4(r5)
  80483c:	10820014 	ori	r2,r2,2048
  804840:	2880030d 	sth	r2,12(r5)
  804844:	00c04b0e 	bge	zero,r3,804974 <__sflush_r+0x168>
  804848:	8a000a17 	ldw	r8,40(r17)
  80484c:	40002326 	beq	r8,zero,8048dc <__sflush_r+0xd0>
  804850:	9c000017 	ldw	r16,0(r19)
  804854:	10c4000c 	andi	r3,r2,4096
  804858:	98000015 	stw	zero,0(r19)
  80485c:	18004826 	beq	r3,zero,804980 <__sflush_r+0x174>
  804860:	89801417 	ldw	r6,80(r17)
  804864:	10c0010c 	andi	r3,r2,4
  804868:	18000626 	beq	r3,zero,804884 <__sflush_r+0x78>
  80486c:	88c00117 	ldw	r3,4(r17)
  804870:	88800c17 	ldw	r2,48(r17)
  804874:	30cdc83a 	sub	r6,r6,r3
  804878:	10000226 	beq	r2,zero,804884 <__sflush_r+0x78>
  80487c:	88800f17 	ldw	r2,60(r17)
  804880:	308dc83a 	sub	r6,r6,r2
  804884:	89400717 	ldw	r5,28(r17)
  804888:	000f883a 	mov	r7,zero
  80488c:	9809883a 	mov	r4,r19
  804890:	403ee83a 	callr	r8
  804894:	00ffffc4 	movi	r3,-1
  804898:	10c04426 	beq	r2,r3,8049ac <__sflush_r+0x1a0>
  80489c:	88c0030b 	ldhu	r3,12(r17)
  8048a0:	89000417 	ldw	r4,16(r17)
  8048a4:	88000115 	stw	zero,4(r17)
  8048a8:	197dffcc 	andi	r5,r3,63487
  8048ac:	8940030d 	sth	r5,12(r17)
  8048b0:	89000015 	stw	r4,0(r17)
  8048b4:	18c4000c 	andi	r3,r3,4096
  8048b8:	18002c1e 	bne	r3,zero,80496c <__sflush_r+0x160>
  8048bc:	89400c17 	ldw	r5,48(r17)
  8048c0:	9c000015 	stw	r16,0(r19)
  8048c4:	28000526 	beq	r5,zero,8048dc <__sflush_r+0xd0>
  8048c8:	88801004 	addi	r2,r17,64
  8048cc:	28800226 	beq	r5,r2,8048d8 <__sflush_r+0xcc>
  8048d0:	9809883a 	mov	r4,r19
  8048d4:	0804f780 	call	804f78 <_free_r>
  8048d8:	88000c15 	stw	zero,48(r17)
  8048dc:	0005883a 	mov	r2,zero
  8048e0:	dfc00417 	ldw	ra,16(sp)
  8048e4:	dcc00317 	ldw	r19,12(sp)
  8048e8:	dc800217 	ldw	r18,8(sp)
  8048ec:	dc400117 	ldw	r17,4(sp)
  8048f0:	dc000017 	ldw	r16,0(sp)
  8048f4:	dec00504 	addi	sp,sp,20
  8048f8:	f800283a 	ret
  8048fc:	2c800417 	ldw	r18,16(r5)
  804900:	903ff626 	beq	r18,zero,8048dc <__alt_data_end+0xff8048dc>
  804904:	2c000017 	ldw	r16,0(r5)
  804908:	108000cc 	andi	r2,r2,3
  80490c:	2c800015 	stw	r18,0(r5)
  804910:	84a1c83a 	sub	r16,r16,r18
  804914:	1000131e 	bne	r2,zero,804964 <__sflush_r+0x158>
  804918:	28800517 	ldw	r2,20(r5)
  80491c:	88800215 	stw	r2,8(r17)
  804920:	04000316 	blt	zero,r16,804930 <__sflush_r+0x124>
  804924:	003fed06 	br	8048dc <__alt_data_end+0xff8048dc>
  804928:	90a5883a 	add	r18,r18,r2
  80492c:	043feb0e 	bge	zero,r16,8048dc <__alt_data_end+0xff8048dc>
  804930:	88800917 	ldw	r2,36(r17)
  804934:	89400717 	ldw	r5,28(r17)
  804938:	800f883a 	mov	r7,r16
  80493c:	900d883a 	mov	r6,r18
  804940:	9809883a 	mov	r4,r19
  804944:	103ee83a 	callr	r2
  804948:	80a1c83a 	sub	r16,r16,r2
  80494c:	00bff616 	blt	zero,r2,804928 <__alt_data_end+0xff804928>
  804950:	88c0030b 	ldhu	r3,12(r17)
  804954:	00bfffc4 	movi	r2,-1
  804958:	18c01014 	ori	r3,r3,64
  80495c:	88c0030d 	sth	r3,12(r17)
  804960:	003fdf06 	br	8048e0 <__alt_data_end+0xff8048e0>
  804964:	0005883a 	mov	r2,zero
  804968:	003fec06 	br	80491c <__alt_data_end+0xff80491c>
  80496c:	88801415 	stw	r2,80(r17)
  804970:	003fd206 	br	8048bc <__alt_data_end+0xff8048bc>
  804974:	28c00f17 	ldw	r3,60(r5)
  804978:	00ffb316 	blt	zero,r3,804848 <__alt_data_end+0xff804848>
  80497c:	003fd706 	br	8048dc <__alt_data_end+0xff8048dc>
  804980:	89400717 	ldw	r5,28(r17)
  804984:	000d883a 	mov	r6,zero
  804988:	01c00044 	movi	r7,1
  80498c:	9809883a 	mov	r4,r19
  804990:	403ee83a 	callr	r8
  804994:	100d883a 	mov	r6,r2
  804998:	00bfffc4 	movi	r2,-1
  80499c:	30801426 	beq	r6,r2,8049f0 <__sflush_r+0x1e4>
  8049a0:	8880030b 	ldhu	r2,12(r17)
  8049a4:	8a000a17 	ldw	r8,40(r17)
  8049a8:	003fae06 	br	804864 <__alt_data_end+0xff804864>
  8049ac:	98c00017 	ldw	r3,0(r19)
  8049b0:	183fba26 	beq	r3,zero,80489c <__alt_data_end+0xff80489c>
  8049b4:	01000744 	movi	r4,29
  8049b8:	19000626 	beq	r3,r4,8049d4 <__sflush_r+0x1c8>
  8049bc:	01000584 	movi	r4,22
  8049c0:	19000426 	beq	r3,r4,8049d4 <__sflush_r+0x1c8>
  8049c4:	88c0030b 	ldhu	r3,12(r17)
  8049c8:	18c01014 	ori	r3,r3,64
  8049cc:	88c0030d 	sth	r3,12(r17)
  8049d0:	003fc306 	br	8048e0 <__alt_data_end+0xff8048e0>
  8049d4:	8880030b 	ldhu	r2,12(r17)
  8049d8:	88c00417 	ldw	r3,16(r17)
  8049dc:	88000115 	stw	zero,4(r17)
  8049e0:	10bdffcc 	andi	r2,r2,63487
  8049e4:	8880030d 	sth	r2,12(r17)
  8049e8:	88c00015 	stw	r3,0(r17)
  8049ec:	003fb306 	br	8048bc <__alt_data_end+0xff8048bc>
  8049f0:	98800017 	ldw	r2,0(r19)
  8049f4:	103fea26 	beq	r2,zero,8049a0 <__alt_data_end+0xff8049a0>
  8049f8:	00c00744 	movi	r3,29
  8049fc:	10c00226 	beq	r2,r3,804a08 <__sflush_r+0x1fc>
  804a00:	00c00584 	movi	r3,22
  804a04:	10c0031e 	bne	r2,r3,804a14 <__sflush_r+0x208>
  804a08:	9c000015 	stw	r16,0(r19)
  804a0c:	0005883a 	mov	r2,zero
  804a10:	003fb306 	br	8048e0 <__alt_data_end+0xff8048e0>
  804a14:	88c0030b 	ldhu	r3,12(r17)
  804a18:	3005883a 	mov	r2,r6
  804a1c:	18c01014 	ori	r3,r3,64
  804a20:	88c0030d 	sth	r3,12(r17)
  804a24:	003fae06 	br	8048e0 <__alt_data_end+0xff8048e0>

00804a28 <_fflush_r>:
  804a28:	defffd04 	addi	sp,sp,-12
  804a2c:	dc000115 	stw	r16,4(sp)
  804a30:	dfc00215 	stw	ra,8(sp)
  804a34:	2021883a 	mov	r16,r4
  804a38:	20000226 	beq	r4,zero,804a44 <_fflush_r+0x1c>
  804a3c:	20800e17 	ldw	r2,56(r4)
  804a40:	10000c26 	beq	r2,zero,804a74 <_fflush_r+0x4c>
  804a44:	2880030f 	ldh	r2,12(r5)
  804a48:	1000051e 	bne	r2,zero,804a60 <_fflush_r+0x38>
  804a4c:	0005883a 	mov	r2,zero
  804a50:	dfc00217 	ldw	ra,8(sp)
  804a54:	dc000117 	ldw	r16,4(sp)
  804a58:	dec00304 	addi	sp,sp,12
  804a5c:	f800283a 	ret
  804a60:	8009883a 	mov	r4,r16
  804a64:	dfc00217 	ldw	ra,8(sp)
  804a68:	dc000117 	ldw	r16,4(sp)
  804a6c:	dec00304 	addi	sp,sp,12
  804a70:	080480c1 	jmpi	80480c <__sflush_r>
  804a74:	d9400015 	stw	r5,0(sp)
  804a78:	0804e040 	call	804e04 <__sinit>
  804a7c:	d9400017 	ldw	r5,0(sp)
  804a80:	003ff006 	br	804a44 <__alt_data_end+0xff804a44>

00804a84 <fflush>:
  804a84:	20000526 	beq	r4,zero,804a9c <fflush+0x18>
  804a88:	00802074 	movhi	r2,129
  804a8c:	10a28404 	addi	r2,r2,-30192
  804a90:	200b883a 	mov	r5,r4
  804a94:	11000017 	ldw	r4,0(r2)
  804a98:	0804a281 	jmpi	804a28 <_fflush_r>
  804a9c:	00802074 	movhi	r2,129
  804aa0:	10a28304 	addi	r2,r2,-30196
  804aa4:	11000017 	ldw	r4,0(r2)
  804aa8:	01402034 	movhi	r5,128
  804aac:	29528a04 	addi	r5,r5,18984
  804ab0:	080534c1 	jmpi	80534c <_fwalk_reent>

00804ab4 <__fp_unlock>:
  804ab4:	0005883a 	mov	r2,zero
  804ab8:	f800283a 	ret

00804abc <_cleanup_r>:
  804abc:	01402034 	movhi	r5,128
  804ac0:	29580704 	addi	r5,r5,24604
  804ac4:	080534c1 	jmpi	80534c <_fwalk_reent>

00804ac8 <__sinit.part.1>:
  804ac8:	defff704 	addi	sp,sp,-36
  804acc:	00c02034 	movhi	r3,128
  804ad0:	dfc00815 	stw	ra,32(sp)
  804ad4:	ddc00715 	stw	r23,28(sp)
  804ad8:	dd800615 	stw	r22,24(sp)
  804adc:	dd400515 	stw	r21,20(sp)
  804ae0:	dd000415 	stw	r20,16(sp)
  804ae4:	dcc00315 	stw	r19,12(sp)
  804ae8:	dc800215 	stw	r18,8(sp)
  804aec:	dc400115 	stw	r17,4(sp)
  804af0:	dc000015 	stw	r16,0(sp)
  804af4:	18d2af04 	addi	r3,r3,19132
  804af8:	24000117 	ldw	r16,4(r4)
  804afc:	20c00f15 	stw	r3,60(r4)
  804b00:	2080bb04 	addi	r2,r4,748
  804b04:	00c000c4 	movi	r3,3
  804b08:	20c0b915 	stw	r3,740(r4)
  804b0c:	2080ba15 	stw	r2,744(r4)
  804b10:	2000b815 	stw	zero,736(r4)
  804b14:	05c00204 	movi	r23,8
  804b18:	00800104 	movi	r2,4
  804b1c:	2025883a 	mov	r18,r4
  804b20:	b80d883a 	mov	r6,r23
  804b24:	81001704 	addi	r4,r16,92
  804b28:	000b883a 	mov	r5,zero
  804b2c:	80000015 	stw	zero,0(r16)
  804b30:	80000115 	stw	zero,4(r16)
  804b34:	80000215 	stw	zero,8(r16)
  804b38:	8080030d 	sth	r2,12(r16)
  804b3c:	80001915 	stw	zero,100(r16)
  804b40:	8000038d 	sth	zero,14(r16)
  804b44:	80000415 	stw	zero,16(r16)
  804b48:	80000515 	stw	zero,20(r16)
  804b4c:	80000615 	stw	zero,24(r16)
  804b50:	0803fa00 	call	803fa0 <memset>
  804b54:	05802034 	movhi	r22,128
  804b58:	94400217 	ldw	r17,8(r18)
  804b5c:	05402034 	movhi	r21,128
  804b60:	05002034 	movhi	r20,128
  804b64:	04c02034 	movhi	r19,128
  804b68:	b5978b04 	addi	r22,r22,24108
  804b6c:	ad57a204 	addi	r21,r21,24200
  804b70:	a517c104 	addi	r20,r20,24324
  804b74:	9cd7d804 	addi	r19,r19,24416
  804b78:	85800815 	stw	r22,32(r16)
  804b7c:	85400915 	stw	r21,36(r16)
  804b80:	85000a15 	stw	r20,40(r16)
  804b84:	84c00b15 	stw	r19,44(r16)
  804b88:	84000715 	stw	r16,28(r16)
  804b8c:	00800284 	movi	r2,10
  804b90:	8880030d 	sth	r2,12(r17)
  804b94:	00800044 	movi	r2,1
  804b98:	b80d883a 	mov	r6,r23
  804b9c:	89001704 	addi	r4,r17,92
  804ba0:	000b883a 	mov	r5,zero
  804ba4:	88000015 	stw	zero,0(r17)
  804ba8:	88000115 	stw	zero,4(r17)
  804bac:	88000215 	stw	zero,8(r17)
  804bb0:	88001915 	stw	zero,100(r17)
  804bb4:	8880038d 	sth	r2,14(r17)
  804bb8:	88000415 	stw	zero,16(r17)
  804bbc:	88000515 	stw	zero,20(r17)
  804bc0:	88000615 	stw	zero,24(r17)
  804bc4:	0803fa00 	call	803fa0 <memset>
  804bc8:	94000317 	ldw	r16,12(r18)
  804bcc:	00800484 	movi	r2,18
  804bd0:	8c400715 	stw	r17,28(r17)
  804bd4:	8d800815 	stw	r22,32(r17)
  804bd8:	8d400915 	stw	r21,36(r17)
  804bdc:	8d000a15 	stw	r20,40(r17)
  804be0:	8cc00b15 	stw	r19,44(r17)
  804be4:	8080030d 	sth	r2,12(r16)
  804be8:	00800084 	movi	r2,2
  804bec:	80000015 	stw	zero,0(r16)
  804bf0:	80000115 	stw	zero,4(r16)
  804bf4:	80000215 	stw	zero,8(r16)
  804bf8:	80001915 	stw	zero,100(r16)
  804bfc:	8080038d 	sth	r2,14(r16)
  804c00:	80000415 	stw	zero,16(r16)
  804c04:	80000515 	stw	zero,20(r16)
  804c08:	80000615 	stw	zero,24(r16)
  804c0c:	b80d883a 	mov	r6,r23
  804c10:	000b883a 	mov	r5,zero
  804c14:	81001704 	addi	r4,r16,92
  804c18:	0803fa00 	call	803fa0 <memset>
  804c1c:	00800044 	movi	r2,1
  804c20:	84000715 	stw	r16,28(r16)
  804c24:	85800815 	stw	r22,32(r16)
  804c28:	85400915 	stw	r21,36(r16)
  804c2c:	85000a15 	stw	r20,40(r16)
  804c30:	84c00b15 	stw	r19,44(r16)
  804c34:	90800e15 	stw	r2,56(r18)
  804c38:	dfc00817 	ldw	ra,32(sp)
  804c3c:	ddc00717 	ldw	r23,28(sp)
  804c40:	dd800617 	ldw	r22,24(sp)
  804c44:	dd400517 	ldw	r21,20(sp)
  804c48:	dd000417 	ldw	r20,16(sp)
  804c4c:	dcc00317 	ldw	r19,12(sp)
  804c50:	dc800217 	ldw	r18,8(sp)
  804c54:	dc400117 	ldw	r17,4(sp)
  804c58:	dc000017 	ldw	r16,0(sp)
  804c5c:	dec00904 	addi	sp,sp,36
  804c60:	f800283a 	ret

00804c64 <__fp_lock>:
  804c64:	0005883a 	mov	r2,zero
  804c68:	f800283a 	ret

00804c6c <__sfmoreglue>:
  804c6c:	defffc04 	addi	sp,sp,-16
  804c70:	dc400115 	stw	r17,4(sp)
  804c74:	2c7fffc4 	addi	r17,r5,-1
  804c78:	8c401a24 	muli	r17,r17,104
  804c7c:	dc800215 	stw	r18,8(sp)
  804c80:	2825883a 	mov	r18,r5
  804c84:	89401d04 	addi	r5,r17,116
  804c88:	dc000015 	stw	r16,0(sp)
  804c8c:	dfc00315 	stw	ra,12(sp)
  804c90:	08055cc0 	call	8055cc <_malloc_r>
  804c94:	1021883a 	mov	r16,r2
  804c98:	10000726 	beq	r2,zero,804cb8 <__sfmoreglue+0x4c>
  804c9c:	11000304 	addi	r4,r2,12
  804ca0:	10000015 	stw	zero,0(r2)
  804ca4:	14800115 	stw	r18,4(r2)
  804ca8:	11000215 	stw	r4,8(r2)
  804cac:	89801a04 	addi	r6,r17,104
  804cb0:	000b883a 	mov	r5,zero
  804cb4:	0803fa00 	call	803fa0 <memset>
  804cb8:	8005883a 	mov	r2,r16
  804cbc:	dfc00317 	ldw	ra,12(sp)
  804cc0:	dc800217 	ldw	r18,8(sp)
  804cc4:	dc400117 	ldw	r17,4(sp)
  804cc8:	dc000017 	ldw	r16,0(sp)
  804ccc:	dec00404 	addi	sp,sp,16
  804cd0:	f800283a 	ret

00804cd4 <__sfp>:
  804cd4:	defffb04 	addi	sp,sp,-20
  804cd8:	dc000015 	stw	r16,0(sp)
  804cdc:	04002074 	movhi	r16,129
  804ce0:	84228304 	addi	r16,r16,-30196
  804ce4:	dcc00315 	stw	r19,12(sp)
  804ce8:	2027883a 	mov	r19,r4
  804cec:	81000017 	ldw	r4,0(r16)
  804cf0:	dfc00415 	stw	ra,16(sp)
  804cf4:	dc800215 	stw	r18,8(sp)
  804cf8:	20800e17 	ldw	r2,56(r4)
  804cfc:	dc400115 	stw	r17,4(sp)
  804d00:	1000021e 	bne	r2,zero,804d0c <__sfp+0x38>
  804d04:	0804ac80 	call	804ac8 <__sinit.part.1>
  804d08:	81000017 	ldw	r4,0(r16)
  804d0c:	2480b804 	addi	r18,r4,736
  804d10:	047fffc4 	movi	r17,-1
  804d14:	91000117 	ldw	r4,4(r18)
  804d18:	94000217 	ldw	r16,8(r18)
  804d1c:	213fffc4 	addi	r4,r4,-1
  804d20:	20000a16 	blt	r4,zero,804d4c <__sfp+0x78>
  804d24:	8080030f 	ldh	r2,12(r16)
  804d28:	10000c26 	beq	r2,zero,804d5c <__sfp+0x88>
  804d2c:	80c01d04 	addi	r3,r16,116
  804d30:	00000206 	br	804d3c <__sfp+0x68>
  804d34:	18bfe60f 	ldh	r2,-104(r3)
  804d38:	10000826 	beq	r2,zero,804d5c <__sfp+0x88>
  804d3c:	213fffc4 	addi	r4,r4,-1
  804d40:	1c3ffd04 	addi	r16,r3,-12
  804d44:	18c01a04 	addi	r3,r3,104
  804d48:	247ffa1e 	bne	r4,r17,804d34 <__alt_data_end+0xff804d34>
  804d4c:	90800017 	ldw	r2,0(r18)
  804d50:	10001d26 	beq	r2,zero,804dc8 <__sfp+0xf4>
  804d54:	1025883a 	mov	r18,r2
  804d58:	003fee06 	br	804d14 <__alt_data_end+0xff804d14>
  804d5c:	00bfffc4 	movi	r2,-1
  804d60:	8080038d 	sth	r2,14(r16)
  804d64:	00800044 	movi	r2,1
  804d68:	8080030d 	sth	r2,12(r16)
  804d6c:	80001915 	stw	zero,100(r16)
  804d70:	80000015 	stw	zero,0(r16)
  804d74:	80000215 	stw	zero,8(r16)
  804d78:	80000115 	stw	zero,4(r16)
  804d7c:	80000415 	stw	zero,16(r16)
  804d80:	80000515 	stw	zero,20(r16)
  804d84:	80000615 	stw	zero,24(r16)
  804d88:	01800204 	movi	r6,8
  804d8c:	000b883a 	mov	r5,zero
  804d90:	81001704 	addi	r4,r16,92
  804d94:	0803fa00 	call	803fa0 <memset>
  804d98:	8005883a 	mov	r2,r16
  804d9c:	80000c15 	stw	zero,48(r16)
  804da0:	80000d15 	stw	zero,52(r16)
  804da4:	80001115 	stw	zero,68(r16)
  804da8:	80001215 	stw	zero,72(r16)
  804dac:	dfc00417 	ldw	ra,16(sp)
  804db0:	dcc00317 	ldw	r19,12(sp)
  804db4:	dc800217 	ldw	r18,8(sp)
  804db8:	dc400117 	ldw	r17,4(sp)
  804dbc:	dc000017 	ldw	r16,0(sp)
  804dc0:	dec00504 	addi	sp,sp,20
  804dc4:	f800283a 	ret
  804dc8:	01400104 	movi	r5,4
  804dcc:	9809883a 	mov	r4,r19
  804dd0:	0804c6c0 	call	804c6c <__sfmoreglue>
  804dd4:	90800015 	stw	r2,0(r18)
  804dd8:	103fde1e 	bne	r2,zero,804d54 <__alt_data_end+0xff804d54>
  804ddc:	00800304 	movi	r2,12
  804de0:	98800015 	stw	r2,0(r19)
  804de4:	0005883a 	mov	r2,zero
  804de8:	003ff006 	br	804dac <__alt_data_end+0xff804dac>

00804dec <_cleanup>:
  804dec:	00802074 	movhi	r2,129
  804df0:	10a28304 	addi	r2,r2,-30196
  804df4:	11000017 	ldw	r4,0(r2)
  804df8:	01402034 	movhi	r5,128
  804dfc:	29580704 	addi	r5,r5,24604
  804e00:	080534c1 	jmpi	80534c <_fwalk_reent>

00804e04 <__sinit>:
  804e04:	20800e17 	ldw	r2,56(r4)
  804e08:	10000126 	beq	r2,zero,804e10 <__sinit+0xc>
  804e0c:	f800283a 	ret
  804e10:	0804ac81 	jmpi	804ac8 <__sinit.part.1>

00804e14 <__sfp_lock_acquire>:
  804e14:	f800283a 	ret

00804e18 <__sfp_lock_release>:
  804e18:	f800283a 	ret

00804e1c <__sinit_lock_acquire>:
  804e1c:	f800283a 	ret

00804e20 <__sinit_lock_release>:
  804e20:	f800283a 	ret

00804e24 <__fp_lock_all>:
  804e24:	00802074 	movhi	r2,129
  804e28:	10a28404 	addi	r2,r2,-30192
  804e2c:	11000017 	ldw	r4,0(r2)
  804e30:	01402034 	movhi	r5,128
  804e34:	29531904 	addi	r5,r5,19556
  804e38:	08052881 	jmpi	805288 <_fwalk>

00804e3c <__fp_unlock_all>:
  804e3c:	00802074 	movhi	r2,129
  804e40:	10a28404 	addi	r2,r2,-30192
  804e44:	11000017 	ldw	r4,0(r2)
  804e48:	01402034 	movhi	r5,128
  804e4c:	2952ad04 	addi	r5,r5,19124
  804e50:	08052881 	jmpi	805288 <_fwalk>

00804e54 <_malloc_trim_r>:
  804e54:	defffb04 	addi	sp,sp,-20
  804e58:	dcc00315 	stw	r19,12(sp)
  804e5c:	04c02074 	movhi	r19,129
  804e60:	dc800215 	stw	r18,8(sp)
  804e64:	dc400115 	stw	r17,4(sp)
  804e68:	dc000015 	stw	r16,0(sp)
  804e6c:	dfc00415 	stw	ra,16(sp)
  804e70:	2821883a 	mov	r16,r5
  804e74:	9ce17604 	addi	r19,r19,-31272
  804e78:	2025883a 	mov	r18,r4
  804e7c:	08067540 	call	806754 <__malloc_lock>
  804e80:	98800217 	ldw	r2,8(r19)
  804e84:	14400117 	ldw	r17,4(r2)
  804e88:	00bfff04 	movi	r2,-4
  804e8c:	88a2703a 	and	r17,r17,r2
  804e90:	8c21c83a 	sub	r16,r17,r16
  804e94:	8403fbc4 	addi	r16,r16,4079
  804e98:	8020d33a 	srli	r16,r16,12
  804e9c:	0083ffc4 	movi	r2,4095
  804ea0:	843fffc4 	addi	r16,r16,-1
  804ea4:	8020933a 	slli	r16,r16,12
  804ea8:	1400060e 	bge	r2,r16,804ec4 <_malloc_trim_r+0x70>
  804eac:	000b883a 	mov	r5,zero
  804eb0:	9009883a 	mov	r4,r18
  804eb4:	0805dd80 	call	805dd8 <_sbrk_r>
  804eb8:	98c00217 	ldw	r3,8(r19)
  804ebc:	1c47883a 	add	r3,r3,r17
  804ec0:	10c00a26 	beq	r2,r3,804eec <_malloc_trim_r+0x98>
  804ec4:	9009883a 	mov	r4,r18
  804ec8:	08067780 	call	806778 <__malloc_unlock>
  804ecc:	0005883a 	mov	r2,zero
  804ed0:	dfc00417 	ldw	ra,16(sp)
  804ed4:	dcc00317 	ldw	r19,12(sp)
  804ed8:	dc800217 	ldw	r18,8(sp)
  804edc:	dc400117 	ldw	r17,4(sp)
  804ee0:	dc000017 	ldw	r16,0(sp)
  804ee4:	dec00504 	addi	sp,sp,20
  804ee8:	f800283a 	ret
  804eec:	040bc83a 	sub	r5,zero,r16
  804ef0:	9009883a 	mov	r4,r18
  804ef4:	0805dd80 	call	805dd8 <_sbrk_r>
  804ef8:	00ffffc4 	movi	r3,-1
  804efc:	10c00d26 	beq	r2,r3,804f34 <_malloc_trim_r+0xe0>
  804f00:	00c02074 	movhi	r3,129
  804f04:	18e99b04 	addi	r3,r3,-22932
  804f08:	18800017 	ldw	r2,0(r3)
  804f0c:	99000217 	ldw	r4,8(r19)
  804f10:	8c23c83a 	sub	r17,r17,r16
  804f14:	8c400054 	ori	r17,r17,1
  804f18:	1421c83a 	sub	r16,r2,r16
  804f1c:	24400115 	stw	r17,4(r4)
  804f20:	9009883a 	mov	r4,r18
  804f24:	1c000015 	stw	r16,0(r3)
  804f28:	08067780 	call	806778 <__malloc_unlock>
  804f2c:	00800044 	movi	r2,1
  804f30:	003fe706 	br	804ed0 <__alt_data_end+0xff804ed0>
  804f34:	000b883a 	mov	r5,zero
  804f38:	9009883a 	mov	r4,r18
  804f3c:	0805dd80 	call	805dd8 <_sbrk_r>
  804f40:	99000217 	ldw	r4,8(r19)
  804f44:	014003c4 	movi	r5,15
  804f48:	1107c83a 	sub	r3,r2,r4
  804f4c:	28ffdd0e 	bge	r5,r3,804ec4 <__alt_data_end+0xff804ec4>
  804f50:	01402074 	movhi	r5,129
  804f54:	29628504 	addi	r5,r5,-30188
  804f58:	29400017 	ldw	r5,0(r5)
  804f5c:	18c00054 	ori	r3,r3,1
  804f60:	20c00115 	stw	r3,4(r4)
  804f64:	00c02074 	movhi	r3,129
  804f68:	1145c83a 	sub	r2,r2,r5
  804f6c:	18e99b04 	addi	r3,r3,-22932
  804f70:	18800015 	stw	r2,0(r3)
  804f74:	003fd306 	br	804ec4 <__alt_data_end+0xff804ec4>

00804f78 <_free_r>:
  804f78:	28004126 	beq	r5,zero,805080 <_free_r+0x108>
  804f7c:	defffd04 	addi	sp,sp,-12
  804f80:	dc400115 	stw	r17,4(sp)
  804f84:	dc000015 	stw	r16,0(sp)
  804f88:	2023883a 	mov	r17,r4
  804f8c:	2821883a 	mov	r16,r5
  804f90:	dfc00215 	stw	ra,8(sp)
  804f94:	08067540 	call	806754 <__malloc_lock>
  804f98:	81ffff17 	ldw	r7,-4(r16)
  804f9c:	00bfff84 	movi	r2,-2
  804fa0:	01002074 	movhi	r4,129
  804fa4:	81bffe04 	addi	r6,r16,-8
  804fa8:	3884703a 	and	r2,r7,r2
  804fac:	21217604 	addi	r4,r4,-31272
  804fb0:	308b883a 	add	r5,r6,r2
  804fb4:	2a400117 	ldw	r9,4(r5)
  804fb8:	22000217 	ldw	r8,8(r4)
  804fbc:	00ffff04 	movi	r3,-4
  804fc0:	48c6703a 	and	r3,r9,r3
  804fc4:	2a005726 	beq	r5,r8,805124 <_free_r+0x1ac>
  804fc8:	28c00115 	stw	r3,4(r5)
  804fcc:	39c0004c 	andi	r7,r7,1
  804fd0:	3800091e 	bne	r7,zero,804ff8 <_free_r+0x80>
  804fd4:	823ffe17 	ldw	r8,-8(r16)
  804fd8:	22400204 	addi	r9,r4,8
  804fdc:	320dc83a 	sub	r6,r6,r8
  804fe0:	31c00217 	ldw	r7,8(r6)
  804fe4:	1205883a 	add	r2,r2,r8
  804fe8:	3a406526 	beq	r7,r9,805180 <_free_r+0x208>
  804fec:	32000317 	ldw	r8,12(r6)
  804ff0:	3a000315 	stw	r8,12(r7)
  804ff4:	41c00215 	stw	r7,8(r8)
  804ff8:	28cf883a 	add	r7,r5,r3
  804ffc:	39c00117 	ldw	r7,4(r7)
  805000:	39c0004c 	andi	r7,r7,1
  805004:	38003a26 	beq	r7,zero,8050f0 <_free_r+0x178>
  805008:	10c00054 	ori	r3,r2,1
  80500c:	30c00115 	stw	r3,4(r6)
  805010:	3087883a 	add	r3,r6,r2
  805014:	18800015 	stw	r2,0(r3)
  805018:	00c07fc4 	movi	r3,511
  80501c:	18801936 	bltu	r3,r2,805084 <_free_r+0x10c>
  805020:	1004d0fa 	srli	r2,r2,3
  805024:	01c00044 	movi	r7,1
  805028:	21400117 	ldw	r5,4(r4)
  80502c:	10c00044 	addi	r3,r2,1
  805030:	18c7883a 	add	r3,r3,r3
  805034:	1005d0ba 	srai	r2,r2,2
  805038:	18c7883a 	add	r3,r3,r3
  80503c:	18c7883a 	add	r3,r3,r3
  805040:	1907883a 	add	r3,r3,r4
  805044:	3884983a 	sll	r2,r7,r2
  805048:	19c00017 	ldw	r7,0(r3)
  80504c:	1a3ffe04 	addi	r8,r3,-8
  805050:	1144b03a 	or	r2,r2,r5
  805054:	32000315 	stw	r8,12(r6)
  805058:	31c00215 	stw	r7,8(r6)
  80505c:	20800115 	stw	r2,4(r4)
  805060:	19800015 	stw	r6,0(r3)
  805064:	39800315 	stw	r6,12(r7)
  805068:	8809883a 	mov	r4,r17
  80506c:	dfc00217 	ldw	ra,8(sp)
  805070:	dc400117 	ldw	r17,4(sp)
  805074:	dc000017 	ldw	r16,0(sp)
  805078:	dec00304 	addi	sp,sp,12
  80507c:	08067781 	jmpi	806778 <__malloc_unlock>
  805080:	f800283a 	ret
  805084:	100ad27a 	srli	r5,r2,9
  805088:	00c00104 	movi	r3,4
  80508c:	19404a36 	bltu	r3,r5,8051b8 <_free_r+0x240>
  805090:	100ad1ba 	srli	r5,r2,6
  805094:	28c00e44 	addi	r3,r5,57
  805098:	18c7883a 	add	r3,r3,r3
  80509c:	29400e04 	addi	r5,r5,56
  8050a0:	18c7883a 	add	r3,r3,r3
  8050a4:	18c7883a 	add	r3,r3,r3
  8050a8:	1909883a 	add	r4,r3,r4
  8050ac:	20c00017 	ldw	r3,0(r4)
  8050b0:	01c02074 	movhi	r7,129
  8050b4:	213ffe04 	addi	r4,r4,-8
  8050b8:	39e17604 	addi	r7,r7,-31272
  8050bc:	20c04426 	beq	r4,r3,8051d0 <_free_r+0x258>
  8050c0:	01ffff04 	movi	r7,-4
  8050c4:	19400117 	ldw	r5,4(r3)
  8050c8:	29ca703a 	and	r5,r5,r7
  8050cc:	1140022e 	bgeu	r2,r5,8050d8 <_free_r+0x160>
  8050d0:	18c00217 	ldw	r3,8(r3)
  8050d4:	20fffb1e 	bne	r4,r3,8050c4 <__alt_data_end+0xff8050c4>
  8050d8:	19000317 	ldw	r4,12(r3)
  8050dc:	31000315 	stw	r4,12(r6)
  8050e0:	30c00215 	stw	r3,8(r6)
  8050e4:	21800215 	stw	r6,8(r4)
  8050e8:	19800315 	stw	r6,12(r3)
  8050ec:	003fde06 	br	805068 <__alt_data_end+0xff805068>
  8050f0:	29c00217 	ldw	r7,8(r5)
  8050f4:	10c5883a 	add	r2,r2,r3
  8050f8:	00c02074 	movhi	r3,129
  8050fc:	18e17804 	addi	r3,r3,-31264
  805100:	38c03b26 	beq	r7,r3,8051f0 <_free_r+0x278>
  805104:	2a000317 	ldw	r8,12(r5)
  805108:	11400054 	ori	r5,r2,1
  80510c:	3087883a 	add	r3,r6,r2
  805110:	3a000315 	stw	r8,12(r7)
  805114:	41c00215 	stw	r7,8(r8)
  805118:	31400115 	stw	r5,4(r6)
  80511c:	18800015 	stw	r2,0(r3)
  805120:	003fbd06 	br	805018 <__alt_data_end+0xff805018>
  805124:	39c0004c 	andi	r7,r7,1
  805128:	10c5883a 	add	r2,r2,r3
  80512c:	3800071e 	bne	r7,zero,80514c <_free_r+0x1d4>
  805130:	81fffe17 	ldw	r7,-8(r16)
  805134:	31cdc83a 	sub	r6,r6,r7
  805138:	30c00317 	ldw	r3,12(r6)
  80513c:	31400217 	ldw	r5,8(r6)
  805140:	11c5883a 	add	r2,r2,r7
  805144:	28c00315 	stw	r3,12(r5)
  805148:	19400215 	stw	r5,8(r3)
  80514c:	10c00054 	ori	r3,r2,1
  805150:	30c00115 	stw	r3,4(r6)
  805154:	00c02074 	movhi	r3,129
  805158:	18e28604 	addi	r3,r3,-30184
  80515c:	18c00017 	ldw	r3,0(r3)
  805160:	21800215 	stw	r6,8(r4)
  805164:	10ffc036 	bltu	r2,r3,805068 <__alt_data_end+0xff805068>
  805168:	00802074 	movhi	r2,129
  80516c:	10a99a04 	addi	r2,r2,-22936
  805170:	11400017 	ldw	r5,0(r2)
  805174:	8809883a 	mov	r4,r17
  805178:	0804e540 	call	804e54 <_malloc_trim_r>
  80517c:	003fba06 	br	805068 <__alt_data_end+0xff805068>
  805180:	28c9883a 	add	r4,r5,r3
  805184:	21000117 	ldw	r4,4(r4)
  805188:	2100004c 	andi	r4,r4,1
  80518c:	2000391e 	bne	r4,zero,805274 <_free_r+0x2fc>
  805190:	29c00217 	ldw	r7,8(r5)
  805194:	29000317 	ldw	r4,12(r5)
  805198:	1885883a 	add	r2,r3,r2
  80519c:	10c00054 	ori	r3,r2,1
  8051a0:	39000315 	stw	r4,12(r7)
  8051a4:	21c00215 	stw	r7,8(r4)
  8051a8:	30c00115 	stw	r3,4(r6)
  8051ac:	308d883a 	add	r6,r6,r2
  8051b0:	30800015 	stw	r2,0(r6)
  8051b4:	003fac06 	br	805068 <__alt_data_end+0xff805068>
  8051b8:	00c00504 	movi	r3,20
  8051bc:	19401536 	bltu	r3,r5,805214 <_free_r+0x29c>
  8051c0:	28c01704 	addi	r3,r5,92
  8051c4:	18c7883a 	add	r3,r3,r3
  8051c8:	294016c4 	addi	r5,r5,91
  8051cc:	003fb406 	br	8050a0 <__alt_data_end+0xff8050a0>
  8051d0:	280bd0ba 	srai	r5,r5,2
  8051d4:	00c00044 	movi	r3,1
  8051d8:	38800117 	ldw	r2,4(r7)
  8051dc:	194a983a 	sll	r5,r3,r5
  8051e0:	2007883a 	mov	r3,r4
  8051e4:	2884b03a 	or	r2,r5,r2
  8051e8:	38800115 	stw	r2,4(r7)
  8051ec:	003fbb06 	br	8050dc <__alt_data_end+0xff8050dc>
  8051f0:	21800515 	stw	r6,20(r4)
  8051f4:	21800415 	stw	r6,16(r4)
  8051f8:	10c00054 	ori	r3,r2,1
  8051fc:	31c00315 	stw	r7,12(r6)
  805200:	31c00215 	stw	r7,8(r6)
  805204:	30c00115 	stw	r3,4(r6)
  805208:	308d883a 	add	r6,r6,r2
  80520c:	30800015 	stw	r2,0(r6)
  805210:	003f9506 	br	805068 <__alt_data_end+0xff805068>
  805214:	00c01504 	movi	r3,84
  805218:	19400536 	bltu	r3,r5,805230 <_free_r+0x2b8>
  80521c:	100ad33a 	srli	r5,r2,12
  805220:	28c01bc4 	addi	r3,r5,111
  805224:	18c7883a 	add	r3,r3,r3
  805228:	29401b84 	addi	r5,r5,110
  80522c:	003f9c06 	br	8050a0 <__alt_data_end+0xff8050a0>
  805230:	00c05504 	movi	r3,340
  805234:	19400536 	bltu	r3,r5,80524c <_free_r+0x2d4>
  805238:	100ad3fa 	srli	r5,r2,15
  80523c:	28c01e04 	addi	r3,r5,120
  805240:	18c7883a 	add	r3,r3,r3
  805244:	29401dc4 	addi	r5,r5,119
  805248:	003f9506 	br	8050a0 <__alt_data_end+0xff8050a0>
  80524c:	00c15504 	movi	r3,1364
  805250:	19400536 	bltu	r3,r5,805268 <_free_r+0x2f0>
  805254:	100ad4ba 	srli	r5,r2,18
  805258:	28c01f44 	addi	r3,r5,125
  80525c:	18c7883a 	add	r3,r3,r3
  805260:	29401f04 	addi	r5,r5,124
  805264:	003f8e06 	br	8050a0 <__alt_data_end+0xff8050a0>
  805268:	00c03f84 	movi	r3,254
  80526c:	01401f84 	movi	r5,126
  805270:	003f8b06 	br	8050a0 <__alt_data_end+0xff8050a0>
  805274:	10c00054 	ori	r3,r2,1
  805278:	30c00115 	stw	r3,4(r6)
  80527c:	308d883a 	add	r6,r6,r2
  805280:	30800015 	stw	r2,0(r6)
  805284:	003f7806 	br	805068 <__alt_data_end+0xff805068>

00805288 <_fwalk>:
  805288:	defff704 	addi	sp,sp,-36
  80528c:	dd000415 	stw	r20,16(sp)
  805290:	dfc00815 	stw	ra,32(sp)
  805294:	ddc00715 	stw	r23,28(sp)
  805298:	dd800615 	stw	r22,24(sp)
  80529c:	dd400515 	stw	r21,20(sp)
  8052a0:	dcc00315 	stw	r19,12(sp)
  8052a4:	dc800215 	stw	r18,8(sp)
  8052a8:	dc400115 	stw	r17,4(sp)
  8052ac:	dc000015 	stw	r16,0(sp)
  8052b0:	2500b804 	addi	r20,r4,736
  8052b4:	a0002326 	beq	r20,zero,805344 <_fwalk+0xbc>
  8052b8:	282b883a 	mov	r21,r5
  8052bc:	002f883a 	mov	r23,zero
  8052c0:	05800044 	movi	r22,1
  8052c4:	04ffffc4 	movi	r19,-1
  8052c8:	a4400117 	ldw	r17,4(r20)
  8052cc:	a4800217 	ldw	r18,8(r20)
  8052d0:	8c7fffc4 	addi	r17,r17,-1
  8052d4:	88000d16 	blt	r17,zero,80530c <_fwalk+0x84>
  8052d8:	94000304 	addi	r16,r18,12
  8052dc:	94800384 	addi	r18,r18,14
  8052e0:	8080000b 	ldhu	r2,0(r16)
  8052e4:	8c7fffc4 	addi	r17,r17,-1
  8052e8:	813ffd04 	addi	r4,r16,-12
  8052ec:	b080042e 	bgeu	r22,r2,805300 <_fwalk+0x78>
  8052f0:	9080000f 	ldh	r2,0(r18)
  8052f4:	14c00226 	beq	r2,r19,805300 <_fwalk+0x78>
  8052f8:	a83ee83a 	callr	r21
  8052fc:	b8aeb03a 	or	r23,r23,r2
  805300:	84001a04 	addi	r16,r16,104
  805304:	94801a04 	addi	r18,r18,104
  805308:	8cfff51e 	bne	r17,r19,8052e0 <__alt_data_end+0xff8052e0>
  80530c:	a5000017 	ldw	r20,0(r20)
  805310:	a03fed1e 	bne	r20,zero,8052c8 <__alt_data_end+0xff8052c8>
  805314:	b805883a 	mov	r2,r23
  805318:	dfc00817 	ldw	ra,32(sp)
  80531c:	ddc00717 	ldw	r23,28(sp)
  805320:	dd800617 	ldw	r22,24(sp)
  805324:	dd400517 	ldw	r21,20(sp)
  805328:	dd000417 	ldw	r20,16(sp)
  80532c:	dcc00317 	ldw	r19,12(sp)
  805330:	dc800217 	ldw	r18,8(sp)
  805334:	dc400117 	ldw	r17,4(sp)
  805338:	dc000017 	ldw	r16,0(sp)
  80533c:	dec00904 	addi	sp,sp,36
  805340:	f800283a 	ret
  805344:	002f883a 	mov	r23,zero
  805348:	003ff206 	br	805314 <__alt_data_end+0xff805314>

0080534c <_fwalk_reent>:
  80534c:	defff704 	addi	sp,sp,-36
  805350:	dd000415 	stw	r20,16(sp)
  805354:	dfc00815 	stw	ra,32(sp)
  805358:	ddc00715 	stw	r23,28(sp)
  80535c:	dd800615 	stw	r22,24(sp)
  805360:	dd400515 	stw	r21,20(sp)
  805364:	dcc00315 	stw	r19,12(sp)
  805368:	dc800215 	stw	r18,8(sp)
  80536c:	dc400115 	stw	r17,4(sp)
  805370:	dc000015 	stw	r16,0(sp)
  805374:	2500b804 	addi	r20,r4,736
  805378:	a0002326 	beq	r20,zero,805408 <_fwalk_reent+0xbc>
  80537c:	282b883a 	mov	r21,r5
  805380:	2027883a 	mov	r19,r4
  805384:	002f883a 	mov	r23,zero
  805388:	05800044 	movi	r22,1
  80538c:	04bfffc4 	movi	r18,-1
  805390:	a4400117 	ldw	r17,4(r20)
  805394:	a4000217 	ldw	r16,8(r20)
  805398:	8c7fffc4 	addi	r17,r17,-1
  80539c:	88000c16 	blt	r17,zero,8053d0 <_fwalk_reent+0x84>
  8053a0:	84000304 	addi	r16,r16,12
  8053a4:	8080000b 	ldhu	r2,0(r16)
  8053a8:	8c7fffc4 	addi	r17,r17,-1
  8053ac:	817ffd04 	addi	r5,r16,-12
  8053b0:	b080052e 	bgeu	r22,r2,8053c8 <_fwalk_reent+0x7c>
  8053b4:	8080008f 	ldh	r2,2(r16)
  8053b8:	9809883a 	mov	r4,r19
  8053bc:	14800226 	beq	r2,r18,8053c8 <_fwalk_reent+0x7c>
  8053c0:	a83ee83a 	callr	r21
  8053c4:	b8aeb03a 	or	r23,r23,r2
  8053c8:	84001a04 	addi	r16,r16,104
  8053cc:	8cbff51e 	bne	r17,r18,8053a4 <__alt_data_end+0xff8053a4>
  8053d0:	a5000017 	ldw	r20,0(r20)
  8053d4:	a03fee1e 	bne	r20,zero,805390 <__alt_data_end+0xff805390>
  8053d8:	b805883a 	mov	r2,r23
  8053dc:	dfc00817 	ldw	ra,32(sp)
  8053e0:	ddc00717 	ldw	r23,28(sp)
  8053e4:	dd800617 	ldw	r22,24(sp)
  8053e8:	dd400517 	ldw	r21,20(sp)
  8053ec:	dd000417 	ldw	r20,16(sp)
  8053f0:	dcc00317 	ldw	r19,12(sp)
  8053f4:	dc800217 	ldw	r18,8(sp)
  8053f8:	dc400117 	ldw	r17,4(sp)
  8053fc:	dc000017 	ldw	r16,0(sp)
  805400:	dec00904 	addi	sp,sp,36
  805404:	f800283a 	ret
  805408:	002f883a 	mov	r23,zero
  80540c:	003ff206 	br	8053d8 <__alt_data_end+0xff8053d8>

00805410 <__smakebuf_r>:
  805410:	2880030b 	ldhu	r2,12(r5)
  805414:	10c0008c 	andi	r3,r2,2
  805418:	1800411e 	bne	r3,zero,805520 <__smakebuf_r+0x110>
  80541c:	deffec04 	addi	sp,sp,-80
  805420:	dc000f15 	stw	r16,60(sp)
  805424:	2821883a 	mov	r16,r5
  805428:	2940038f 	ldh	r5,14(r5)
  80542c:	dc401015 	stw	r17,64(sp)
  805430:	dfc01315 	stw	ra,76(sp)
  805434:	dcc01215 	stw	r19,72(sp)
  805438:	dc801115 	stw	r18,68(sp)
  80543c:	2023883a 	mov	r17,r4
  805440:	28001c16 	blt	r5,zero,8054b4 <__smakebuf_r+0xa4>
  805444:	d80d883a 	mov	r6,sp
  805448:	08061200 	call	806120 <_fstat_r>
  80544c:	10001816 	blt	r2,zero,8054b0 <__smakebuf_r+0xa0>
  805450:	d8800117 	ldw	r2,4(sp)
  805454:	00e00014 	movui	r3,32768
  805458:	10bc000c 	andi	r2,r2,61440
  80545c:	14c80020 	cmpeqi	r19,r2,8192
  805460:	10c03726 	beq	r2,r3,805540 <__smakebuf_r+0x130>
  805464:	80c0030b 	ldhu	r3,12(r16)
  805468:	18c20014 	ori	r3,r3,2048
  80546c:	80c0030d 	sth	r3,12(r16)
  805470:	00c80004 	movi	r3,8192
  805474:	10c0521e 	bne	r2,r3,8055c0 <__smakebuf_r+0x1b0>
  805478:	8140038f 	ldh	r5,14(r16)
  80547c:	8809883a 	mov	r4,r17
  805480:	080617c0 	call	80617c <_isatty_r>
  805484:	10004c26 	beq	r2,zero,8055b8 <__smakebuf_r+0x1a8>
  805488:	8080030b 	ldhu	r2,12(r16)
  80548c:	80c010c4 	addi	r3,r16,67
  805490:	80c00015 	stw	r3,0(r16)
  805494:	10800054 	ori	r2,r2,1
  805498:	8080030d 	sth	r2,12(r16)
  80549c:	00800044 	movi	r2,1
  8054a0:	80c00415 	stw	r3,16(r16)
  8054a4:	80800515 	stw	r2,20(r16)
  8054a8:	04810004 	movi	r18,1024
  8054ac:	00000706 	br	8054cc <__smakebuf_r+0xbc>
  8054b0:	8080030b 	ldhu	r2,12(r16)
  8054b4:	10c0200c 	andi	r3,r2,128
  8054b8:	18001f1e 	bne	r3,zero,805538 <__smakebuf_r+0x128>
  8054bc:	04810004 	movi	r18,1024
  8054c0:	10820014 	ori	r2,r2,2048
  8054c4:	8080030d 	sth	r2,12(r16)
  8054c8:	0027883a 	mov	r19,zero
  8054cc:	900b883a 	mov	r5,r18
  8054d0:	8809883a 	mov	r4,r17
  8054d4:	08055cc0 	call	8055cc <_malloc_r>
  8054d8:	10002c26 	beq	r2,zero,80558c <__smakebuf_r+0x17c>
  8054dc:	80c0030b 	ldhu	r3,12(r16)
  8054e0:	01002034 	movhi	r4,128
  8054e4:	2112af04 	addi	r4,r4,19132
  8054e8:	89000f15 	stw	r4,60(r17)
  8054ec:	18c02014 	ori	r3,r3,128
  8054f0:	80c0030d 	sth	r3,12(r16)
  8054f4:	80800015 	stw	r2,0(r16)
  8054f8:	80800415 	stw	r2,16(r16)
  8054fc:	84800515 	stw	r18,20(r16)
  805500:	98001a1e 	bne	r19,zero,80556c <__smakebuf_r+0x15c>
  805504:	dfc01317 	ldw	ra,76(sp)
  805508:	dcc01217 	ldw	r19,72(sp)
  80550c:	dc801117 	ldw	r18,68(sp)
  805510:	dc401017 	ldw	r17,64(sp)
  805514:	dc000f17 	ldw	r16,60(sp)
  805518:	dec01404 	addi	sp,sp,80
  80551c:	f800283a 	ret
  805520:	288010c4 	addi	r2,r5,67
  805524:	28800015 	stw	r2,0(r5)
  805528:	28800415 	stw	r2,16(r5)
  80552c:	00800044 	movi	r2,1
  805530:	28800515 	stw	r2,20(r5)
  805534:	f800283a 	ret
  805538:	04801004 	movi	r18,64
  80553c:	003fe006 	br	8054c0 <__alt_data_end+0xff8054c0>
  805540:	81000a17 	ldw	r4,40(r16)
  805544:	00c02034 	movhi	r3,128
  805548:	18d7c104 	addi	r3,r3,24324
  80554c:	20ffc51e 	bne	r4,r3,805464 <__alt_data_end+0xff805464>
  805550:	8080030b 	ldhu	r2,12(r16)
  805554:	04810004 	movi	r18,1024
  805558:	84801315 	stw	r18,76(r16)
  80555c:	1484b03a 	or	r2,r2,r18
  805560:	8080030d 	sth	r2,12(r16)
  805564:	0027883a 	mov	r19,zero
  805568:	003fd806 	br	8054cc <__alt_data_end+0xff8054cc>
  80556c:	8140038f 	ldh	r5,14(r16)
  805570:	8809883a 	mov	r4,r17
  805574:	080617c0 	call	80617c <_isatty_r>
  805578:	103fe226 	beq	r2,zero,805504 <__alt_data_end+0xff805504>
  80557c:	8080030b 	ldhu	r2,12(r16)
  805580:	10800054 	ori	r2,r2,1
  805584:	8080030d 	sth	r2,12(r16)
  805588:	003fde06 	br	805504 <__alt_data_end+0xff805504>
  80558c:	8080030b 	ldhu	r2,12(r16)
  805590:	10c0800c 	andi	r3,r2,512
  805594:	183fdb1e 	bne	r3,zero,805504 <__alt_data_end+0xff805504>
  805598:	10800094 	ori	r2,r2,2
  80559c:	80c010c4 	addi	r3,r16,67
  8055a0:	8080030d 	sth	r2,12(r16)
  8055a4:	00800044 	movi	r2,1
  8055a8:	80c00015 	stw	r3,0(r16)
  8055ac:	80c00415 	stw	r3,16(r16)
  8055b0:	80800515 	stw	r2,20(r16)
  8055b4:	003fd306 	br	805504 <__alt_data_end+0xff805504>
  8055b8:	04810004 	movi	r18,1024
  8055bc:	003fc306 	br	8054cc <__alt_data_end+0xff8054cc>
  8055c0:	0027883a 	mov	r19,zero
  8055c4:	04810004 	movi	r18,1024
  8055c8:	003fc006 	br	8054cc <__alt_data_end+0xff8054cc>

008055cc <_malloc_r>:
  8055cc:	defff504 	addi	sp,sp,-44
  8055d0:	dc800315 	stw	r18,12(sp)
  8055d4:	dfc00a15 	stw	ra,40(sp)
  8055d8:	df000915 	stw	fp,36(sp)
  8055dc:	ddc00815 	stw	r23,32(sp)
  8055e0:	dd800715 	stw	r22,28(sp)
  8055e4:	dd400615 	stw	r21,24(sp)
  8055e8:	dd000515 	stw	r20,20(sp)
  8055ec:	dcc00415 	stw	r19,16(sp)
  8055f0:	dc400215 	stw	r17,8(sp)
  8055f4:	dc000115 	stw	r16,4(sp)
  8055f8:	288002c4 	addi	r2,r5,11
  8055fc:	00c00584 	movi	r3,22
  805600:	2025883a 	mov	r18,r4
  805604:	18807f2e 	bgeu	r3,r2,805804 <_malloc_r+0x238>
  805608:	047ffe04 	movi	r17,-8
  80560c:	1462703a 	and	r17,r2,r17
  805610:	8800a316 	blt	r17,zero,8058a0 <_malloc_r+0x2d4>
  805614:	8940a236 	bltu	r17,r5,8058a0 <_malloc_r+0x2d4>
  805618:	08067540 	call	806754 <__malloc_lock>
  80561c:	00807dc4 	movi	r2,503
  805620:	1441e92e 	bgeu	r2,r17,805dc8 <_malloc_r+0x7fc>
  805624:	8804d27a 	srli	r2,r17,9
  805628:	1000a126 	beq	r2,zero,8058b0 <_malloc_r+0x2e4>
  80562c:	00c00104 	movi	r3,4
  805630:	18811e36 	bltu	r3,r2,805aac <_malloc_r+0x4e0>
  805634:	8804d1ba 	srli	r2,r17,6
  805638:	12000e44 	addi	r8,r2,57
  80563c:	11c00e04 	addi	r7,r2,56
  805640:	4209883a 	add	r4,r8,r8
  805644:	04c02074 	movhi	r19,129
  805648:	2109883a 	add	r4,r4,r4
  80564c:	9ce17604 	addi	r19,r19,-31272
  805650:	2109883a 	add	r4,r4,r4
  805654:	9909883a 	add	r4,r19,r4
  805658:	24000117 	ldw	r16,4(r4)
  80565c:	213ffe04 	addi	r4,r4,-8
  805660:	24009726 	beq	r4,r16,8058c0 <_malloc_r+0x2f4>
  805664:	80800117 	ldw	r2,4(r16)
  805668:	01bfff04 	movi	r6,-4
  80566c:	014003c4 	movi	r5,15
  805670:	1184703a 	and	r2,r2,r6
  805674:	1447c83a 	sub	r3,r2,r17
  805678:	28c00716 	blt	r5,r3,805698 <_malloc_r+0xcc>
  80567c:	1800920e 	bge	r3,zero,8058c8 <_malloc_r+0x2fc>
  805680:	84000317 	ldw	r16,12(r16)
  805684:	24008e26 	beq	r4,r16,8058c0 <_malloc_r+0x2f4>
  805688:	80800117 	ldw	r2,4(r16)
  80568c:	1184703a 	and	r2,r2,r6
  805690:	1447c83a 	sub	r3,r2,r17
  805694:	28fff90e 	bge	r5,r3,80567c <__alt_data_end+0xff80567c>
  805698:	3809883a 	mov	r4,r7
  80569c:	01802074 	movhi	r6,129
  8056a0:	9c000417 	ldw	r16,16(r19)
  8056a4:	31a17604 	addi	r6,r6,-31272
  8056a8:	32000204 	addi	r8,r6,8
  8056ac:	82013426 	beq	r16,r8,805b80 <_malloc_r+0x5b4>
  8056b0:	80c00117 	ldw	r3,4(r16)
  8056b4:	00bfff04 	movi	r2,-4
  8056b8:	188e703a 	and	r7,r3,r2
  8056bc:	3c45c83a 	sub	r2,r7,r17
  8056c0:	00c003c4 	movi	r3,15
  8056c4:	18811f16 	blt	r3,r2,805b44 <_malloc_r+0x578>
  8056c8:	32000515 	stw	r8,20(r6)
  8056cc:	32000415 	stw	r8,16(r6)
  8056d0:	10007f0e 	bge	r2,zero,8058d0 <_malloc_r+0x304>
  8056d4:	00807fc4 	movi	r2,511
  8056d8:	11c0fd36 	bltu	r2,r7,805ad0 <_malloc_r+0x504>
  8056dc:	3806d0fa 	srli	r3,r7,3
  8056e0:	01c00044 	movi	r7,1
  8056e4:	30800117 	ldw	r2,4(r6)
  8056e8:	19400044 	addi	r5,r3,1
  8056ec:	294b883a 	add	r5,r5,r5
  8056f0:	1807d0ba 	srai	r3,r3,2
  8056f4:	294b883a 	add	r5,r5,r5
  8056f8:	294b883a 	add	r5,r5,r5
  8056fc:	298b883a 	add	r5,r5,r6
  805700:	38c6983a 	sll	r3,r7,r3
  805704:	29c00017 	ldw	r7,0(r5)
  805708:	2a7ffe04 	addi	r9,r5,-8
  80570c:	1886b03a 	or	r3,r3,r2
  805710:	82400315 	stw	r9,12(r16)
  805714:	81c00215 	stw	r7,8(r16)
  805718:	30c00115 	stw	r3,4(r6)
  80571c:	2c000015 	stw	r16,0(r5)
  805720:	3c000315 	stw	r16,12(r7)
  805724:	2005d0ba 	srai	r2,r4,2
  805728:	01400044 	movi	r5,1
  80572c:	288a983a 	sll	r5,r5,r2
  805730:	19406f36 	bltu	r3,r5,8058f0 <_malloc_r+0x324>
  805734:	28c4703a 	and	r2,r5,r3
  805738:	10000a1e 	bne	r2,zero,805764 <_malloc_r+0x198>
  80573c:	00bfff04 	movi	r2,-4
  805740:	294b883a 	add	r5,r5,r5
  805744:	2088703a 	and	r4,r4,r2
  805748:	28c4703a 	and	r2,r5,r3
  80574c:	21000104 	addi	r4,r4,4
  805750:	1000041e 	bne	r2,zero,805764 <_malloc_r+0x198>
  805754:	294b883a 	add	r5,r5,r5
  805758:	28c4703a 	and	r2,r5,r3
  80575c:	21000104 	addi	r4,r4,4
  805760:	103ffc26 	beq	r2,zero,805754 <__alt_data_end+0xff805754>
  805764:	02bfff04 	movi	r10,-4
  805768:	024003c4 	movi	r9,15
  80576c:	21800044 	addi	r6,r4,1
  805770:	318d883a 	add	r6,r6,r6
  805774:	318d883a 	add	r6,r6,r6
  805778:	318d883a 	add	r6,r6,r6
  80577c:	998d883a 	add	r6,r19,r6
  805780:	333ffe04 	addi	r12,r6,-8
  805784:	2017883a 	mov	r11,r4
  805788:	31800104 	addi	r6,r6,4
  80578c:	34000017 	ldw	r16,0(r6)
  805790:	31fffd04 	addi	r7,r6,-12
  805794:	81c0041e 	bne	r16,r7,8057a8 <_malloc_r+0x1dc>
  805798:	0000fb06 	br	805b88 <_malloc_r+0x5bc>
  80579c:	1801030e 	bge	r3,zero,805bac <_malloc_r+0x5e0>
  8057a0:	84000317 	ldw	r16,12(r16)
  8057a4:	81c0f826 	beq	r16,r7,805b88 <_malloc_r+0x5bc>
  8057a8:	80800117 	ldw	r2,4(r16)
  8057ac:	1284703a 	and	r2,r2,r10
  8057b0:	1447c83a 	sub	r3,r2,r17
  8057b4:	48fff90e 	bge	r9,r3,80579c <__alt_data_end+0xff80579c>
  8057b8:	80800317 	ldw	r2,12(r16)
  8057bc:	81000217 	ldw	r4,8(r16)
  8057c0:	89400054 	ori	r5,r17,1
  8057c4:	81400115 	stw	r5,4(r16)
  8057c8:	20800315 	stw	r2,12(r4)
  8057cc:	11000215 	stw	r4,8(r2)
  8057d0:	8463883a 	add	r17,r16,r17
  8057d4:	9c400515 	stw	r17,20(r19)
  8057d8:	9c400415 	stw	r17,16(r19)
  8057dc:	18800054 	ori	r2,r3,1
  8057e0:	88800115 	stw	r2,4(r17)
  8057e4:	8a000315 	stw	r8,12(r17)
  8057e8:	8a000215 	stw	r8,8(r17)
  8057ec:	88e3883a 	add	r17,r17,r3
  8057f0:	88c00015 	stw	r3,0(r17)
  8057f4:	9009883a 	mov	r4,r18
  8057f8:	08067780 	call	806778 <__malloc_unlock>
  8057fc:	80800204 	addi	r2,r16,8
  805800:	00001b06 	br	805870 <_malloc_r+0x2a4>
  805804:	04400404 	movi	r17,16
  805808:	89402536 	bltu	r17,r5,8058a0 <_malloc_r+0x2d4>
  80580c:	08067540 	call	806754 <__malloc_lock>
  805810:	00800184 	movi	r2,6
  805814:	01000084 	movi	r4,2
  805818:	04c02074 	movhi	r19,129
  80581c:	1085883a 	add	r2,r2,r2
  805820:	9ce17604 	addi	r19,r19,-31272
  805824:	1085883a 	add	r2,r2,r2
  805828:	9885883a 	add	r2,r19,r2
  80582c:	14000117 	ldw	r16,4(r2)
  805830:	10fffe04 	addi	r3,r2,-8
  805834:	80c0d926 	beq	r16,r3,805b9c <_malloc_r+0x5d0>
  805838:	80c00117 	ldw	r3,4(r16)
  80583c:	81000317 	ldw	r4,12(r16)
  805840:	00bfff04 	movi	r2,-4
  805844:	1884703a 	and	r2,r3,r2
  805848:	81400217 	ldw	r5,8(r16)
  80584c:	8085883a 	add	r2,r16,r2
  805850:	10c00117 	ldw	r3,4(r2)
  805854:	29000315 	stw	r4,12(r5)
  805858:	21400215 	stw	r5,8(r4)
  80585c:	18c00054 	ori	r3,r3,1
  805860:	10c00115 	stw	r3,4(r2)
  805864:	9009883a 	mov	r4,r18
  805868:	08067780 	call	806778 <__malloc_unlock>
  80586c:	80800204 	addi	r2,r16,8
  805870:	dfc00a17 	ldw	ra,40(sp)
  805874:	df000917 	ldw	fp,36(sp)
  805878:	ddc00817 	ldw	r23,32(sp)
  80587c:	dd800717 	ldw	r22,28(sp)
  805880:	dd400617 	ldw	r21,24(sp)
  805884:	dd000517 	ldw	r20,20(sp)
  805888:	dcc00417 	ldw	r19,16(sp)
  80588c:	dc800317 	ldw	r18,12(sp)
  805890:	dc400217 	ldw	r17,8(sp)
  805894:	dc000117 	ldw	r16,4(sp)
  805898:	dec00b04 	addi	sp,sp,44
  80589c:	f800283a 	ret
  8058a0:	00800304 	movi	r2,12
  8058a4:	90800015 	stw	r2,0(r18)
  8058a8:	0005883a 	mov	r2,zero
  8058ac:	003ff006 	br	805870 <__alt_data_end+0xff805870>
  8058b0:	01002004 	movi	r4,128
  8058b4:	02001004 	movi	r8,64
  8058b8:	01c00fc4 	movi	r7,63
  8058bc:	003f6106 	br	805644 <__alt_data_end+0xff805644>
  8058c0:	4009883a 	mov	r4,r8
  8058c4:	003f7506 	br	80569c <__alt_data_end+0xff80569c>
  8058c8:	81000317 	ldw	r4,12(r16)
  8058cc:	003fde06 	br	805848 <__alt_data_end+0xff805848>
  8058d0:	81c5883a 	add	r2,r16,r7
  8058d4:	11400117 	ldw	r5,4(r2)
  8058d8:	9009883a 	mov	r4,r18
  8058dc:	29400054 	ori	r5,r5,1
  8058e0:	11400115 	stw	r5,4(r2)
  8058e4:	08067780 	call	806778 <__malloc_unlock>
  8058e8:	80800204 	addi	r2,r16,8
  8058ec:	003fe006 	br	805870 <__alt_data_end+0xff805870>
  8058f0:	9c000217 	ldw	r16,8(r19)
  8058f4:	00bfff04 	movi	r2,-4
  8058f8:	85800117 	ldw	r22,4(r16)
  8058fc:	b0ac703a 	and	r22,r22,r2
  805900:	b4400336 	bltu	r22,r17,805910 <_malloc_r+0x344>
  805904:	b445c83a 	sub	r2,r22,r17
  805908:	00c003c4 	movi	r3,15
  80590c:	18805d16 	blt	r3,r2,805a84 <_malloc_r+0x4b8>
  805910:	05c02074 	movhi	r23,129
  805914:	00802074 	movhi	r2,129
  805918:	10a99a04 	addi	r2,r2,-22936
  80591c:	bde28504 	addi	r23,r23,-30188
  805920:	15400017 	ldw	r21,0(r2)
  805924:	b8c00017 	ldw	r3,0(r23)
  805928:	00bfffc4 	movi	r2,-1
  80592c:	858d883a 	add	r6,r16,r22
  805930:	8d6b883a 	add	r21,r17,r21
  805934:	1880ea26 	beq	r3,r2,805ce0 <_malloc_r+0x714>
  805938:	ad4403c4 	addi	r21,r21,4111
  80593c:	00bc0004 	movi	r2,-4096
  805940:	a8aa703a 	and	r21,r21,r2
  805944:	a80b883a 	mov	r5,r21
  805948:	9009883a 	mov	r4,r18
  80594c:	d9800015 	stw	r6,0(sp)
  805950:	0805dd80 	call	805dd8 <_sbrk_r>
  805954:	1029883a 	mov	r20,r2
  805958:	00bfffc4 	movi	r2,-1
  80595c:	d9800017 	ldw	r6,0(sp)
  805960:	a080e826 	beq	r20,r2,805d04 <_malloc_r+0x738>
  805964:	a180a636 	bltu	r20,r6,805c00 <_malloc_r+0x634>
  805968:	07002074 	movhi	fp,129
  80596c:	e7299b04 	addi	fp,fp,-22932
  805970:	e0800017 	ldw	r2,0(fp)
  805974:	a887883a 	add	r3,r21,r2
  805978:	e0c00015 	stw	r3,0(fp)
  80597c:	3500e626 	beq	r6,r20,805d18 <_malloc_r+0x74c>
  805980:	b9000017 	ldw	r4,0(r23)
  805984:	00bfffc4 	movi	r2,-1
  805988:	2080ee26 	beq	r4,r2,805d44 <_malloc_r+0x778>
  80598c:	a185c83a 	sub	r2,r20,r6
  805990:	10c5883a 	add	r2,r2,r3
  805994:	e0800015 	stw	r2,0(fp)
  805998:	a0c001cc 	andi	r3,r20,7
  80599c:	1800bc26 	beq	r3,zero,805c90 <_malloc_r+0x6c4>
  8059a0:	a0e9c83a 	sub	r20,r20,r3
  8059a4:	00840204 	movi	r2,4104
  8059a8:	a5000204 	addi	r20,r20,8
  8059ac:	10c7c83a 	sub	r3,r2,r3
  8059b0:	a545883a 	add	r2,r20,r21
  8059b4:	1083ffcc 	andi	r2,r2,4095
  8059b8:	18abc83a 	sub	r21,r3,r2
  8059bc:	a80b883a 	mov	r5,r21
  8059c0:	9009883a 	mov	r4,r18
  8059c4:	0805dd80 	call	805dd8 <_sbrk_r>
  8059c8:	00ffffc4 	movi	r3,-1
  8059cc:	10c0e126 	beq	r2,r3,805d54 <_malloc_r+0x788>
  8059d0:	1505c83a 	sub	r2,r2,r20
  8059d4:	1545883a 	add	r2,r2,r21
  8059d8:	10800054 	ori	r2,r2,1
  8059dc:	e0c00017 	ldw	r3,0(fp)
  8059e0:	9d000215 	stw	r20,8(r19)
  8059e4:	a0800115 	stw	r2,4(r20)
  8059e8:	a8c7883a 	add	r3,r21,r3
  8059ec:	e0c00015 	stw	r3,0(fp)
  8059f0:	84c00e26 	beq	r16,r19,805a2c <_malloc_r+0x460>
  8059f4:	018003c4 	movi	r6,15
  8059f8:	3580a72e 	bgeu	r6,r22,805c98 <_malloc_r+0x6cc>
  8059fc:	81400117 	ldw	r5,4(r16)
  805a00:	013ffe04 	movi	r4,-8
  805a04:	b0bffd04 	addi	r2,r22,-12
  805a08:	1104703a 	and	r2,r2,r4
  805a0c:	2900004c 	andi	r4,r5,1
  805a10:	2088b03a 	or	r4,r4,r2
  805a14:	81000115 	stw	r4,4(r16)
  805a18:	01400144 	movi	r5,5
  805a1c:	8089883a 	add	r4,r16,r2
  805a20:	21400115 	stw	r5,4(r4)
  805a24:	21400215 	stw	r5,8(r4)
  805a28:	3080cd36 	bltu	r6,r2,805d60 <_malloc_r+0x794>
  805a2c:	00802074 	movhi	r2,129
  805a30:	10a99904 	addi	r2,r2,-22940
  805a34:	11000017 	ldw	r4,0(r2)
  805a38:	20c0012e 	bgeu	r4,r3,805a40 <_malloc_r+0x474>
  805a3c:	10c00015 	stw	r3,0(r2)
  805a40:	00802074 	movhi	r2,129
  805a44:	10a99804 	addi	r2,r2,-22944
  805a48:	11000017 	ldw	r4,0(r2)
  805a4c:	9c000217 	ldw	r16,8(r19)
  805a50:	20c0012e 	bgeu	r4,r3,805a58 <_malloc_r+0x48c>
  805a54:	10c00015 	stw	r3,0(r2)
  805a58:	80c00117 	ldw	r3,4(r16)
  805a5c:	00bfff04 	movi	r2,-4
  805a60:	1886703a 	and	r3,r3,r2
  805a64:	1c45c83a 	sub	r2,r3,r17
  805a68:	1c400236 	bltu	r3,r17,805a74 <_malloc_r+0x4a8>
  805a6c:	00c003c4 	movi	r3,15
  805a70:	18800416 	blt	r3,r2,805a84 <_malloc_r+0x4b8>
  805a74:	9009883a 	mov	r4,r18
  805a78:	08067780 	call	806778 <__malloc_unlock>
  805a7c:	0005883a 	mov	r2,zero
  805a80:	003f7b06 	br	805870 <__alt_data_end+0xff805870>
  805a84:	88c00054 	ori	r3,r17,1
  805a88:	80c00115 	stw	r3,4(r16)
  805a8c:	8463883a 	add	r17,r16,r17
  805a90:	10800054 	ori	r2,r2,1
  805a94:	9c400215 	stw	r17,8(r19)
  805a98:	88800115 	stw	r2,4(r17)
  805a9c:	9009883a 	mov	r4,r18
  805aa0:	08067780 	call	806778 <__malloc_unlock>
  805aa4:	80800204 	addi	r2,r16,8
  805aa8:	003f7106 	br	805870 <__alt_data_end+0xff805870>
  805aac:	00c00504 	movi	r3,20
  805ab0:	18804a2e 	bgeu	r3,r2,805bdc <_malloc_r+0x610>
  805ab4:	00c01504 	movi	r3,84
  805ab8:	18806e36 	bltu	r3,r2,805c74 <_malloc_r+0x6a8>
  805abc:	8804d33a 	srli	r2,r17,12
  805ac0:	12001bc4 	addi	r8,r2,111
  805ac4:	11c01b84 	addi	r7,r2,110
  805ac8:	4209883a 	add	r4,r8,r8
  805acc:	003edd06 	br	805644 <__alt_data_end+0xff805644>
  805ad0:	3804d27a 	srli	r2,r7,9
  805ad4:	00c00104 	movi	r3,4
  805ad8:	1880442e 	bgeu	r3,r2,805bec <_malloc_r+0x620>
  805adc:	00c00504 	movi	r3,20
  805ae0:	18808136 	bltu	r3,r2,805ce8 <_malloc_r+0x71c>
  805ae4:	11401704 	addi	r5,r2,92
  805ae8:	10c016c4 	addi	r3,r2,91
  805aec:	294b883a 	add	r5,r5,r5
  805af0:	294b883a 	add	r5,r5,r5
  805af4:	294b883a 	add	r5,r5,r5
  805af8:	994b883a 	add	r5,r19,r5
  805afc:	28800017 	ldw	r2,0(r5)
  805b00:	01802074 	movhi	r6,129
  805b04:	297ffe04 	addi	r5,r5,-8
  805b08:	31a17604 	addi	r6,r6,-31272
  805b0c:	28806526 	beq	r5,r2,805ca4 <_malloc_r+0x6d8>
  805b10:	01bfff04 	movi	r6,-4
  805b14:	10c00117 	ldw	r3,4(r2)
  805b18:	1986703a 	and	r3,r3,r6
  805b1c:	38c0022e 	bgeu	r7,r3,805b28 <_malloc_r+0x55c>
  805b20:	10800217 	ldw	r2,8(r2)
  805b24:	28bffb1e 	bne	r5,r2,805b14 <__alt_data_end+0xff805b14>
  805b28:	11400317 	ldw	r5,12(r2)
  805b2c:	98c00117 	ldw	r3,4(r19)
  805b30:	81400315 	stw	r5,12(r16)
  805b34:	80800215 	stw	r2,8(r16)
  805b38:	2c000215 	stw	r16,8(r5)
  805b3c:	14000315 	stw	r16,12(r2)
  805b40:	003ef806 	br	805724 <__alt_data_end+0xff805724>
  805b44:	88c00054 	ori	r3,r17,1
  805b48:	80c00115 	stw	r3,4(r16)
  805b4c:	8463883a 	add	r17,r16,r17
  805b50:	34400515 	stw	r17,20(r6)
  805b54:	34400415 	stw	r17,16(r6)
  805b58:	10c00054 	ori	r3,r2,1
  805b5c:	8a000315 	stw	r8,12(r17)
  805b60:	8a000215 	stw	r8,8(r17)
  805b64:	88c00115 	stw	r3,4(r17)
  805b68:	88a3883a 	add	r17,r17,r2
  805b6c:	88800015 	stw	r2,0(r17)
  805b70:	9009883a 	mov	r4,r18
  805b74:	08067780 	call	806778 <__malloc_unlock>
  805b78:	80800204 	addi	r2,r16,8
  805b7c:	003f3c06 	br	805870 <__alt_data_end+0xff805870>
  805b80:	30c00117 	ldw	r3,4(r6)
  805b84:	003ee706 	br	805724 <__alt_data_end+0xff805724>
  805b88:	5ac00044 	addi	r11,r11,1
  805b8c:	588000cc 	andi	r2,r11,3
  805b90:	31800204 	addi	r6,r6,8
  805b94:	103efd1e 	bne	r2,zero,80578c <__alt_data_end+0xff80578c>
  805b98:	00002406 	br	805c2c <_malloc_r+0x660>
  805b9c:	14000317 	ldw	r16,12(r2)
  805ba0:	143f251e 	bne	r2,r16,805838 <__alt_data_end+0xff805838>
  805ba4:	21000084 	addi	r4,r4,2
  805ba8:	003ebc06 	br	80569c <__alt_data_end+0xff80569c>
  805bac:	8085883a 	add	r2,r16,r2
  805bb0:	10c00117 	ldw	r3,4(r2)
  805bb4:	81000317 	ldw	r4,12(r16)
  805bb8:	81400217 	ldw	r5,8(r16)
  805bbc:	18c00054 	ori	r3,r3,1
  805bc0:	10c00115 	stw	r3,4(r2)
  805bc4:	29000315 	stw	r4,12(r5)
  805bc8:	21400215 	stw	r5,8(r4)
  805bcc:	9009883a 	mov	r4,r18
  805bd0:	08067780 	call	806778 <__malloc_unlock>
  805bd4:	80800204 	addi	r2,r16,8
  805bd8:	003f2506 	br	805870 <__alt_data_end+0xff805870>
  805bdc:	12001704 	addi	r8,r2,92
  805be0:	11c016c4 	addi	r7,r2,91
  805be4:	4209883a 	add	r4,r8,r8
  805be8:	003e9606 	br	805644 <__alt_data_end+0xff805644>
  805bec:	3804d1ba 	srli	r2,r7,6
  805bf0:	11400e44 	addi	r5,r2,57
  805bf4:	10c00e04 	addi	r3,r2,56
  805bf8:	294b883a 	add	r5,r5,r5
  805bfc:	003fbc06 	br	805af0 <__alt_data_end+0xff805af0>
  805c00:	84ff5926 	beq	r16,r19,805968 <__alt_data_end+0xff805968>
  805c04:	00802074 	movhi	r2,129
  805c08:	10a17604 	addi	r2,r2,-31272
  805c0c:	14000217 	ldw	r16,8(r2)
  805c10:	00bfff04 	movi	r2,-4
  805c14:	80c00117 	ldw	r3,4(r16)
  805c18:	1886703a 	and	r3,r3,r2
  805c1c:	003f9106 	br	805a64 <__alt_data_end+0xff805a64>
  805c20:	60800217 	ldw	r2,8(r12)
  805c24:	213fffc4 	addi	r4,r4,-1
  805c28:	1300651e 	bne	r2,r12,805dc0 <_malloc_r+0x7f4>
  805c2c:	208000cc 	andi	r2,r4,3
  805c30:	633ffe04 	addi	r12,r12,-8
  805c34:	103ffa1e 	bne	r2,zero,805c20 <__alt_data_end+0xff805c20>
  805c38:	98800117 	ldw	r2,4(r19)
  805c3c:	0146303a 	nor	r3,zero,r5
  805c40:	1884703a 	and	r2,r3,r2
  805c44:	98800115 	stw	r2,4(r19)
  805c48:	294b883a 	add	r5,r5,r5
  805c4c:	117f2836 	bltu	r2,r5,8058f0 <__alt_data_end+0xff8058f0>
  805c50:	283f2726 	beq	r5,zero,8058f0 <__alt_data_end+0xff8058f0>
  805c54:	2886703a 	and	r3,r5,r2
  805c58:	5809883a 	mov	r4,r11
  805c5c:	183ec31e 	bne	r3,zero,80576c <__alt_data_end+0xff80576c>
  805c60:	294b883a 	add	r5,r5,r5
  805c64:	2886703a 	and	r3,r5,r2
  805c68:	21000104 	addi	r4,r4,4
  805c6c:	183ffc26 	beq	r3,zero,805c60 <__alt_data_end+0xff805c60>
  805c70:	003ebe06 	br	80576c <__alt_data_end+0xff80576c>
  805c74:	00c05504 	movi	r3,340
  805c78:	18801236 	bltu	r3,r2,805cc4 <_malloc_r+0x6f8>
  805c7c:	8804d3fa 	srli	r2,r17,15
  805c80:	12001e04 	addi	r8,r2,120
  805c84:	11c01dc4 	addi	r7,r2,119
  805c88:	4209883a 	add	r4,r8,r8
  805c8c:	003e6d06 	br	805644 <__alt_data_end+0xff805644>
  805c90:	00c40004 	movi	r3,4096
  805c94:	003f4606 	br	8059b0 <__alt_data_end+0xff8059b0>
  805c98:	00800044 	movi	r2,1
  805c9c:	a0800115 	stw	r2,4(r20)
  805ca0:	003f7406 	br	805a74 <__alt_data_end+0xff805a74>
  805ca4:	1805d0ba 	srai	r2,r3,2
  805ca8:	01c00044 	movi	r7,1
  805cac:	30c00117 	ldw	r3,4(r6)
  805cb0:	388e983a 	sll	r7,r7,r2
  805cb4:	2805883a 	mov	r2,r5
  805cb8:	38c6b03a 	or	r3,r7,r3
  805cbc:	30c00115 	stw	r3,4(r6)
  805cc0:	003f9b06 	br	805b30 <__alt_data_end+0xff805b30>
  805cc4:	00c15504 	movi	r3,1364
  805cc8:	18801a36 	bltu	r3,r2,805d34 <_malloc_r+0x768>
  805ccc:	8804d4ba 	srli	r2,r17,18
  805cd0:	12001f44 	addi	r8,r2,125
  805cd4:	11c01f04 	addi	r7,r2,124
  805cd8:	4209883a 	add	r4,r8,r8
  805cdc:	003e5906 	br	805644 <__alt_data_end+0xff805644>
  805ce0:	ad400404 	addi	r21,r21,16
  805ce4:	003f1706 	br	805944 <__alt_data_end+0xff805944>
  805ce8:	00c01504 	movi	r3,84
  805cec:	18802336 	bltu	r3,r2,805d7c <_malloc_r+0x7b0>
  805cf0:	3804d33a 	srli	r2,r7,12
  805cf4:	11401bc4 	addi	r5,r2,111
  805cf8:	10c01b84 	addi	r3,r2,110
  805cfc:	294b883a 	add	r5,r5,r5
  805d00:	003f7b06 	br	805af0 <__alt_data_end+0xff805af0>
  805d04:	9c000217 	ldw	r16,8(r19)
  805d08:	00bfff04 	movi	r2,-4
  805d0c:	80c00117 	ldw	r3,4(r16)
  805d10:	1886703a 	and	r3,r3,r2
  805d14:	003f5306 	br	805a64 <__alt_data_end+0xff805a64>
  805d18:	3083ffcc 	andi	r2,r6,4095
  805d1c:	103f181e 	bne	r2,zero,805980 <__alt_data_end+0xff805980>
  805d20:	99000217 	ldw	r4,8(r19)
  805d24:	b545883a 	add	r2,r22,r21
  805d28:	10800054 	ori	r2,r2,1
  805d2c:	20800115 	stw	r2,4(r4)
  805d30:	003f3e06 	br	805a2c <__alt_data_end+0xff805a2c>
  805d34:	01003f84 	movi	r4,254
  805d38:	02001fc4 	movi	r8,127
  805d3c:	01c01f84 	movi	r7,126
  805d40:	003e4006 	br	805644 <__alt_data_end+0xff805644>
  805d44:	00802074 	movhi	r2,129
  805d48:	10a28504 	addi	r2,r2,-30188
  805d4c:	15000015 	stw	r20,0(r2)
  805d50:	003f1106 	br	805998 <__alt_data_end+0xff805998>
  805d54:	00800044 	movi	r2,1
  805d58:	002b883a 	mov	r21,zero
  805d5c:	003f1f06 	br	8059dc <__alt_data_end+0xff8059dc>
  805d60:	81400204 	addi	r5,r16,8
  805d64:	9009883a 	mov	r4,r18
  805d68:	0804f780 	call	804f78 <_free_r>
  805d6c:	00802074 	movhi	r2,129
  805d70:	10a99b04 	addi	r2,r2,-22932
  805d74:	10c00017 	ldw	r3,0(r2)
  805d78:	003f2c06 	br	805a2c <__alt_data_end+0xff805a2c>
  805d7c:	00c05504 	movi	r3,340
  805d80:	18800536 	bltu	r3,r2,805d98 <_malloc_r+0x7cc>
  805d84:	3804d3fa 	srli	r2,r7,15
  805d88:	11401e04 	addi	r5,r2,120
  805d8c:	10c01dc4 	addi	r3,r2,119
  805d90:	294b883a 	add	r5,r5,r5
  805d94:	003f5606 	br	805af0 <__alt_data_end+0xff805af0>
  805d98:	00c15504 	movi	r3,1364
  805d9c:	18800536 	bltu	r3,r2,805db4 <_malloc_r+0x7e8>
  805da0:	3804d4ba 	srli	r2,r7,18
  805da4:	11401f44 	addi	r5,r2,125
  805da8:	10c01f04 	addi	r3,r2,124
  805dac:	294b883a 	add	r5,r5,r5
  805db0:	003f4f06 	br	805af0 <__alt_data_end+0xff805af0>
  805db4:	01403f84 	movi	r5,254
  805db8:	00c01f84 	movi	r3,126
  805dbc:	003f4c06 	br	805af0 <__alt_data_end+0xff805af0>
  805dc0:	98800117 	ldw	r2,4(r19)
  805dc4:	003fa006 	br	805c48 <__alt_data_end+0xff805c48>
  805dc8:	8808d0fa 	srli	r4,r17,3
  805dcc:	20800044 	addi	r2,r4,1
  805dd0:	1085883a 	add	r2,r2,r2
  805dd4:	003e9006 	br	805818 <__alt_data_end+0xff805818>

00805dd8 <_sbrk_r>:
  805dd8:	defffd04 	addi	sp,sp,-12
  805ddc:	dc000015 	stw	r16,0(sp)
  805de0:	04002074 	movhi	r16,129
  805de4:	dc400115 	stw	r17,4(sp)
  805de8:	84299704 	addi	r16,r16,-22948
  805dec:	2023883a 	mov	r17,r4
  805df0:	2809883a 	mov	r4,r5
  805df4:	dfc00215 	stw	ra,8(sp)
  805df8:	80000015 	stw	zero,0(r16)
  805dfc:	08068d40 	call	8068d4 <sbrk>
  805e00:	00ffffc4 	movi	r3,-1
  805e04:	10c00526 	beq	r2,r3,805e1c <_sbrk_r+0x44>
  805e08:	dfc00217 	ldw	ra,8(sp)
  805e0c:	dc400117 	ldw	r17,4(sp)
  805e10:	dc000017 	ldw	r16,0(sp)
  805e14:	dec00304 	addi	sp,sp,12
  805e18:	f800283a 	ret
  805e1c:	80c00017 	ldw	r3,0(r16)
  805e20:	183ff926 	beq	r3,zero,805e08 <__alt_data_end+0xff805e08>
  805e24:	88c00015 	stw	r3,0(r17)
  805e28:	003ff706 	br	805e08 <__alt_data_end+0xff805e08>

00805e2c <__sread>:
  805e2c:	defffe04 	addi	sp,sp,-8
  805e30:	dc000015 	stw	r16,0(sp)
  805e34:	2821883a 	mov	r16,r5
  805e38:	2940038f 	ldh	r5,14(r5)
  805e3c:	dfc00115 	stw	ra,4(sp)
  805e40:	08062300 	call	806230 <_read_r>
  805e44:	10000716 	blt	r2,zero,805e64 <__sread+0x38>
  805e48:	80c01417 	ldw	r3,80(r16)
  805e4c:	1887883a 	add	r3,r3,r2
  805e50:	80c01415 	stw	r3,80(r16)
  805e54:	dfc00117 	ldw	ra,4(sp)
  805e58:	dc000017 	ldw	r16,0(sp)
  805e5c:	dec00204 	addi	sp,sp,8
  805e60:	f800283a 	ret
  805e64:	80c0030b 	ldhu	r3,12(r16)
  805e68:	18fbffcc 	andi	r3,r3,61439
  805e6c:	80c0030d 	sth	r3,12(r16)
  805e70:	dfc00117 	ldw	ra,4(sp)
  805e74:	dc000017 	ldw	r16,0(sp)
  805e78:	dec00204 	addi	sp,sp,8
  805e7c:	f800283a 	ret

00805e80 <__seofread>:
  805e80:	0005883a 	mov	r2,zero
  805e84:	f800283a 	ret

00805e88 <__swrite>:
  805e88:	2880030b 	ldhu	r2,12(r5)
  805e8c:	defffb04 	addi	sp,sp,-20
  805e90:	dcc00315 	stw	r19,12(sp)
  805e94:	dc800215 	stw	r18,8(sp)
  805e98:	dc400115 	stw	r17,4(sp)
  805e9c:	dc000015 	stw	r16,0(sp)
  805ea0:	dfc00415 	stw	ra,16(sp)
  805ea4:	10c0400c 	andi	r3,r2,256
  805ea8:	2821883a 	mov	r16,r5
  805eac:	2023883a 	mov	r17,r4
  805eb0:	3025883a 	mov	r18,r6
  805eb4:	3827883a 	mov	r19,r7
  805eb8:	18000526 	beq	r3,zero,805ed0 <__swrite+0x48>
  805ebc:	2940038f 	ldh	r5,14(r5)
  805ec0:	01c00084 	movi	r7,2
  805ec4:	000d883a 	mov	r6,zero
  805ec8:	08061d00 	call	8061d0 <_lseek_r>
  805ecc:	8080030b 	ldhu	r2,12(r16)
  805ed0:	8140038f 	ldh	r5,14(r16)
  805ed4:	10bbffcc 	andi	r2,r2,61439
  805ed8:	980f883a 	mov	r7,r19
  805edc:	900d883a 	mov	r6,r18
  805ee0:	8809883a 	mov	r4,r17
  805ee4:	8080030d 	sth	r2,12(r16)
  805ee8:	dfc00417 	ldw	ra,16(sp)
  805eec:	dcc00317 	ldw	r19,12(sp)
  805ef0:	dc800217 	ldw	r18,8(sp)
  805ef4:	dc400117 	ldw	r17,4(sp)
  805ef8:	dc000017 	ldw	r16,0(sp)
  805efc:	dec00504 	addi	sp,sp,20
  805f00:	0805f681 	jmpi	805f68 <_write_r>

00805f04 <__sseek>:
  805f04:	defffe04 	addi	sp,sp,-8
  805f08:	dc000015 	stw	r16,0(sp)
  805f0c:	2821883a 	mov	r16,r5
  805f10:	2940038f 	ldh	r5,14(r5)
  805f14:	dfc00115 	stw	ra,4(sp)
  805f18:	08061d00 	call	8061d0 <_lseek_r>
  805f1c:	00ffffc4 	movi	r3,-1
  805f20:	10c00826 	beq	r2,r3,805f44 <__sseek+0x40>
  805f24:	80c0030b 	ldhu	r3,12(r16)
  805f28:	80801415 	stw	r2,80(r16)
  805f2c:	18c40014 	ori	r3,r3,4096
  805f30:	80c0030d 	sth	r3,12(r16)
  805f34:	dfc00117 	ldw	ra,4(sp)
  805f38:	dc000017 	ldw	r16,0(sp)
  805f3c:	dec00204 	addi	sp,sp,8
  805f40:	f800283a 	ret
  805f44:	80c0030b 	ldhu	r3,12(r16)
  805f48:	18fbffcc 	andi	r3,r3,61439
  805f4c:	80c0030d 	sth	r3,12(r16)
  805f50:	dfc00117 	ldw	ra,4(sp)
  805f54:	dc000017 	ldw	r16,0(sp)
  805f58:	dec00204 	addi	sp,sp,8
  805f5c:	f800283a 	ret

00805f60 <__sclose>:
  805f60:	2940038f 	ldh	r5,14(r5)
  805f64:	0805fc81 	jmpi	805fc8 <_close_r>

00805f68 <_write_r>:
  805f68:	defffd04 	addi	sp,sp,-12
  805f6c:	2805883a 	mov	r2,r5
  805f70:	dc000015 	stw	r16,0(sp)
  805f74:	04002074 	movhi	r16,129
  805f78:	dc400115 	stw	r17,4(sp)
  805f7c:	300b883a 	mov	r5,r6
  805f80:	84299704 	addi	r16,r16,-22948
  805f84:	2023883a 	mov	r17,r4
  805f88:	380d883a 	mov	r6,r7
  805f8c:	1009883a 	mov	r4,r2
  805f90:	dfc00215 	stw	ra,8(sp)
  805f94:	80000015 	stw	zero,0(r16)
  805f98:	08069c00 	call	8069c0 <write>
  805f9c:	00ffffc4 	movi	r3,-1
  805fa0:	10c00526 	beq	r2,r3,805fb8 <_write_r+0x50>
  805fa4:	dfc00217 	ldw	ra,8(sp)
  805fa8:	dc400117 	ldw	r17,4(sp)
  805fac:	dc000017 	ldw	r16,0(sp)
  805fb0:	dec00304 	addi	sp,sp,12
  805fb4:	f800283a 	ret
  805fb8:	80c00017 	ldw	r3,0(r16)
  805fbc:	183ff926 	beq	r3,zero,805fa4 <__alt_data_end+0xff805fa4>
  805fc0:	88c00015 	stw	r3,0(r17)
  805fc4:	003ff706 	br	805fa4 <__alt_data_end+0xff805fa4>

00805fc8 <_close_r>:
  805fc8:	defffd04 	addi	sp,sp,-12
  805fcc:	dc000015 	stw	r16,0(sp)
  805fd0:	04002074 	movhi	r16,129
  805fd4:	dc400115 	stw	r17,4(sp)
  805fd8:	84299704 	addi	r16,r16,-22948
  805fdc:	2023883a 	mov	r17,r4
  805fe0:	2809883a 	mov	r4,r5
  805fe4:	dfc00215 	stw	ra,8(sp)
  805fe8:	80000015 	stw	zero,0(r16)
  805fec:	0802e480 	call	802e48 <close>
  805ff0:	00ffffc4 	movi	r3,-1
  805ff4:	10c00526 	beq	r2,r3,80600c <_close_r+0x44>
  805ff8:	dfc00217 	ldw	ra,8(sp)
  805ffc:	dc400117 	ldw	r17,4(sp)
  806000:	dc000017 	ldw	r16,0(sp)
  806004:	dec00304 	addi	sp,sp,12
  806008:	f800283a 	ret
  80600c:	80c00017 	ldw	r3,0(r16)
  806010:	183ff926 	beq	r3,zero,805ff8 <__alt_data_end+0xff805ff8>
  806014:	88c00015 	stw	r3,0(r17)
  806018:	003ff706 	br	805ff8 <__alt_data_end+0xff805ff8>

0080601c <_fclose_r>:
  80601c:	28003926 	beq	r5,zero,806104 <_fclose_r+0xe8>
  806020:	defffc04 	addi	sp,sp,-16
  806024:	dc400115 	stw	r17,4(sp)
  806028:	dc000015 	stw	r16,0(sp)
  80602c:	dfc00315 	stw	ra,12(sp)
  806030:	dc800215 	stw	r18,8(sp)
  806034:	2023883a 	mov	r17,r4
  806038:	2821883a 	mov	r16,r5
  80603c:	20000226 	beq	r4,zero,806048 <_fclose_r+0x2c>
  806040:	20800e17 	ldw	r2,56(r4)
  806044:	10002726 	beq	r2,zero,8060e4 <_fclose_r+0xc8>
  806048:	8080030f 	ldh	r2,12(r16)
  80604c:	1000071e 	bne	r2,zero,80606c <_fclose_r+0x50>
  806050:	0005883a 	mov	r2,zero
  806054:	dfc00317 	ldw	ra,12(sp)
  806058:	dc800217 	ldw	r18,8(sp)
  80605c:	dc400117 	ldw	r17,4(sp)
  806060:	dc000017 	ldw	r16,0(sp)
  806064:	dec00404 	addi	sp,sp,16
  806068:	f800283a 	ret
  80606c:	800b883a 	mov	r5,r16
  806070:	8809883a 	mov	r4,r17
  806074:	080480c0 	call	80480c <__sflush_r>
  806078:	1025883a 	mov	r18,r2
  80607c:	80800b17 	ldw	r2,44(r16)
  806080:	10000426 	beq	r2,zero,806094 <_fclose_r+0x78>
  806084:	81400717 	ldw	r5,28(r16)
  806088:	8809883a 	mov	r4,r17
  80608c:	103ee83a 	callr	r2
  806090:	10001616 	blt	r2,zero,8060ec <_fclose_r+0xd0>
  806094:	8080030b 	ldhu	r2,12(r16)
  806098:	1080200c 	andi	r2,r2,128
  80609c:	1000151e 	bne	r2,zero,8060f4 <_fclose_r+0xd8>
  8060a0:	81400c17 	ldw	r5,48(r16)
  8060a4:	28000526 	beq	r5,zero,8060bc <_fclose_r+0xa0>
  8060a8:	80801004 	addi	r2,r16,64
  8060ac:	28800226 	beq	r5,r2,8060b8 <_fclose_r+0x9c>
  8060b0:	8809883a 	mov	r4,r17
  8060b4:	0804f780 	call	804f78 <_free_r>
  8060b8:	80000c15 	stw	zero,48(r16)
  8060bc:	81401117 	ldw	r5,68(r16)
  8060c0:	28000326 	beq	r5,zero,8060d0 <_fclose_r+0xb4>
  8060c4:	8809883a 	mov	r4,r17
  8060c8:	0804f780 	call	804f78 <_free_r>
  8060cc:	80001115 	stw	zero,68(r16)
  8060d0:	0804e140 	call	804e14 <__sfp_lock_acquire>
  8060d4:	8000030d 	sth	zero,12(r16)
  8060d8:	0804e180 	call	804e18 <__sfp_lock_release>
  8060dc:	9005883a 	mov	r2,r18
  8060e0:	003fdc06 	br	806054 <__alt_data_end+0xff806054>
  8060e4:	0804e040 	call	804e04 <__sinit>
  8060e8:	003fd706 	br	806048 <__alt_data_end+0xff806048>
  8060ec:	04bfffc4 	movi	r18,-1
  8060f0:	003fe806 	br	806094 <__alt_data_end+0xff806094>
  8060f4:	81400417 	ldw	r5,16(r16)
  8060f8:	8809883a 	mov	r4,r17
  8060fc:	0804f780 	call	804f78 <_free_r>
  806100:	003fe706 	br	8060a0 <__alt_data_end+0xff8060a0>
  806104:	0005883a 	mov	r2,zero
  806108:	f800283a 	ret

0080610c <fclose>:
  80610c:	00802074 	movhi	r2,129
  806110:	10a28404 	addi	r2,r2,-30192
  806114:	200b883a 	mov	r5,r4
  806118:	11000017 	ldw	r4,0(r2)
  80611c:	080601c1 	jmpi	80601c <_fclose_r>

00806120 <_fstat_r>:
  806120:	defffd04 	addi	sp,sp,-12
  806124:	2805883a 	mov	r2,r5
  806128:	dc000015 	stw	r16,0(sp)
  80612c:	04002074 	movhi	r16,129
  806130:	dc400115 	stw	r17,4(sp)
  806134:	84299704 	addi	r16,r16,-22948
  806138:	2023883a 	mov	r17,r4
  80613c:	300b883a 	mov	r5,r6
  806140:	1009883a 	mov	r4,r2
  806144:	dfc00215 	stw	ra,8(sp)
  806148:	80000015 	stw	zero,0(r16)
  80614c:	08064b40 	call	8064b4 <fstat>
  806150:	00ffffc4 	movi	r3,-1
  806154:	10c00526 	beq	r2,r3,80616c <_fstat_r+0x4c>
  806158:	dfc00217 	ldw	ra,8(sp)
  80615c:	dc400117 	ldw	r17,4(sp)
  806160:	dc000017 	ldw	r16,0(sp)
  806164:	dec00304 	addi	sp,sp,12
  806168:	f800283a 	ret
  80616c:	80c00017 	ldw	r3,0(r16)
  806170:	183ff926 	beq	r3,zero,806158 <__alt_data_end+0xff806158>
  806174:	88c00015 	stw	r3,0(r17)
  806178:	003ff706 	br	806158 <__alt_data_end+0xff806158>

0080617c <_isatty_r>:
  80617c:	defffd04 	addi	sp,sp,-12
  806180:	dc000015 	stw	r16,0(sp)
  806184:	04002074 	movhi	r16,129
  806188:	dc400115 	stw	r17,4(sp)
  80618c:	84299704 	addi	r16,r16,-22948
  806190:	2023883a 	mov	r17,r4
  806194:	2809883a 	mov	r4,r5
  806198:	dfc00215 	stw	ra,8(sp)
  80619c:	80000015 	stw	zero,0(r16)
  8061a0:	08065a00 	call	8065a0 <isatty>
  8061a4:	00ffffc4 	movi	r3,-1
  8061a8:	10c00526 	beq	r2,r3,8061c0 <_isatty_r+0x44>
  8061ac:	dfc00217 	ldw	ra,8(sp)
  8061b0:	dc400117 	ldw	r17,4(sp)
  8061b4:	dc000017 	ldw	r16,0(sp)
  8061b8:	dec00304 	addi	sp,sp,12
  8061bc:	f800283a 	ret
  8061c0:	80c00017 	ldw	r3,0(r16)
  8061c4:	183ff926 	beq	r3,zero,8061ac <__alt_data_end+0xff8061ac>
  8061c8:	88c00015 	stw	r3,0(r17)
  8061cc:	003ff706 	br	8061ac <__alt_data_end+0xff8061ac>

008061d0 <_lseek_r>:
  8061d0:	defffd04 	addi	sp,sp,-12
  8061d4:	2805883a 	mov	r2,r5
  8061d8:	dc000015 	stw	r16,0(sp)
  8061dc:	04002074 	movhi	r16,129
  8061e0:	dc400115 	stw	r17,4(sp)
  8061e4:	300b883a 	mov	r5,r6
  8061e8:	84299704 	addi	r16,r16,-22948
  8061ec:	2023883a 	mov	r17,r4
  8061f0:	380d883a 	mov	r6,r7
  8061f4:	1009883a 	mov	r4,r2
  8061f8:	dfc00215 	stw	ra,8(sp)
  8061fc:	80000015 	stw	zero,0(r16)
  806200:	08066800 	call	806680 <lseek>
  806204:	00ffffc4 	movi	r3,-1
  806208:	10c00526 	beq	r2,r3,806220 <_lseek_r+0x50>
  80620c:	dfc00217 	ldw	ra,8(sp)
  806210:	dc400117 	ldw	r17,4(sp)
  806214:	dc000017 	ldw	r16,0(sp)
  806218:	dec00304 	addi	sp,sp,12
  80621c:	f800283a 	ret
  806220:	80c00017 	ldw	r3,0(r16)
  806224:	183ff926 	beq	r3,zero,80620c <__alt_data_end+0xff80620c>
  806228:	88c00015 	stw	r3,0(r17)
  80622c:	003ff706 	br	80620c <__alt_data_end+0xff80620c>

00806230 <_read_r>:
  806230:	defffd04 	addi	sp,sp,-12
  806234:	2805883a 	mov	r2,r5
  806238:	dc000015 	stw	r16,0(sp)
  80623c:	04002074 	movhi	r16,129
  806240:	dc400115 	stw	r17,4(sp)
  806244:	300b883a 	mov	r5,r6
  806248:	84299704 	addi	r16,r16,-22948
  80624c:	2023883a 	mov	r17,r4
  806250:	380d883a 	mov	r6,r7
  806254:	1009883a 	mov	r4,r2
  806258:	dfc00215 	stw	ra,8(sp)
  80625c:	80000015 	stw	zero,0(r16)
  806260:	08067d80 	call	8067d8 <read>
  806264:	00ffffc4 	movi	r3,-1
  806268:	10c00526 	beq	r2,r3,806280 <_read_r+0x50>
  80626c:	dfc00217 	ldw	ra,8(sp)
  806270:	dc400117 	ldw	r17,4(sp)
  806274:	dc000017 	ldw	r16,0(sp)
  806278:	dec00304 	addi	sp,sp,12
  80627c:	f800283a 	ret
  806280:	80c00017 	ldw	r3,0(r16)
  806284:	183ff926 	beq	r3,zero,80626c <__alt_data_end+0xff80626c>
  806288:	88c00015 	stw	r3,0(r17)
  80628c:	003ff706 	br	80626c <__alt_data_end+0xff80626c>

00806290 <__divsi3>:
  806290:	20001b16 	blt	r4,zero,806300 <__divsi3+0x70>
  806294:	000f883a 	mov	r7,zero
  806298:	28001616 	blt	r5,zero,8062f4 <__divsi3+0x64>
  80629c:	200d883a 	mov	r6,r4
  8062a0:	29001a2e 	bgeu	r5,r4,80630c <__divsi3+0x7c>
  8062a4:	00800804 	movi	r2,32
  8062a8:	00c00044 	movi	r3,1
  8062ac:	00000106 	br	8062b4 <__divsi3+0x24>
  8062b0:	10000d26 	beq	r2,zero,8062e8 <__divsi3+0x58>
  8062b4:	294b883a 	add	r5,r5,r5
  8062b8:	10bfffc4 	addi	r2,r2,-1
  8062bc:	18c7883a 	add	r3,r3,r3
  8062c0:	293ffb36 	bltu	r5,r4,8062b0 <__alt_data_end+0xff8062b0>
  8062c4:	0005883a 	mov	r2,zero
  8062c8:	18000726 	beq	r3,zero,8062e8 <__divsi3+0x58>
  8062cc:	0005883a 	mov	r2,zero
  8062d0:	31400236 	bltu	r6,r5,8062dc <__divsi3+0x4c>
  8062d4:	314dc83a 	sub	r6,r6,r5
  8062d8:	10c4b03a 	or	r2,r2,r3
  8062dc:	1806d07a 	srli	r3,r3,1
  8062e0:	280ad07a 	srli	r5,r5,1
  8062e4:	183ffa1e 	bne	r3,zero,8062d0 <__alt_data_end+0xff8062d0>
  8062e8:	38000126 	beq	r7,zero,8062f0 <__divsi3+0x60>
  8062ec:	0085c83a 	sub	r2,zero,r2
  8062f0:	f800283a 	ret
  8062f4:	014bc83a 	sub	r5,zero,r5
  8062f8:	39c0005c 	xori	r7,r7,1
  8062fc:	003fe706 	br	80629c <__alt_data_end+0xff80629c>
  806300:	0109c83a 	sub	r4,zero,r4
  806304:	01c00044 	movi	r7,1
  806308:	003fe306 	br	806298 <__alt_data_end+0xff806298>
  80630c:	00c00044 	movi	r3,1
  806310:	003fee06 	br	8062cc <__alt_data_end+0xff8062cc>

00806314 <__modsi3>:
  806314:	20001716 	blt	r4,zero,806374 <__modsi3+0x60>
  806318:	000f883a 	mov	r7,zero
  80631c:	2005883a 	mov	r2,r4
  806320:	28001216 	blt	r5,zero,80636c <__modsi3+0x58>
  806324:	2900162e 	bgeu	r5,r4,806380 <__modsi3+0x6c>
  806328:	01800804 	movi	r6,32
  80632c:	00c00044 	movi	r3,1
  806330:	00000106 	br	806338 <__modsi3+0x24>
  806334:	30000a26 	beq	r6,zero,806360 <__modsi3+0x4c>
  806338:	294b883a 	add	r5,r5,r5
  80633c:	31bfffc4 	addi	r6,r6,-1
  806340:	18c7883a 	add	r3,r3,r3
  806344:	293ffb36 	bltu	r5,r4,806334 <__alt_data_end+0xff806334>
  806348:	18000526 	beq	r3,zero,806360 <__modsi3+0x4c>
  80634c:	1806d07a 	srli	r3,r3,1
  806350:	11400136 	bltu	r2,r5,806358 <__modsi3+0x44>
  806354:	1145c83a 	sub	r2,r2,r5
  806358:	280ad07a 	srli	r5,r5,1
  80635c:	183ffb1e 	bne	r3,zero,80634c <__alt_data_end+0xff80634c>
  806360:	38000126 	beq	r7,zero,806368 <__modsi3+0x54>
  806364:	0085c83a 	sub	r2,zero,r2
  806368:	f800283a 	ret
  80636c:	014bc83a 	sub	r5,zero,r5
  806370:	003fec06 	br	806324 <__alt_data_end+0xff806324>
  806374:	0109c83a 	sub	r4,zero,r4
  806378:	01c00044 	movi	r7,1
  80637c:	003fe706 	br	80631c <__alt_data_end+0xff80631c>
  806380:	00c00044 	movi	r3,1
  806384:	003ff106 	br	80634c <__alt_data_end+0xff80634c>

00806388 <__udivsi3>:
  806388:	200d883a 	mov	r6,r4
  80638c:	2900152e 	bgeu	r5,r4,8063e4 <__udivsi3+0x5c>
  806390:	28001416 	blt	r5,zero,8063e4 <__udivsi3+0x5c>
  806394:	00800804 	movi	r2,32
  806398:	00c00044 	movi	r3,1
  80639c:	00000206 	br	8063a8 <__udivsi3+0x20>
  8063a0:	10000e26 	beq	r2,zero,8063dc <__udivsi3+0x54>
  8063a4:	28000516 	blt	r5,zero,8063bc <__udivsi3+0x34>
  8063a8:	294b883a 	add	r5,r5,r5
  8063ac:	10bfffc4 	addi	r2,r2,-1
  8063b0:	18c7883a 	add	r3,r3,r3
  8063b4:	293ffa36 	bltu	r5,r4,8063a0 <__alt_data_end+0xff8063a0>
  8063b8:	18000826 	beq	r3,zero,8063dc <__udivsi3+0x54>
  8063bc:	0005883a 	mov	r2,zero
  8063c0:	31400236 	bltu	r6,r5,8063cc <__udivsi3+0x44>
  8063c4:	314dc83a 	sub	r6,r6,r5
  8063c8:	10c4b03a 	or	r2,r2,r3
  8063cc:	1806d07a 	srli	r3,r3,1
  8063d0:	280ad07a 	srli	r5,r5,1
  8063d4:	183ffa1e 	bne	r3,zero,8063c0 <__alt_data_end+0xff8063c0>
  8063d8:	f800283a 	ret
  8063dc:	0005883a 	mov	r2,zero
  8063e0:	f800283a 	ret
  8063e4:	00c00044 	movi	r3,1
  8063e8:	003ff406 	br	8063bc <__alt_data_end+0xff8063bc>

008063ec <__umodsi3>:
  8063ec:	2005883a 	mov	r2,r4
  8063f0:	2900122e 	bgeu	r5,r4,80643c <__umodsi3+0x50>
  8063f4:	28001116 	blt	r5,zero,80643c <__umodsi3+0x50>
  8063f8:	01800804 	movi	r6,32
  8063fc:	00c00044 	movi	r3,1
  806400:	00000206 	br	80640c <__umodsi3+0x20>
  806404:	30000c26 	beq	r6,zero,806438 <__umodsi3+0x4c>
  806408:	28000516 	blt	r5,zero,806420 <__umodsi3+0x34>
  80640c:	294b883a 	add	r5,r5,r5
  806410:	31bfffc4 	addi	r6,r6,-1
  806414:	18c7883a 	add	r3,r3,r3
  806418:	293ffa36 	bltu	r5,r4,806404 <__alt_data_end+0xff806404>
  80641c:	18000626 	beq	r3,zero,806438 <__umodsi3+0x4c>
  806420:	1806d07a 	srli	r3,r3,1
  806424:	11400136 	bltu	r2,r5,80642c <__umodsi3+0x40>
  806428:	1145c83a 	sub	r2,r2,r5
  80642c:	280ad07a 	srli	r5,r5,1
  806430:	183ffb1e 	bne	r3,zero,806420 <__alt_data_end+0xff806420>
  806434:	f800283a 	ret
  806438:	f800283a 	ret
  80643c:	00c00044 	movi	r3,1
  806440:	003ff706 	br	806420 <__alt_data_end+0xff806420>

00806444 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806444:	defffd04 	addi	sp,sp,-12
  806448:	df000215 	stw	fp,8(sp)
  80644c:	df000204 	addi	fp,sp,8
  806450:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  806454:	0001883a 	nop
  806458:	e0bfff17 	ldw	r2,-4(fp)
  80645c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  806460:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806464:	10000226 	beq	r2,zero,806470 <_exit+0x2c>
    ALT_SIM_FAIL();
  806468:	002af070 	cmpltui	zero,zero,43969
  80646c:	00000106 	br	806474 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  806470:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806474:	003fff06 	br	806474 <__alt_data_end+0xff806474>

00806478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806478:	defffe04 	addi	sp,sp,-8
  80647c:	dfc00115 	stw	ra,4(sp)
  806480:	df000015 	stw	fp,0(sp)
  806484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806488:	d0a00617 	ldw	r2,-32744(gp)
  80648c:	10000326 	beq	r2,zero,80649c <alt_get_errno+0x24>
  806490:	d0a00617 	ldw	r2,-32744(gp)
  806494:	103ee83a 	callr	r2
  806498:	00000106 	br	8064a0 <alt_get_errno+0x28>
  80649c:	d0a71f04 	addi	r2,gp,-25476
}
  8064a0:	e037883a 	mov	sp,fp
  8064a4:	dfc00117 	ldw	ra,4(sp)
  8064a8:	df000017 	ldw	fp,0(sp)
  8064ac:	dec00204 	addi	sp,sp,8
  8064b0:	f800283a 	ret

008064b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8064b4:	defffb04 	addi	sp,sp,-20
  8064b8:	dfc00415 	stw	ra,16(sp)
  8064bc:	df000315 	stw	fp,12(sp)
  8064c0:	df000304 	addi	fp,sp,12
  8064c4:	e13ffe15 	stw	r4,-8(fp)
  8064c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8064cc:	e0bffe17 	ldw	r2,-8(fp)
  8064d0:	10000616 	blt	r2,zero,8064ec <fstat+0x38>
  8064d4:	e0bffe17 	ldw	r2,-8(fp)
  8064d8:	10c00324 	muli	r3,r2,12
  8064dc:	00802074 	movhi	r2,129
  8064e0:	10a00d04 	addi	r2,r2,-32716
  8064e4:	1885883a 	add	r2,r3,r2
  8064e8:	00000106 	br	8064f0 <fstat+0x3c>
  8064ec:	0005883a 	mov	r2,zero
  8064f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8064f4:	e0bffd17 	ldw	r2,-12(fp)
  8064f8:	10001026 	beq	r2,zero,80653c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8064fc:	e0bffd17 	ldw	r2,-12(fp)
  806500:	10800017 	ldw	r2,0(r2)
  806504:	10800817 	ldw	r2,32(r2)
  806508:	10000726 	beq	r2,zero,806528 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80650c:	e0bffd17 	ldw	r2,-12(fp)
  806510:	10800017 	ldw	r2,0(r2)
  806514:	10800817 	ldw	r2,32(r2)
  806518:	e17fff17 	ldw	r5,-4(fp)
  80651c:	e13ffd17 	ldw	r4,-12(fp)
  806520:	103ee83a 	callr	r2
  806524:	00000a06 	br	806550 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  806528:	e0bfff17 	ldw	r2,-4(fp)
  80652c:	00c80004 	movi	r3,8192
  806530:	10c00115 	stw	r3,4(r2)
      return 0;
  806534:	0005883a 	mov	r2,zero
  806538:	00000506 	br	806550 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80653c:	08064780 	call	806478 <alt_get_errno>
  806540:	1007883a 	mov	r3,r2
  806544:	00801444 	movi	r2,81
  806548:	18800015 	stw	r2,0(r3)
    return -1;
  80654c:	00bfffc4 	movi	r2,-1
  }
}
  806550:	e037883a 	mov	sp,fp
  806554:	dfc00117 	ldw	ra,4(sp)
  806558:	df000017 	ldw	fp,0(sp)
  80655c:	dec00204 	addi	sp,sp,8
  806560:	f800283a 	ret

00806564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806564:	defffe04 	addi	sp,sp,-8
  806568:	dfc00115 	stw	ra,4(sp)
  80656c:	df000015 	stw	fp,0(sp)
  806570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806574:	d0a00617 	ldw	r2,-32744(gp)
  806578:	10000326 	beq	r2,zero,806588 <alt_get_errno+0x24>
  80657c:	d0a00617 	ldw	r2,-32744(gp)
  806580:	103ee83a 	callr	r2
  806584:	00000106 	br	80658c <alt_get_errno+0x28>
  806588:	d0a71f04 	addi	r2,gp,-25476
}
  80658c:	e037883a 	mov	sp,fp
  806590:	dfc00117 	ldw	ra,4(sp)
  806594:	df000017 	ldw	fp,0(sp)
  806598:	dec00204 	addi	sp,sp,8
  80659c:	f800283a 	ret

008065a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8065a0:	deffed04 	addi	sp,sp,-76
  8065a4:	dfc01215 	stw	ra,72(sp)
  8065a8:	df001115 	stw	fp,68(sp)
  8065ac:	df001104 	addi	fp,sp,68
  8065b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8065b4:	e0bfff17 	ldw	r2,-4(fp)
  8065b8:	10000616 	blt	r2,zero,8065d4 <isatty+0x34>
  8065bc:	e0bfff17 	ldw	r2,-4(fp)
  8065c0:	10c00324 	muli	r3,r2,12
  8065c4:	00802074 	movhi	r2,129
  8065c8:	10a00d04 	addi	r2,r2,-32716
  8065cc:	1885883a 	add	r2,r3,r2
  8065d0:	00000106 	br	8065d8 <isatty+0x38>
  8065d4:	0005883a 	mov	r2,zero
  8065d8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8065dc:	e0bfef17 	ldw	r2,-68(fp)
  8065e0:	10000e26 	beq	r2,zero,80661c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8065e4:	e0bfef17 	ldw	r2,-68(fp)
  8065e8:	10800017 	ldw	r2,0(r2)
  8065ec:	10800817 	ldw	r2,32(r2)
  8065f0:	1000021e 	bne	r2,zero,8065fc <isatty+0x5c>
    {
      return 1;
  8065f4:	00800044 	movi	r2,1
  8065f8:	00000d06 	br	806630 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8065fc:	e0bff004 	addi	r2,fp,-64
  806600:	100b883a 	mov	r5,r2
  806604:	e13fff17 	ldw	r4,-4(fp)
  806608:	08064b40 	call	8064b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80660c:	e0bff117 	ldw	r2,-60(fp)
  806610:	10880020 	cmpeqi	r2,r2,8192
  806614:	10803fcc 	andi	r2,r2,255
  806618:	00000506 	br	806630 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80661c:	08065640 	call	806564 <alt_get_errno>
  806620:	1007883a 	mov	r3,r2
  806624:	00801444 	movi	r2,81
  806628:	18800015 	stw	r2,0(r3)
    return 0;
  80662c:	0005883a 	mov	r2,zero
  }
}
  806630:	e037883a 	mov	sp,fp
  806634:	dfc00117 	ldw	ra,4(sp)
  806638:	df000017 	ldw	fp,0(sp)
  80663c:	dec00204 	addi	sp,sp,8
  806640:	f800283a 	ret

00806644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806644:	defffe04 	addi	sp,sp,-8
  806648:	dfc00115 	stw	ra,4(sp)
  80664c:	df000015 	stw	fp,0(sp)
  806650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806654:	d0a00617 	ldw	r2,-32744(gp)
  806658:	10000326 	beq	r2,zero,806668 <alt_get_errno+0x24>
  80665c:	d0a00617 	ldw	r2,-32744(gp)
  806660:	103ee83a 	callr	r2
  806664:	00000106 	br	80666c <alt_get_errno+0x28>
  806668:	d0a71f04 	addi	r2,gp,-25476
}
  80666c:	e037883a 	mov	sp,fp
  806670:	dfc00117 	ldw	ra,4(sp)
  806674:	df000017 	ldw	fp,0(sp)
  806678:	dec00204 	addi	sp,sp,8
  80667c:	f800283a 	ret

00806680 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  806680:	defff904 	addi	sp,sp,-28
  806684:	dfc00615 	stw	ra,24(sp)
  806688:	df000515 	stw	fp,20(sp)
  80668c:	df000504 	addi	fp,sp,20
  806690:	e13ffd15 	stw	r4,-12(fp)
  806694:	e17ffe15 	stw	r5,-8(fp)
  806698:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80669c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8066a0:	e0bffd17 	ldw	r2,-12(fp)
  8066a4:	10000616 	blt	r2,zero,8066c0 <lseek+0x40>
  8066a8:	e0bffd17 	ldw	r2,-12(fp)
  8066ac:	10c00324 	muli	r3,r2,12
  8066b0:	00802074 	movhi	r2,129
  8066b4:	10a00d04 	addi	r2,r2,-32716
  8066b8:	1885883a 	add	r2,r3,r2
  8066bc:	00000106 	br	8066c4 <lseek+0x44>
  8066c0:	0005883a 	mov	r2,zero
  8066c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8066c8:	e0bffc17 	ldw	r2,-16(fp)
  8066cc:	10001026 	beq	r2,zero,806710 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8066d0:	e0bffc17 	ldw	r2,-16(fp)
  8066d4:	10800017 	ldw	r2,0(r2)
  8066d8:	10800717 	ldw	r2,28(r2)
  8066dc:	10000926 	beq	r2,zero,806704 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8066e0:	e0bffc17 	ldw	r2,-16(fp)
  8066e4:	10800017 	ldw	r2,0(r2)
  8066e8:	10800717 	ldw	r2,28(r2)
  8066ec:	e1bfff17 	ldw	r6,-4(fp)
  8066f0:	e17ffe17 	ldw	r5,-8(fp)
  8066f4:	e13ffc17 	ldw	r4,-16(fp)
  8066f8:	103ee83a 	callr	r2
  8066fc:	e0bffb15 	stw	r2,-20(fp)
  806700:	00000506 	br	806718 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  806704:	00bfde84 	movi	r2,-134
  806708:	e0bffb15 	stw	r2,-20(fp)
  80670c:	00000206 	br	806718 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  806710:	00bfebc4 	movi	r2,-81
  806714:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  806718:	e0bffb17 	ldw	r2,-20(fp)
  80671c:	1000070e 	bge	r2,zero,80673c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  806720:	08066440 	call	806644 <alt_get_errno>
  806724:	1007883a 	mov	r3,r2
  806728:	e0bffb17 	ldw	r2,-20(fp)
  80672c:	0085c83a 	sub	r2,zero,r2
  806730:	18800015 	stw	r2,0(r3)
    rc = -1;
  806734:	00bfffc4 	movi	r2,-1
  806738:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80673c:	e0bffb17 	ldw	r2,-20(fp)
}
  806740:	e037883a 	mov	sp,fp
  806744:	dfc00117 	ldw	ra,4(sp)
  806748:	df000017 	ldw	fp,0(sp)
  80674c:	dec00204 	addi	sp,sp,8
  806750:	f800283a 	ret

00806754 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  806754:	defffe04 	addi	sp,sp,-8
  806758:	df000115 	stw	fp,4(sp)
  80675c:	df000104 	addi	fp,sp,4
  806760:	e13fff15 	stw	r4,-4(fp)
}
  806764:	0001883a 	nop
  806768:	e037883a 	mov	sp,fp
  80676c:	df000017 	ldw	fp,0(sp)
  806770:	dec00104 	addi	sp,sp,4
  806774:	f800283a 	ret

00806778 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  806778:	defffe04 	addi	sp,sp,-8
  80677c:	df000115 	stw	fp,4(sp)
  806780:	df000104 	addi	fp,sp,4
  806784:	e13fff15 	stw	r4,-4(fp)
}
  806788:	0001883a 	nop
  80678c:	e037883a 	mov	sp,fp
  806790:	df000017 	ldw	fp,0(sp)
  806794:	dec00104 	addi	sp,sp,4
  806798:	f800283a 	ret

0080679c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80679c:	defffe04 	addi	sp,sp,-8
  8067a0:	dfc00115 	stw	ra,4(sp)
  8067a4:	df000015 	stw	fp,0(sp)
  8067a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8067ac:	d0a00617 	ldw	r2,-32744(gp)
  8067b0:	10000326 	beq	r2,zero,8067c0 <alt_get_errno+0x24>
  8067b4:	d0a00617 	ldw	r2,-32744(gp)
  8067b8:	103ee83a 	callr	r2
  8067bc:	00000106 	br	8067c4 <alt_get_errno+0x28>
  8067c0:	d0a71f04 	addi	r2,gp,-25476
}
  8067c4:	e037883a 	mov	sp,fp
  8067c8:	dfc00117 	ldw	ra,4(sp)
  8067cc:	df000017 	ldw	fp,0(sp)
  8067d0:	dec00204 	addi	sp,sp,8
  8067d4:	f800283a 	ret

008067d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8067d8:	defff904 	addi	sp,sp,-28
  8067dc:	dfc00615 	stw	ra,24(sp)
  8067e0:	df000515 	stw	fp,20(sp)
  8067e4:	df000504 	addi	fp,sp,20
  8067e8:	e13ffd15 	stw	r4,-12(fp)
  8067ec:	e17ffe15 	stw	r5,-8(fp)
  8067f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8067f4:	e0bffd17 	ldw	r2,-12(fp)
  8067f8:	10000616 	blt	r2,zero,806814 <read+0x3c>
  8067fc:	e0bffd17 	ldw	r2,-12(fp)
  806800:	10c00324 	muli	r3,r2,12
  806804:	00802074 	movhi	r2,129
  806808:	10a00d04 	addi	r2,r2,-32716
  80680c:	1885883a 	add	r2,r3,r2
  806810:	00000106 	br	806818 <read+0x40>
  806814:	0005883a 	mov	r2,zero
  806818:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80681c:	e0bffb17 	ldw	r2,-20(fp)
  806820:	10002226 	beq	r2,zero,8068ac <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  806824:	e0bffb17 	ldw	r2,-20(fp)
  806828:	10800217 	ldw	r2,8(r2)
  80682c:	108000cc 	andi	r2,r2,3
  806830:	10800060 	cmpeqi	r2,r2,1
  806834:	1000181e 	bne	r2,zero,806898 <read+0xc0>
        (fd->dev->read))
  806838:	e0bffb17 	ldw	r2,-20(fp)
  80683c:	10800017 	ldw	r2,0(r2)
  806840:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  806844:	10001426 	beq	r2,zero,806898 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  806848:	e0bffb17 	ldw	r2,-20(fp)
  80684c:	10800017 	ldw	r2,0(r2)
  806850:	10800517 	ldw	r2,20(r2)
  806854:	e0ffff17 	ldw	r3,-4(fp)
  806858:	180d883a 	mov	r6,r3
  80685c:	e17ffe17 	ldw	r5,-8(fp)
  806860:	e13ffb17 	ldw	r4,-20(fp)
  806864:	103ee83a 	callr	r2
  806868:	e0bffc15 	stw	r2,-16(fp)
  80686c:	e0bffc17 	ldw	r2,-16(fp)
  806870:	1000070e 	bge	r2,zero,806890 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  806874:	080679c0 	call	80679c <alt_get_errno>
  806878:	1007883a 	mov	r3,r2
  80687c:	e0bffc17 	ldw	r2,-16(fp)
  806880:	0085c83a 	sub	r2,zero,r2
  806884:	18800015 	stw	r2,0(r3)
          return -1;
  806888:	00bfffc4 	movi	r2,-1
  80688c:	00000c06 	br	8068c0 <read+0xe8>
        }
        return rval;
  806890:	e0bffc17 	ldw	r2,-16(fp)
  806894:	00000a06 	br	8068c0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  806898:	080679c0 	call	80679c <alt_get_errno>
  80689c:	1007883a 	mov	r3,r2
  8068a0:	00800344 	movi	r2,13
  8068a4:	18800015 	stw	r2,0(r3)
  8068a8:	00000406 	br	8068bc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8068ac:	080679c0 	call	80679c <alt_get_errno>
  8068b0:	1007883a 	mov	r3,r2
  8068b4:	00801444 	movi	r2,81
  8068b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8068bc:	00bfffc4 	movi	r2,-1
}
  8068c0:	e037883a 	mov	sp,fp
  8068c4:	dfc00117 	ldw	ra,4(sp)
  8068c8:	df000017 	ldw	fp,0(sp)
  8068cc:	dec00204 	addi	sp,sp,8
  8068d0:	f800283a 	ret

008068d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8068d4:	defff904 	addi	sp,sp,-28
  8068d8:	df000615 	stw	fp,24(sp)
  8068dc:	df000604 	addi	fp,sp,24
  8068e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8068e4:	0005303a 	rdctl	r2,status
  8068e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8068ec:	e0fffe17 	ldw	r3,-8(fp)
  8068f0:	00bfff84 	movi	r2,-2
  8068f4:	1884703a 	and	r2,r3,r2
  8068f8:	1001703a 	wrctl	status,r2
  
  return context;
  8068fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  806900:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  806904:	d0a00f17 	ldw	r2,-32708(gp)
  806908:	10c000c4 	addi	r3,r2,3
  80690c:	00bfff04 	movi	r2,-4
  806910:	1884703a 	and	r2,r3,r2
  806914:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  806918:	d0e00f17 	ldw	r3,-32708(gp)
  80691c:	e0bfff17 	ldw	r2,-4(fp)
  806920:	1887883a 	add	r3,r3,r2
  806924:	00804034 	movhi	r2,256
  806928:	10800004 	addi	r2,r2,0
  80692c:	10c0062e 	bgeu	r2,r3,806948 <sbrk+0x74>
  806930:	e0bffb17 	ldw	r2,-20(fp)
  806934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806938:	e0bffa17 	ldw	r2,-24(fp)
  80693c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  806940:	00bfffc4 	movi	r2,-1
  806944:	00000b06 	br	806974 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  806948:	d0a00f17 	ldw	r2,-32708(gp)
  80694c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  806950:	d0e00f17 	ldw	r3,-32708(gp)
  806954:	e0bfff17 	ldw	r2,-4(fp)
  806958:	1885883a 	add	r2,r3,r2
  80695c:	d0a00f15 	stw	r2,-32708(gp)
  806960:	e0bffb17 	ldw	r2,-20(fp)
  806964:	e0bffc15 	stw	r2,-16(fp)
  806968:	e0bffc17 	ldw	r2,-16(fp)
  80696c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  806970:	e0bffd17 	ldw	r2,-12(fp)
} 
  806974:	e037883a 	mov	sp,fp
  806978:	df000017 	ldw	fp,0(sp)
  80697c:	dec00104 	addi	sp,sp,4
  806980:	f800283a 	ret

00806984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806984:	defffe04 	addi	sp,sp,-8
  806988:	dfc00115 	stw	ra,4(sp)
  80698c:	df000015 	stw	fp,0(sp)
  806990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806994:	d0a00617 	ldw	r2,-32744(gp)
  806998:	10000326 	beq	r2,zero,8069a8 <alt_get_errno+0x24>
  80699c:	d0a00617 	ldw	r2,-32744(gp)
  8069a0:	103ee83a 	callr	r2
  8069a4:	00000106 	br	8069ac <alt_get_errno+0x28>
  8069a8:	d0a71f04 	addi	r2,gp,-25476
}
  8069ac:	e037883a 	mov	sp,fp
  8069b0:	dfc00117 	ldw	ra,4(sp)
  8069b4:	df000017 	ldw	fp,0(sp)
  8069b8:	dec00204 	addi	sp,sp,8
  8069bc:	f800283a 	ret

008069c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8069c0:	defff904 	addi	sp,sp,-28
  8069c4:	dfc00615 	stw	ra,24(sp)
  8069c8:	df000515 	stw	fp,20(sp)
  8069cc:	df000504 	addi	fp,sp,20
  8069d0:	e13ffd15 	stw	r4,-12(fp)
  8069d4:	e17ffe15 	stw	r5,-8(fp)
  8069d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8069dc:	e0bffd17 	ldw	r2,-12(fp)
  8069e0:	10000616 	blt	r2,zero,8069fc <write+0x3c>
  8069e4:	e0bffd17 	ldw	r2,-12(fp)
  8069e8:	10c00324 	muli	r3,r2,12
  8069ec:	00802074 	movhi	r2,129
  8069f0:	10a00d04 	addi	r2,r2,-32716
  8069f4:	1885883a 	add	r2,r3,r2
  8069f8:	00000106 	br	806a00 <write+0x40>
  8069fc:	0005883a 	mov	r2,zero
  806a00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  806a04:	e0bffb17 	ldw	r2,-20(fp)
  806a08:	10002126 	beq	r2,zero,806a90 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  806a0c:	e0bffb17 	ldw	r2,-20(fp)
  806a10:	10800217 	ldw	r2,8(r2)
  806a14:	108000cc 	andi	r2,r2,3
  806a18:	10001826 	beq	r2,zero,806a7c <write+0xbc>
  806a1c:	e0bffb17 	ldw	r2,-20(fp)
  806a20:	10800017 	ldw	r2,0(r2)
  806a24:	10800617 	ldw	r2,24(r2)
  806a28:	10001426 	beq	r2,zero,806a7c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  806a2c:	e0bffb17 	ldw	r2,-20(fp)
  806a30:	10800017 	ldw	r2,0(r2)
  806a34:	10800617 	ldw	r2,24(r2)
  806a38:	e0ffff17 	ldw	r3,-4(fp)
  806a3c:	180d883a 	mov	r6,r3
  806a40:	e17ffe17 	ldw	r5,-8(fp)
  806a44:	e13ffb17 	ldw	r4,-20(fp)
  806a48:	103ee83a 	callr	r2
  806a4c:	e0bffc15 	stw	r2,-16(fp)
  806a50:	e0bffc17 	ldw	r2,-16(fp)
  806a54:	1000070e 	bge	r2,zero,806a74 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  806a58:	08069840 	call	806984 <alt_get_errno>
  806a5c:	1007883a 	mov	r3,r2
  806a60:	e0bffc17 	ldw	r2,-16(fp)
  806a64:	0085c83a 	sub	r2,zero,r2
  806a68:	18800015 	stw	r2,0(r3)
        return -1;
  806a6c:	00bfffc4 	movi	r2,-1
  806a70:	00000c06 	br	806aa4 <write+0xe4>
      }
      return rval;
  806a74:	e0bffc17 	ldw	r2,-16(fp)
  806a78:	00000a06 	br	806aa4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  806a7c:	08069840 	call	806984 <alt_get_errno>
  806a80:	1007883a 	mov	r3,r2
  806a84:	00800344 	movi	r2,13
  806a88:	18800015 	stw	r2,0(r3)
  806a8c:	00000406 	br	806aa0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  806a90:	08069840 	call	806984 <alt_get_errno>
  806a94:	1007883a 	mov	r3,r2
  806a98:	00801444 	movi	r2,81
  806a9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  806aa0:	00bfffc4 	movi	r2,-1
}
  806aa4:	e037883a 	mov	sp,fp
  806aa8:	dfc00117 	ldw	ra,4(sp)
  806aac:	df000017 	ldw	fp,0(sp)
  806ab0:	dec00204 	addi	sp,sp,8
  806ab4:	f800283a 	ret
