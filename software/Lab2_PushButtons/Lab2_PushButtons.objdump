
Lab2_PushButtons.elf:     file format elf32-littlenios2
Lab2_PushButtons.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800248

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00003f3c memsz 0x00003f3c flags r-x
    LOAD off    0x00004f5c vaddr 0x00803f5c paddr 0x00805768 align 2**12
         filesz 0x0000180c memsz 0x0000180c flags rw-
    LOAD off    0x00006f74 vaddr 0x00806f74 paddr 0x00806f74 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003a18  00800248  00800248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002fc  00803c60  00803c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000180c  00803f5c  00805768  00004f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00806f74  00806f74  00006f74  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  00807094  00807094  00006768  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f0  00000000  00000000  00006790  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000092eb  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000332a  00000000  00000000  0001016b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000038ac  00000000  00000000  00013495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e50  00000000  00000000  00016d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002280  00000000  00000000  00017b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000de4  00000000  00000000  00019e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001abf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  0001ac58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ce12  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001ce15  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ce21  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ce22  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ce23  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001ce27  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001ce2b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001ce2f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001ce3a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001ce45  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001ce50  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0001ce53  2**0
                  CONTENTS, READONLY
 29 .jdi          00005cac  00000000  00000000  0001ce82  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008f502  00000000  00000000  00022b2e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800248 l    d  .text	00000000 .text
00803c60 l    d  .rodata	00000000 .rodata
00803f5c l    d  .rwdata	00000000 .rwdata
00806f74 l    d  .bss	00000000 .bss
00807094 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_PushButtons_bsp//obj/HAL/src/crt0.o
00800290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00800300 l     F .text	0000007c timer_end
0080037c l     F .text	00000068 button_press
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00800564 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008006cc l     F .text	00000034 alt_dev_reg
00803f5c l     O .rwdata	00001060 jtag_uart_0
00804fbc l     O .rwdata	00000120 lcd_display
008050dc l     O .rwdata	0000002c uart
00805108 l     O .rwdata	00000030 audio_i2c_config
00805138 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008009f0 l     F .text	00000210 altera_avalon_jtag_uart_irq
00800c00 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00805738 l     O .rwdata	00000004 colstart
00801238 l     F .text	000000b8 lcd_write_command
008012f0 l     F .text	000000d8 lcd_write_data
008013c8 l     F .text	000000d0 lcd_clear_screen
00801498 l     F .text	000001ec lcd_repaint_screen
00801684 l     F .text	000000cc lcd_scroll_up
00801750 l     F .text	000002ac lcd_handle_escape
00801ed4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00802114 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008022c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008023c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080260c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802760 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080278c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802960 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00802aa0 l     F .text	0000003c alt_get_errno
00802adc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00803dd7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00805310 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00806f8c g     O .bss	00000004 alt_instruction_exception_handler
00800650 g     F .text	0000007c alt_main
00806f94 g     O .bss	00000100 alt_irq
00805768 g       *ABS*	00000000 __flash_rwdata_start
00802f2c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00806f90 g     O .bss	00000004 errno
00806f7c g     O .bss	00000004 alt_argv
0080d734 g       *ABS*	00000000 _gp
00802efc g     F .text	00000030 usleep
00805190 g     O .rwdata	00000180 alt_fd_list
008030a8 g     F .text	00000090 alt_find_dev
008034d8 g     F .text	00000148 memcpy
00802a24 g     F .text	0000007c alt_io_redirect
00803c60 g       *ABS*	00000000 __DTOR_END__
00803374 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00800df8 g     F .text	0000021c altera_avalon_jtag_uart_read
00803b70 g     F .text	00000064 .hidden __udivsi3
008032e4 g     F .text	00000090 alt_icache_flush
0080574c g     O .rwdata	00000004 alt_max_fd
008003e4 g     F .text	00000180 alt_irq_register
00805760 g     O .rwdata	00000004 _global_impure_ptr
00807094 g       *ABS*	00000000 __bss_end
00802df4 g     F .text	00000108 alt_tick
00802d58 g     F .text	0000009c alt_alarm_stop
00806f74 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d8 alt_irq_handler
00805168 g     O .rwdata	00000028 alt_dev_null
00802718 g     F .text	00000048 alt_dcache_flush_all
00805768 g       *ABS*	00000000 __ram_rwdata_end
00805744 g     O .rwdata	00000008 alt_dev_list
00803f5c g       *ABS*	00000000 __ram_rodata_end
00803bd4 g     F .text	00000058 .hidden __umodsi3
00807094 g       *ABS*	00000000 end
008019fc g     F .text	000004d8 altera_avalon_lcd_16207_write
00802400 g     F .text	000000e0 altera_avalon_uart_write
0080093c g     F .text	000000b4 altera_avalon_jtag_uart_init
008001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00803c60 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802190 g     F .text	00000074 alt_avalon_timer_sc_init
00802264 g     F .text	00000060 altera_avalon_uart_write_fd
00801014 g     F .text	00000224 altera_avalon_jtag_uart_write
008038f8 g     F .text	00000180 __call_exitprocs
00800248 g     F .text	0000004c _start
00806f84 g     O .bss	00000004 _alt_tick_rate
00806f88 g     O .bss	00000004 _alt_nticks
00800738 g     F .text	000000a0 alt_sys_init
008037e0 g     F .text	00000118 __register_exitproc
00800ca0 g     F .text	00000068 altera_avalon_jtag_uart_close
00803f5c g       *ABS*	00000000 __ram_rwdata_start
00803c60 g       *ABS*	00000000 __ram_rodata_start
008007d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00803240 g     F .text	000000a4 alt_get_fd
00802f50 g     F .text	00000158 alt_busy_sleep
0080345c g     F .text	0000007c memcmp
00800898 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00807094 g       *ABS*	00000000 __alt_stack_base
008008e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00803138 g     F .text	00000108 alt_find_file
008027c8 g     F .text	000000a4 alt_dev_llist_insert
00806f74 g       *ABS*	00000000 __bss_start
00803620 g     F .text	00000128 memset
00800294 g     F .text	0000006c main
00806f80 g     O .bss	00000004 alt_envp
00800838 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00801f80 g     F .text	00000134 altera_avalon_lcd_16207_init
00805750 g     O .rwdata	00000004 alt_errno
00803a78 g     F .text	00000084 .hidden __divsi3
00803c60 g       *ABS*	00000000 __CTOR_END__
00803c60 g       *ABS*	00000000 __flash_rodata_start
00803c60 g       *ABS*	00000000 __DTOR_LIST__
00800700 g     F .text	00000038 alt_irq_init
00802cf4 g     F .text	00000064 alt_release_fd
00803410 g     F .text	00000014 atexit
00805764 g     O .rwdata	00000004 _impure_ptr
00806f78 g     O .bss	00000004 alt_argc
008028cc g     F .text	00000060 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008020b4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080573c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805768 g       *ABS*	00000000 _edata
00802204 g     F .text	00000060 altera_avalon_uart_read_fd
00807094 g       *ABS*	00000000 _end
00800248 g       *ABS*	00000000 __ram_exceptions_end
00800d08 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00803424 g     F .text	00000038 exit
00803afc g     F .text	00000074 .hidden __modsi3
0080575c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00803cd6 g     O .rodata	00000101 _ctype_
00803c2c g     F .text	00000034 _exit
008024e0 g     F .text	0000012c alt_alarm_start
00803748 g     F .text	00000098 strlen
00802ba0 g     F .text	00000154 open
0080292c g     F .text	00000034 alt_icache_flush_all
00805734 g     O .rwdata	00000004 alt_priority_mask
00802300 g     F .text	000000c4 altera_avalon_uart_read
00805754 g     O .rwdata	00000008 alt_alarm_list
0080286c g     F .text	00000060 _do_ctors
00802648 g     F .text	000000d0 close
008005cc g     F .text	00000084 alt_load



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409214 	ori	at,at,584
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802034 	movhi	r2,128
  800140:	109be504 	addi	r2,r2,28564
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	109be504 	addi	r2,r2,28564
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e8:	000531fa 	rdctl	r2,exception
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001f0:	e0bffd17 	ldw	r2,-12(fp)
  8001f4:	10801f0c 	andi	r2,r2,124
  8001f8:	1004d0ba 	srli	r2,r2,2
  8001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  800200:	0005333a 	rdctl	r2,badaddr
  800204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800208:	d0a61617 	ldw	r2,-26536(gp)
  80020c:	10000726 	beq	r2,zero,80022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800210:	d0a61617 	ldw	r2,-26536(gp)
  800214:	e0fffd17 	ldw	r3,-12(fp)
  800218:	e1bffe17 	ldw	r6,-8(fp)
  80021c:	e17fff17 	ldw	r5,-4(fp)
  800220:	1809883a 	mov	r4,r3
  800224:	103ee83a 	callr	r2
  800228:	00000206 	br	800234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800230:	0005883a 	mov	r2,zero
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

Disassembly of section .text:

00800248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800254:	00bffd16 	blt	zero,r2,80024c <__alt_data_end+0xff80024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800258:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800260:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800264:	d6b5cd14 	ori	gp,gp,55092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800268:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  80026c:	109bdd14 	ori	r2,r2,28532

    movhi r3, %hi(__bss_end)
  800270:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800274:	18dc2514 	ori	r3,r3,28820

    beq r2, r3, 1f
  800278:	10c00326 	beq	r2,r3,800288 <_start+0x40>

0:
    stw zero, (r2)
  80027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800284:	10fffd36 	bltu	r2,r3,80027c <__alt_data_end+0xff80027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800288:	08005cc0 	call	8005cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80028c:	08006500 	call	800650 <alt_main>

00800290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800290:	003fff06 	br	800290 <__alt_data_end+0xff800290>

00800294 <main>:

static void button_press(void * context, alt_u32 id);
static void timer_end(void * context, alt_u32 id);

int main()
{
  800294:	defffe04 	addi	sp,sp,-8
  800298:	dfc00115 	stw	ra,4(sp)
  80029c:	df000015 	stw	fp,0(sp)
  8002a0:	d839883a 	mov	fp,sp
	//register ISRs
	alt_irq_register(TIMER_0_IRQ, (void*) 0, timer_end);
  8002a4:	01802034 	movhi	r6,128
  8002a8:	3180c004 	addi	r6,r6,768
  8002ac:	000b883a 	mov	r5,zero
  8002b0:	01000144 	movi	r4,5
  8002b4:	08003e40 	call	8003e4 <alt_irq_register>
	alt_irq_register(BUTTON_PIO_IRQ, (void*) 0, button_press);
  8002b8:	01802034 	movhi	r6,128
  8002bc:	3180df04 	addi	r6,r6,892
  8002c0:	000b883a 	mov	r5,zero
  8002c4:	01000044 	movi	r4,1
  8002c8:	08003e40 	call	8003e4 <alt_irq_register>

	IOWR(LED_PIO_BASE, 0, 0);
  8002cc:	0007883a 	mov	r3,zero
  8002d0:	00804034 	movhi	r2,256
  8002d4:	10844c04 	addi	r2,r2,4400
  8002d8:	10c00035 	stwio	r3,0(r2)
	IOWR(BUTTON_PIO_BASE, 2, 0xF);
  8002dc:	00c003c4 	movi	r3,15
  8002e0:	00804034 	movhi	r2,256
  8002e4:	10844a04 	addi	r2,r2,4392
  8002e8:	10c00035 	stwio	r3,0(r2)

	//enable all button interrupts
	IOWR(BUTTON_PIO_BASE, 2, 0xF);
  8002ec:	00c003c4 	movi	r3,15
  8002f0:	00804034 	movhi	r2,256
  8002f4:	10844a04 	addi	r2,r2,4392
  8002f8:	10c00035 	stwio	r3,0(r2)
	while (1) {

	}
  8002fc:	003fff06 	br	8002fc <__alt_data_end+0xff8002fc>

00800300 <timer_end>:
	return 0;
}

static void timer_end(void * context, alt_u32 id){
  800300:	defffc04 	addi	sp,sp,-16
  800304:	df000315 	stw	fp,12(sp)
  800308:	df000304 	addi	fp,sp,12
  80030c:	e13ffe15 	stw	r4,-8(fp)
  800310:	e17fff15 	stw	r5,-4(fp)
	//read the button status
	int status = IORD(BUTTON_PIO_BASE, 0);
  800314:	00804034 	movhi	r2,256
  800318:	10844804 	addi	r2,r2,4384
  80031c:	10800037 	ldwio	r2,0(r2)
  800320:	e0bffd15 	stw	r2,-12(fp)

	IOWR(LED_PIO_BASE, 0, status ^ 0xF);
  800324:	e0bffd17 	ldw	r2,-12(fp)
  800328:	10c003dc 	xori	r3,r2,15
  80032c:	00804034 	movhi	r2,256
  800330:	10844c04 	addi	r2,r2,4400
  800334:	10c00035 	stwio	r3,0(r2)
	//clear status of the timer
	IOWR(TIMER_0_BASE, 0, 0);
  800338:	0007883a 	mov	r3,zero
  80033c:	00804034 	movhi	r2,256
  800340:	10841804 	addi	r2,r2,4192
  800344:	10c00035 	stwio	r3,0(r2)
	//clear interrupt request
	IOWR(BUTTON_PIO_BASE, 3, 0);
  800348:	0007883a 	mov	r3,zero
  80034c:	00804034 	movhi	r2,256
  800350:	10844b04 	addi	r2,r2,4396
  800354:	10c00035 	stwio	r3,0(r2)
	//enable button interrupts
	IOWR(BUTTON_PIO_BASE, 2, 0xF);
  800358:	00c003c4 	movi	r3,15
  80035c:	00804034 	movhi	r2,256
  800360:	10844a04 	addi	r2,r2,4392
  800364:	10c00035 	stwio	r3,0(r2)
}
  800368:	0001883a 	nop
  80036c:	e037883a 	mov	sp,fp
  800370:	df000017 	ldw	fp,0(sp)
  800374:	dec00104 	addi	sp,sp,4
  800378:	f800283a 	ret

0080037c <button_press>:

static void button_press(void * context, alt_u32 id){
  80037c:	defffd04 	addi	sp,sp,-12
  800380:	df000215 	stw	fp,8(sp)
  800384:	df000204 	addi	fp,sp,8
  800388:	e13ffe15 	stw	r4,-8(fp)
  80038c:	e17fff15 	stw	r5,-4(fp)
	//disable interrupts from button
	IOWR(BUTTON_PIO_BASE, 2, 0);
  800390:	0007883a 	mov	r3,zero
  800394:	00804034 	movhi	r2,256
  800398:	10844a04 	addi	r2,r2,4392
  80039c:	10c00035 	stwio	r3,0(r2)

	//debounce button press, start timer
	IOWR(TIMER_0_BASE, 2, 0x4240);
  8003a0:	00d09004 	movi	r3,16960
  8003a4:	00804034 	movhi	r2,256
  8003a8:	10841a04 	addi	r2,r2,4200
  8003ac:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 3, 0xF);
  8003b0:	00c003c4 	movi	r3,15
  8003b4:	00804034 	movhi	r2,256
  8003b8:	10841b04 	addi	r2,r2,4204
  8003bc:	10c00035 	stwio	r3,0(r2)

	IOWR(TIMER_0_BASE, 1, 0x5); // 0x5 since we want START bit and ITO bit to be 1, 0b0101 = 0x5
  8003c0:	00c00144 	movi	r3,5
  8003c4:	00804034 	movhi	r2,256
  8003c8:	10841904 	addi	r2,r2,4196
  8003cc:	10c00035 	stwio	r3,0(r2)
}
  8003d0:	0001883a 	nop
  8003d4:	e037883a 	mov	sp,fp
  8003d8:	df000017 	ldw	fp,0(sp)
  8003dc:	dec00104 	addi	sp,sp,4
  8003e0:	f800283a 	ret

008003e4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8003e4:	defff004 	addi	sp,sp,-64
  8003e8:	df000f15 	stw	fp,60(sp)
  8003ec:	df000f04 	addi	fp,sp,60
  8003f0:	e13ffd15 	stw	r4,-12(fp)
  8003f4:	e17ffe15 	stw	r5,-8(fp)
  8003f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  8003fc:	00bffa84 	movi	r2,-22
  800400:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  800404:	e0bffd17 	ldw	r2,-12(fp)
  800408:	10800828 	cmpgeui	r2,r2,32
  80040c:	1000501e 	bne	r2,zero,800550 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800410:	0005303a 	rdctl	r2,status
  800414:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800418:	e0fff617 	ldw	r3,-40(fp)
  80041c:	00bfff84 	movi	r2,-2
  800420:	1884703a 	and	r2,r3,r2
  800424:	1001703a 	wrctl	status,r2
  
  return context;
  800428:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80042c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  800430:	00802034 	movhi	r2,128
  800434:	109be504 	addi	r2,r2,28564
  800438:	e0fffd17 	ldw	r3,-12(fp)
  80043c:	180690fa 	slli	r3,r3,3
  800440:	10c5883a 	add	r2,r2,r3
  800444:	e0ffff17 	ldw	r3,-4(fp)
  800448:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80044c:	00802034 	movhi	r2,128
  800450:	109be504 	addi	r2,r2,28564
  800454:	e0fffd17 	ldw	r3,-12(fp)
  800458:	180690fa 	slli	r3,r3,3
  80045c:	10c5883a 	add	r2,r2,r3
  800460:	10800104 	addi	r2,r2,4
  800464:	e0fffe17 	ldw	r3,-8(fp)
  800468:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80046c:	e0bfff17 	ldw	r2,-4(fp)
  800470:	10001926 	beq	r2,zero,8004d8 <alt_irq_register+0xf4>
  800474:	e0bffd17 	ldw	r2,-12(fp)
  800478:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80047c:	0005303a 	rdctl	r2,status
  800480:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800484:	e0fff717 	ldw	r3,-36(fp)
  800488:	00bfff84 	movi	r2,-2
  80048c:	1884703a 	and	r2,r3,r2
  800490:	1001703a 	wrctl	status,r2
  
  return context;
  800494:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  800498:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80049c:	00c00044 	movi	r3,1
  8004a0:	e0bff217 	ldw	r2,-56(fp)
  8004a4:	1884983a 	sll	r2,r3,r2
  8004a8:	1007883a 	mov	r3,r2
  8004ac:	d0a61017 	ldw	r2,-26560(gp)
  8004b0:	1884b03a 	or	r2,r3,r2
  8004b4:	d0a61015 	stw	r2,-26560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8004b8:	d0a61017 	ldw	r2,-26560(gp)
  8004bc:	100170fa 	wrctl	ienable,r2
  8004c0:	e0bff817 	ldw	r2,-32(fp)
  8004c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8004c8:	e0bff917 	ldw	r2,-28(fp)
  8004cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8004d0:	0005883a 	mov	r2,zero
  8004d4:	00001906 	br	80053c <alt_irq_register+0x158>
  8004d8:	e0bffd17 	ldw	r2,-12(fp)
  8004dc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8004e0:	0005303a 	rdctl	r2,status
  8004e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8004e8:	e0fffa17 	ldw	r3,-24(fp)
  8004ec:	00bfff84 	movi	r2,-2
  8004f0:	1884703a 	and	r2,r3,r2
  8004f4:	1001703a 	wrctl	status,r2
  
  return context;
  8004f8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8004fc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  800500:	00c00044 	movi	r3,1
  800504:	e0bff417 	ldw	r2,-48(fp)
  800508:	1884983a 	sll	r2,r3,r2
  80050c:	0084303a 	nor	r2,zero,r2
  800510:	1007883a 	mov	r3,r2
  800514:	d0a61017 	ldw	r2,-26560(gp)
  800518:	1884703a 	and	r2,r3,r2
  80051c:	d0a61015 	stw	r2,-26560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800520:	d0a61017 	ldw	r2,-26560(gp)
  800524:	100170fa 	wrctl	ienable,r2
  800528:	e0bffb17 	ldw	r2,-20(fp)
  80052c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800530:	e0bffc17 	ldw	r2,-16(fp)
  800534:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  800538:	0005883a 	mov	r2,zero
  80053c:	e0bff115 	stw	r2,-60(fp)
  800540:	e0bff317 	ldw	r2,-52(fp)
  800544:	e0bff515 	stw	r2,-44(fp)
  800548:	e0bff517 	ldw	r2,-44(fp)
  80054c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  800550:	e0bff117 	ldw	r2,-60(fp)
}
  800554:	e037883a 	mov	sp,fp
  800558:	df000017 	ldw	fp,0(sp)
  80055c:	dec00104 	addi	sp,sp,4
  800560:	f800283a 	ret

00800564 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800564:	defffc04 	addi	sp,sp,-16
  800568:	df000315 	stw	fp,12(sp)
  80056c:	df000304 	addi	fp,sp,12
  800570:	e13ffd15 	stw	r4,-12(fp)
  800574:	e17ffe15 	stw	r5,-8(fp)
  800578:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80057c:	e0fffe17 	ldw	r3,-8(fp)
  800580:	e0bffd17 	ldw	r2,-12(fp)
  800584:	18800c26 	beq	r3,r2,8005b8 <alt_load_section+0x54>
  {
    while( to != end )
  800588:	00000806 	br	8005ac <alt_load_section+0x48>
    {
      *to++ = *from++;
  80058c:	e0bffe17 	ldw	r2,-8(fp)
  800590:	10c00104 	addi	r3,r2,4
  800594:	e0fffe15 	stw	r3,-8(fp)
  800598:	e0fffd17 	ldw	r3,-12(fp)
  80059c:	19000104 	addi	r4,r3,4
  8005a0:	e13ffd15 	stw	r4,-12(fp)
  8005a4:	18c00017 	ldw	r3,0(r3)
  8005a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8005ac:	e0fffe17 	ldw	r3,-8(fp)
  8005b0:	e0bfff17 	ldw	r2,-4(fp)
  8005b4:	18bff51e 	bne	r3,r2,80058c <__alt_data_end+0xff80058c>
    {
      *to++ = *from++;
    }
  }
}
  8005b8:	0001883a 	nop
  8005bc:	e037883a 	mov	sp,fp
  8005c0:	df000017 	ldw	fp,0(sp)
  8005c4:	dec00104 	addi	sp,sp,4
  8005c8:	f800283a 	ret

008005cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8005cc:	defffe04 	addi	sp,sp,-8
  8005d0:	dfc00115 	stw	ra,4(sp)
  8005d4:	df000015 	stw	fp,0(sp)
  8005d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8005dc:	01802034 	movhi	r6,128
  8005e0:	3195da04 	addi	r6,r6,22376
  8005e4:	01402034 	movhi	r5,128
  8005e8:	294fd704 	addi	r5,r5,16220
  8005ec:	01002034 	movhi	r4,128
  8005f0:	2115da04 	addi	r4,r4,22376
  8005f4:	08005640 	call	800564 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8005f8:	01802034 	movhi	r6,128
  8005fc:	31809204 	addi	r6,r6,584
  800600:	01402034 	movhi	r5,128
  800604:	29400804 	addi	r5,r5,32
  800608:	01002034 	movhi	r4,128
  80060c:	21000804 	addi	r4,r4,32
  800610:	08005640 	call	800564 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800614:	01802034 	movhi	r6,128
  800618:	318fd704 	addi	r6,r6,16220
  80061c:	01402034 	movhi	r5,128
  800620:	294f1804 	addi	r5,r5,15456
  800624:	01002034 	movhi	r4,128
  800628:	210f1804 	addi	r4,r4,15456
  80062c:	08005640 	call	800564 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800630:	08027180 	call	802718 <alt_dcache_flush_all>
  alt_icache_flush_all();
  800634:	080292c0 	call	80292c <alt_icache_flush_all>
}
  800638:	0001883a 	nop
  80063c:	e037883a 	mov	sp,fp
  800640:	dfc00117 	ldw	ra,4(sp)
  800644:	df000017 	ldw	fp,0(sp)
  800648:	dec00204 	addi	sp,sp,8
  80064c:	f800283a 	ret

00800650 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800650:	defffd04 	addi	sp,sp,-12
  800654:	dfc00215 	stw	ra,8(sp)
  800658:	df000115 	stw	fp,4(sp)
  80065c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800660:	0009883a 	mov	r4,zero
  800664:	08007000 	call	800700 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800668:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80066c:	08007380 	call	800738 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800670:	01802034 	movhi	r6,128
  800674:	318f1804 	addi	r6,r6,15456
  800678:	01402034 	movhi	r5,128
  80067c:	294f1804 	addi	r5,r5,15456
  800680:	01002034 	movhi	r4,128
  800684:	210f1804 	addi	r4,r4,15456
  800688:	0802a240 	call	802a24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80068c:	080286c0 	call	80286c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800690:	01002034 	movhi	r4,128
  800694:	210a3304 	addi	r4,r4,10444
  800698:	08034100 	call	803410 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80069c:	d0a61117 	ldw	r2,-26556(gp)
  8006a0:	d0e61217 	ldw	r3,-26552(gp)
  8006a4:	d1261317 	ldw	r4,-26548(gp)
  8006a8:	200d883a 	mov	r6,r4
  8006ac:	180b883a 	mov	r5,r3
  8006b0:	1009883a 	mov	r4,r2
  8006b4:	08002940 	call	800294 <main>
  8006b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8006bc:	01000044 	movi	r4,1
  8006c0:	08026480 	call	802648 <close>
  exit (result);
  8006c4:	e13fff17 	ldw	r4,-4(fp)
  8006c8:	08034240 	call	803424 <exit>

008006cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8006cc:	defffd04 	addi	sp,sp,-12
  8006d0:	dfc00215 	stw	ra,8(sp)
  8006d4:	df000115 	stw	fp,4(sp)
  8006d8:	df000104 	addi	fp,sp,4
  8006dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8006e0:	d1600404 	addi	r5,gp,-32752
  8006e4:	e13fff17 	ldw	r4,-4(fp)
  8006e8:	08027c80 	call	8027c8 <alt_dev_llist_insert>
}
  8006ec:	e037883a 	mov	sp,fp
  8006f0:	dfc00117 	ldw	ra,4(sp)
  8006f4:	df000017 	ldw	fp,0(sp)
  8006f8:	dec00204 	addi	sp,sp,8
  8006fc:	f800283a 	ret

00800700 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800700:	defffd04 	addi	sp,sp,-12
  800704:	dfc00215 	stw	ra,8(sp)
  800708:	df000115 	stw	fp,4(sp)
  80070c:	df000104 	addi	fp,sp,4
  800710:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  800714:	0802f2c0 	call	802f2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800718:	00800044 	movi	r2,1
  80071c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800720:	0001883a 	nop
  800724:	e037883a 	mov	sp,fp
  800728:	dfc00117 	ldw	ra,4(sp)
  80072c:	df000017 	ldw	fp,0(sp)
  800730:	dec00204 	addi	sp,sp,8
  800734:	f800283a 	ret

00800738 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800738:	defffe04 	addi	sp,sp,-8
  80073c:	dfc00115 	stw	ra,4(sp)
  800740:	df000015 	stw	fp,0(sp)
  800744:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  800748:	01c0fa04 	movi	r7,1000
  80074c:	01800104 	movi	r6,4
  800750:	000b883a 	mov	r5,zero
  800754:	01004034 	movhi	r4,256
  800758:	21042004 	addi	r4,r4,4224
  80075c:	08021900 	call	802190 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  800760:	000d883a 	mov	r6,zero
  800764:	000b883a 	mov	r5,zero
  800768:	01002034 	movhi	r4,128
  80076c:	210fe104 	addi	r4,r4,16260
  800770:	080093c0 	call	80093c <altera_avalon_jtag_uart_init>
  800774:	01002034 	movhi	r4,128
  800778:	210fd704 	addi	r4,r4,16220
  80077c:	08006cc0 	call	8006cc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  800780:	01002034 	movhi	r4,128
  800784:	2113f904 	addi	r4,r4,20452
  800788:	0801f800 	call	801f80 <altera_avalon_lcd_16207_init>
  80078c:	01002034 	movhi	r4,128
  800790:	2113ef04 	addi	r4,r4,20412
  800794:	08006cc0 	call	8006cc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  800798:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80079c:	01002034 	movhi	r4,128
  8007a0:	21143704 	addi	r4,r4,20700
  8007a4:	08006cc0 	call	8006cc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  8007a8:	01002034 	movhi	r4,128
  8007ac:	21144204 	addi	r4,r4,20744
  8007b0:	08006cc0 	call	8006cc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  8007b4:	01002034 	movhi	r4,128
  8007b8:	21144e04 	addi	r4,r4,20792
  8007bc:	08006cc0 	call	8006cc <alt_dev_reg>
}
  8007c0:	0001883a 	nop
  8007c4:	e037883a 	mov	sp,fp
  8007c8:	dfc00117 	ldw	ra,4(sp)
  8007cc:	df000017 	ldw	fp,0(sp)
  8007d0:	dec00204 	addi	sp,sp,8
  8007d4:	f800283a 	ret

008007d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8007d8:	defffa04 	addi	sp,sp,-24
  8007dc:	dfc00515 	stw	ra,20(sp)
  8007e0:	df000415 	stw	fp,16(sp)
  8007e4:	df000404 	addi	fp,sp,16
  8007e8:	e13ffd15 	stw	r4,-12(fp)
  8007ec:	e17ffe15 	stw	r5,-8(fp)
  8007f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8007f4:	e0bffd17 	ldw	r2,-12(fp)
  8007f8:	10800017 	ldw	r2,0(r2)
  8007fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800800:	e0bffc17 	ldw	r2,-16(fp)
  800804:	10c00a04 	addi	r3,r2,40
  800808:	e0bffd17 	ldw	r2,-12(fp)
  80080c:	10800217 	ldw	r2,8(r2)
  800810:	100f883a 	mov	r7,r2
  800814:	e1bfff17 	ldw	r6,-4(fp)
  800818:	e17ffe17 	ldw	r5,-8(fp)
  80081c:	1809883a 	mov	r4,r3
  800820:	0800df80 	call	800df8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800824:	e037883a 	mov	sp,fp
  800828:	dfc00117 	ldw	ra,4(sp)
  80082c:	df000017 	ldw	fp,0(sp)
  800830:	dec00204 	addi	sp,sp,8
  800834:	f800283a 	ret

00800838 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  800838:	defffa04 	addi	sp,sp,-24
  80083c:	dfc00515 	stw	ra,20(sp)
  800840:	df000415 	stw	fp,16(sp)
  800844:	df000404 	addi	fp,sp,16
  800848:	e13ffd15 	stw	r4,-12(fp)
  80084c:	e17ffe15 	stw	r5,-8(fp)
  800850:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800854:	e0bffd17 	ldw	r2,-12(fp)
  800858:	10800017 	ldw	r2,0(r2)
  80085c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800860:	e0bffc17 	ldw	r2,-16(fp)
  800864:	10c00a04 	addi	r3,r2,40
  800868:	e0bffd17 	ldw	r2,-12(fp)
  80086c:	10800217 	ldw	r2,8(r2)
  800870:	100f883a 	mov	r7,r2
  800874:	e1bfff17 	ldw	r6,-4(fp)
  800878:	e17ffe17 	ldw	r5,-8(fp)
  80087c:	1809883a 	mov	r4,r3
  800880:	08010140 	call	801014 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  800884:	e037883a 	mov	sp,fp
  800888:	dfc00117 	ldw	ra,4(sp)
  80088c:	df000017 	ldw	fp,0(sp)
  800890:	dec00204 	addi	sp,sp,8
  800894:	f800283a 	ret

00800898 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800898:	defffc04 	addi	sp,sp,-16
  80089c:	dfc00315 	stw	ra,12(sp)
  8008a0:	df000215 	stw	fp,8(sp)
  8008a4:	df000204 	addi	fp,sp,8
  8008a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8008ac:	e0bfff17 	ldw	r2,-4(fp)
  8008b0:	10800017 	ldw	r2,0(r2)
  8008b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8008b8:	e0bffe17 	ldw	r2,-8(fp)
  8008bc:	10c00a04 	addi	r3,r2,40
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	10800217 	ldw	r2,8(r2)
  8008c8:	100b883a 	mov	r5,r2
  8008cc:	1809883a 	mov	r4,r3
  8008d0:	0800ca00 	call	800ca0 <altera_avalon_jtag_uart_close>
}
  8008d4:	e037883a 	mov	sp,fp
  8008d8:	dfc00117 	ldw	ra,4(sp)
  8008dc:	df000017 	ldw	fp,0(sp)
  8008e0:	dec00204 	addi	sp,sp,8
  8008e4:	f800283a 	ret

008008e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8008e8:	defffa04 	addi	sp,sp,-24
  8008ec:	dfc00515 	stw	ra,20(sp)
  8008f0:	df000415 	stw	fp,16(sp)
  8008f4:	df000404 	addi	fp,sp,16
  8008f8:	e13ffd15 	stw	r4,-12(fp)
  8008fc:	e17ffe15 	stw	r5,-8(fp)
  800900:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  800904:	e0bffd17 	ldw	r2,-12(fp)
  800908:	10800017 	ldw	r2,0(r2)
  80090c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  800910:	e0bffc17 	ldw	r2,-16(fp)
  800914:	10800a04 	addi	r2,r2,40
  800918:	e1bfff17 	ldw	r6,-4(fp)
  80091c:	e17ffe17 	ldw	r5,-8(fp)
  800920:	1009883a 	mov	r4,r2
  800924:	0800d080 	call	800d08 <altera_avalon_jtag_uart_ioctl>
}
  800928:	e037883a 	mov	sp,fp
  80092c:	dfc00117 	ldw	ra,4(sp)
  800930:	df000017 	ldw	fp,0(sp)
  800934:	dec00204 	addi	sp,sp,8
  800938:	f800283a 	ret

0080093c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80093c:	defffb04 	addi	sp,sp,-20
  800940:	dfc00415 	stw	ra,16(sp)
  800944:	df000315 	stw	fp,12(sp)
  800948:	df000304 	addi	fp,sp,12
  80094c:	e13ffd15 	stw	r4,-12(fp)
  800950:	e17ffe15 	stw	r5,-8(fp)
  800954:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800958:	e0bffd17 	ldw	r2,-12(fp)
  80095c:	00c00044 	movi	r3,1
  800960:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  800964:	e0bffd17 	ldw	r2,-12(fp)
  800968:	10800017 	ldw	r2,0(r2)
  80096c:	10800104 	addi	r2,r2,4
  800970:	1007883a 	mov	r3,r2
  800974:	e0bffd17 	ldw	r2,-12(fp)
  800978:	10800817 	ldw	r2,32(r2)
  80097c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  800980:	e0bfff17 	ldw	r2,-4(fp)
  800984:	01802034 	movhi	r6,128
  800988:	31827c04 	addi	r6,r6,2544
  80098c:	e17ffd17 	ldw	r5,-12(fp)
  800990:	1009883a 	mov	r4,r2
  800994:	08003e40 	call	8003e4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  800998:	e0bffd17 	ldw	r2,-12(fp)
  80099c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8009a0:	e0bffd17 	ldw	r2,-12(fp)
  8009a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8009a8:	d0e61417 	ldw	r3,-26544(gp)
  8009ac:	e1fffd17 	ldw	r7,-12(fp)
  8009b0:	01802034 	movhi	r6,128
  8009b4:	31830004 	addi	r6,r6,3072
  8009b8:	180b883a 	mov	r5,r3
  8009bc:	1009883a 	mov	r4,r2
  8009c0:	08024e00 	call	8024e0 <alt_alarm_start>
  8009c4:	1000040e 	bge	r2,zero,8009d8 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8009c8:	e0fffd17 	ldw	r3,-12(fp)
  8009cc:	00a00034 	movhi	r2,32768
  8009d0:	10bfffc4 	addi	r2,r2,-1
  8009d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8009d8:	0001883a 	nop
  8009dc:	e037883a 	mov	sp,fp
  8009e0:	dfc00117 	ldw	ra,4(sp)
  8009e4:	df000017 	ldw	fp,0(sp)
  8009e8:	dec00204 	addi	sp,sp,8
  8009ec:	f800283a 	ret

008009f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8009f0:	defff704 	addi	sp,sp,-36
  8009f4:	df000815 	stw	fp,32(sp)
  8009f8:	df000804 	addi	fp,sp,32
  8009fc:	e13ffe15 	stw	r4,-8(fp)
  800a00:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  800a04:	e0bffe17 	ldw	r2,-8(fp)
  800a08:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  800a0c:	e0bffa17 	ldw	r2,-24(fp)
  800a10:	10800017 	ldw	r2,0(r2)
  800a14:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800a18:	e0bffb17 	ldw	r2,-20(fp)
  800a1c:	10800104 	addi	r2,r2,4
  800a20:	10800037 	ldwio	r2,0(r2)
  800a24:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  800a28:	e0bffc17 	ldw	r2,-16(fp)
  800a2c:	1080c00c 	andi	r2,r2,768
  800a30:	10006d26 	beq	r2,zero,800be8 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  800a34:	e0bffc17 	ldw	r2,-16(fp)
  800a38:	1080400c 	andi	r2,r2,256
  800a3c:	10003526 	beq	r2,zero,800b14 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  800a40:	00800074 	movhi	r2,1
  800a44:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800a48:	e0bffa17 	ldw	r2,-24(fp)
  800a4c:	10800a17 	ldw	r2,40(r2)
  800a50:	10800044 	addi	r2,r2,1
  800a54:	1081ffcc 	andi	r2,r2,2047
  800a58:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  800a5c:	e0bffa17 	ldw	r2,-24(fp)
  800a60:	10c00b17 	ldw	r3,44(r2)
  800a64:	e0bffd17 	ldw	r2,-12(fp)
  800a68:	18801526 	beq	r3,r2,800ac0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  800a6c:	e0bffb17 	ldw	r2,-20(fp)
  800a70:	10800037 	ldwio	r2,0(r2)
  800a74:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  800a78:	e0bff817 	ldw	r2,-32(fp)
  800a7c:	10a0000c 	andi	r2,r2,32768
  800a80:	10001126 	beq	r2,zero,800ac8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800a84:	e0bffa17 	ldw	r2,-24(fp)
  800a88:	10800a17 	ldw	r2,40(r2)
  800a8c:	e0fff817 	ldw	r3,-32(fp)
  800a90:	1809883a 	mov	r4,r3
  800a94:	e0fffa17 	ldw	r3,-24(fp)
  800a98:	1885883a 	add	r2,r3,r2
  800a9c:	10800e04 	addi	r2,r2,56
  800aa0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800aa4:	e0bffa17 	ldw	r2,-24(fp)
  800aa8:	10800a17 	ldw	r2,40(r2)
  800aac:	10800044 	addi	r2,r2,1
  800ab0:	10c1ffcc 	andi	r3,r2,2047
  800ab4:	e0bffa17 	ldw	r2,-24(fp)
  800ab8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  800abc:	003fe206 	br	800a48 <__alt_data_end+0xff800a48>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  800ac0:	0001883a 	nop
  800ac4:	00000106 	br	800acc <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  800ac8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800acc:	e0bff817 	ldw	r2,-32(fp)
  800ad0:	10bfffec 	andhi	r2,r2,65535
  800ad4:	10000f26 	beq	r2,zero,800b14 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800ad8:	e0bffa17 	ldw	r2,-24(fp)
  800adc:	10c00817 	ldw	r3,32(r2)
  800ae0:	00bfff84 	movi	r2,-2
  800ae4:	1886703a 	and	r3,r3,r2
  800ae8:	e0bffa17 	ldw	r2,-24(fp)
  800aec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  800af0:	e0bffb17 	ldw	r2,-20(fp)
  800af4:	10800104 	addi	r2,r2,4
  800af8:	1007883a 	mov	r3,r2
  800afc:	e0bffa17 	ldw	r2,-24(fp)
  800b00:	10800817 	ldw	r2,32(r2)
  800b04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800b08:	e0bffb17 	ldw	r2,-20(fp)
  800b0c:	10800104 	addi	r2,r2,4
  800b10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  800b14:	e0bffc17 	ldw	r2,-16(fp)
  800b18:	1080800c 	andi	r2,r2,512
  800b1c:	103fbe26 	beq	r2,zero,800a18 <__alt_data_end+0xff800a18>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  800b20:	e0bffc17 	ldw	r2,-16(fp)
  800b24:	1004d43a 	srli	r2,r2,16
  800b28:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  800b2c:	00001406 	br	800b80 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  800b30:	e0bffb17 	ldw	r2,-20(fp)
  800b34:	e0fffa17 	ldw	r3,-24(fp)
  800b38:	18c00d17 	ldw	r3,52(r3)
  800b3c:	e13ffa17 	ldw	r4,-24(fp)
  800b40:	20c7883a 	add	r3,r4,r3
  800b44:	18c20e04 	addi	r3,r3,2104
  800b48:	18c00003 	ldbu	r3,0(r3)
  800b4c:	18c03fcc 	andi	r3,r3,255
  800b50:	18c0201c 	xori	r3,r3,128
  800b54:	18ffe004 	addi	r3,r3,-128
  800b58:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800b5c:	e0bffa17 	ldw	r2,-24(fp)
  800b60:	10800d17 	ldw	r2,52(r2)
  800b64:	10800044 	addi	r2,r2,1
  800b68:	10c1ffcc 	andi	r3,r2,2047
  800b6c:	e0bffa17 	ldw	r2,-24(fp)
  800b70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  800b74:	e0bff917 	ldw	r2,-28(fp)
  800b78:	10bfffc4 	addi	r2,r2,-1
  800b7c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  800b80:	e0bff917 	ldw	r2,-28(fp)
  800b84:	10000526 	beq	r2,zero,800b9c <altera_avalon_jtag_uart_irq+0x1ac>
  800b88:	e0bffa17 	ldw	r2,-24(fp)
  800b8c:	10c00d17 	ldw	r3,52(r2)
  800b90:	e0bffa17 	ldw	r2,-24(fp)
  800b94:	10800c17 	ldw	r2,48(r2)
  800b98:	18bfe51e 	bne	r3,r2,800b30 <__alt_data_end+0xff800b30>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800b9c:	e0bff917 	ldw	r2,-28(fp)
  800ba0:	103f9d26 	beq	r2,zero,800a18 <__alt_data_end+0xff800a18>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800ba4:	e0bffa17 	ldw	r2,-24(fp)
  800ba8:	10c00817 	ldw	r3,32(r2)
  800bac:	00bfff44 	movi	r2,-3
  800bb0:	1886703a 	and	r3,r3,r2
  800bb4:	e0bffa17 	ldw	r2,-24(fp)
  800bb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800bbc:	e0bffa17 	ldw	r2,-24(fp)
  800bc0:	10800017 	ldw	r2,0(r2)
  800bc4:	10800104 	addi	r2,r2,4
  800bc8:	1007883a 	mov	r3,r2
  800bcc:	e0bffa17 	ldw	r2,-24(fp)
  800bd0:	10800817 	ldw	r2,32(r2)
  800bd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800bd8:	e0bffb17 	ldw	r2,-20(fp)
  800bdc:	10800104 	addi	r2,r2,4
  800be0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  800be4:	003f8c06 	br	800a18 <__alt_data_end+0xff800a18>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  800be8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  800bec:	0001883a 	nop
  800bf0:	e037883a 	mov	sp,fp
  800bf4:	df000017 	ldw	fp,0(sp)
  800bf8:	dec00104 	addi	sp,sp,4
  800bfc:	f800283a 	ret

00800c00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  800c00:	defff804 	addi	sp,sp,-32
  800c04:	df000715 	stw	fp,28(sp)
  800c08:	df000704 	addi	fp,sp,28
  800c0c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  800c10:	e0bffb17 	ldw	r2,-20(fp)
  800c14:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  800c18:	e0bff917 	ldw	r2,-28(fp)
  800c1c:	10800017 	ldw	r2,0(r2)
  800c20:	10800104 	addi	r2,r2,4
  800c24:	10800037 	ldwio	r2,0(r2)
  800c28:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  800c2c:	e0bffa17 	ldw	r2,-24(fp)
  800c30:	1081000c 	andi	r2,r2,1024
  800c34:	10000b26 	beq	r2,zero,800c64 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  800c38:	e0bff917 	ldw	r2,-28(fp)
  800c3c:	10800017 	ldw	r2,0(r2)
  800c40:	10800104 	addi	r2,r2,4
  800c44:	1007883a 	mov	r3,r2
  800c48:	e0bff917 	ldw	r2,-28(fp)
  800c4c:	10800817 	ldw	r2,32(r2)
  800c50:	10810014 	ori	r2,r2,1024
  800c54:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  800c58:	e0bff917 	ldw	r2,-28(fp)
  800c5c:	10000915 	stw	zero,36(r2)
  800c60:	00000a06 	br	800c8c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  800c64:	e0bff917 	ldw	r2,-28(fp)
  800c68:	10c00917 	ldw	r3,36(r2)
  800c6c:	00a00034 	movhi	r2,32768
  800c70:	10bfff04 	addi	r2,r2,-4
  800c74:	10c00536 	bltu	r2,r3,800c8c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  800c78:	e0bff917 	ldw	r2,-28(fp)
  800c7c:	10800917 	ldw	r2,36(r2)
  800c80:	10c00044 	addi	r3,r2,1
  800c84:	e0bff917 	ldw	r2,-28(fp)
  800c88:	10c00915 	stw	r3,36(r2)
  800c8c:	d0a61417 	ldw	r2,-26544(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  800c90:	e037883a 	mov	sp,fp
  800c94:	df000017 	ldw	fp,0(sp)
  800c98:	dec00104 	addi	sp,sp,4
  800c9c:	f800283a 	ret

00800ca0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  800ca0:	defffd04 	addi	sp,sp,-12
  800ca4:	df000215 	stw	fp,8(sp)
  800ca8:	df000204 	addi	fp,sp,8
  800cac:	e13ffe15 	stw	r4,-8(fp)
  800cb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800cb4:	00000506 	br	800ccc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  800cb8:	e0bfff17 	ldw	r2,-4(fp)
  800cbc:	1090000c 	andi	r2,r2,16384
  800cc0:	10000226 	beq	r2,zero,800ccc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  800cc4:	00bffd44 	movi	r2,-11
  800cc8:	00000b06 	br	800cf8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800ccc:	e0bffe17 	ldw	r2,-8(fp)
  800cd0:	10c00d17 	ldw	r3,52(r2)
  800cd4:	e0bffe17 	ldw	r2,-8(fp)
  800cd8:	10800c17 	ldw	r2,48(r2)
  800cdc:	18800526 	beq	r3,r2,800cf4 <altera_avalon_jtag_uart_close+0x54>
  800ce0:	e0bffe17 	ldw	r2,-8(fp)
  800ce4:	10c00917 	ldw	r3,36(r2)
  800ce8:	e0bffe17 	ldw	r2,-8(fp)
  800cec:	10800117 	ldw	r2,4(r2)
  800cf0:	18bff136 	bltu	r3,r2,800cb8 <__alt_data_end+0xff800cb8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  800cf4:	0005883a 	mov	r2,zero
}
  800cf8:	e037883a 	mov	sp,fp
  800cfc:	df000017 	ldw	fp,0(sp)
  800d00:	dec00104 	addi	sp,sp,4
  800d04:	f800283a 	ret

00800d08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  800d08:	defffa04 	addi	sp,sp,-24
  800d0c:	df000515 	stw	fp,20(sp)
  800d10:	df000504 	addi	fp,sp,20
  800d14:	e13ffd15 	stw	r4,-12(fp)
  800d18:	e17ffe15 	stw	r5,-8(fp)
  800d1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  800d20:	00bff9c4 	movi	r2,-25
  800d24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  800d28:	e0bffe17 	ldw	r2,-8(fp)
  800d2c:	10da8060 	cmpeqi	r3,r2,27137
  800d30:	1800031e 	bne	r3,zero,800d40 <altera_avalon_jtag_uart_ioctl+0x38>
  800d34:	109a80a0 	cmpeqi	r2,r2,27138
  800d38:	1000181e 	bne	r2,zero,800d9c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  800d3c:	00002906 	br	800de4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  800d40:	e0bffd17 	ldw	r2,-12(fp)
  800d44:	10c00117 	ldw	r3,4(r2)
  800d48:	00a00034 	movhi	r2,32768
  800d4c:	10bfffc4 	addi	r2,r2,-1
  800d50:	18802126 	beq	r3,r2,800dd8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  800d54:	e0bfff17 	ldw	r2,-4(fp)
  800d58:	10800017 	ldw	r2,0(r2)
  800d5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  800d60:	e0bffc17 	ldw	r2,-16(fp)
  800d64:	10800090 	cmplti	r2,r2,2
  800d68:	1000061e 	bne	r2,zero,800d84 <altera_avalon_jtag_uart_ioctl+0x7c>
  800d6c:	e0fffc17 	ldw	r3,-16(fp)
  800d70:	00a00034 	movhi	r2,32768
  800d74:	10bfffc4 	addi	r2,r2,-1
  800d78:	18800226 	beq	r3,r2,800d84 <altera_avalon_jtag_uart_ioctl+0x7c>
  800d7c:	e0bffc17 	ldw	r2,-16(fp)
  800d80:	00000206 	br	800d8c <altera_avalon_jtag_uart_ioctl+0x84>
  800d84:	00a00034 	movhi	r2,32768
  800d88:	10bfff84 	addi	r2,r2,-2
  800d8c:	e0fffd17 	ldw	r3,-12(fp)
  800d90:	18800115 	stw	r2,4(r3)
      rc = 0;
  800d94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800d98:	00000f06 	br	800dd8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  800d9c:	e0bffd17 	ldw	r2,-12(fp)
  800da0:	10c00117 	ldw	r3,4(r2)
  800da4:	00a00034 	movhi	r2,32768
  800da8:	10bfffc4 	addi	r2,r2,-1
  800dac:	18800c26 	beq	r3,r2,800de0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800db0:	e0bffd17 	ldw	r2,-12(fp)
  800db4:	10c00917 	ldw	r3,36(r2)
  800db8:	e0bffd17 	ldw	r2,-12(fp)
  800dbc:	10800117 	ldw	r2,4(r2)
  800dc0:	1885803a 	cmpltu	r2,r3,r2
  800dc4:	10c03fcc 	andi	r3,r2,255
  800dc8:	e0bfff17 	ldw	r2,-4(fp)
  800dcc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  800dd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800dd4:	00000206 	br	800de0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  800dd8:	0001883a 	nop
  800ddc:	00000106 	br	800de4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  800de0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  800de4:	e0bffb17 	ldw	r2,-20(fp)
}
  800de8:	e037883a 	mov	sp,fp
  800dec:	df000017 	ldw	fp,0(sp)
  800df0:	dec00104 	addi	sp,sp,4
  800df4:	f800283a 	ret

00800df8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  800df8:	defff304 	addi	sp,sp,-52
  800dfc:	dfc00c15 	stw	ra,48(sp)
  800e00:	df000b15 	stw	fp,44(sp)
  800e04:	df000b04 	addi	fp,sp,44
  800e08:	e13ffc15 	stw	r4,-16(fp)
  800e0c:	e17ffd15 	stw	r5,-12(fp)
  800e10:	e1bffe15 	stw	r6,-8(fp)
  800e14:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  800e18:	e0bffd17 	ldw	r2,-12(fp)
  800e1c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800e20:	00004706 	br	800f40 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  800e24:	e0bffc17 	ldw	r2,-16(fp)
  800e28:	10800a17 	ldw	r2,40(r2)
  800e2c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  800e30:	e0bffc17 	ldw	r2,-16(fp)
  800e34:	10800b17 	ldw	r2,44(r2)
  800e38:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  800e3c:	e0fff717 	ldw	r3,-36(fp)
  800e40:	e0bff817 	ldw	r2,-32(fp)
  800e44:	18800536 	bltu	r3,r2,800e5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800e48:	e0fff717 	ldw	r3,-36(fp)
  800e4c:	e0bff817 	ldw	r2,-32(fp)
  800e50:	1885c83a 	sub	r2,r3,r2
  800e54:	e0bff615 	stw	r2,-40(fp)
  800e58:	00000406 	br	800e6c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800e5c:	00c20004 	movi	r3,2048
  800e60:	e0bff817 	ldw	r2,-32(fp)
  800e64:	1885c83a 	sub	r2,r3,r2
  800e68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800e6c:	e0bff617 	ldw	r2,-40(fp)
  800e70:	10001e26 	beq	r2,zero,800eec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  800e74:	e0fffe17 	ldw	r3,-8(fp)
  800e78:	e0bff617 	ldw	r2,-40(fp)
  800e7c:	1880022e 	bgeu	r3,r2,800e88 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  800e80:	e0bffe17 	ldw	r2,-8(fp)
  800e84:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800e88:	e0bffc17 	ldw	r2,-16(fp)
  800e8c:	10c00e04 	addi	r3,r2,56
  800e90:	e0bff817 	ldw	r2,-32(fp)
  800e94:	1885883a 	add	r2,r3,r2
  800e98:	e1bff617 	ldw	r6,-40(fp)
  800e9c:	100b883a 	mov	r5,r2
  800ea0:	e13ff517 	ldw	r4,-44(fp)
  800ea4:	08034d80 	call	8034d8 <memcpy>
      ptr   += n;
  800ea8:	e0fff517 	ldw	r3,-44(fp)
  800eac:	e0bff617 	ldw	r2,-40(fp)
  800eb0:	1885883a 	add	r2,r3,r2
  800eb4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  800eb8:	e0fffe17 	ldw	r3,-8(fp)
  800ebc:	e0bff617 	ldw	r2,-40(fp)
  800ec0:	1885c83a 	sub	r2,r3,r2
  800ec4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800ec8:	e0fff817 	ldw	r3,-32(fp)
  800ecc:	e0bff617 	ldw	r2,-40(fp)
  800ed0:	1885883a 	add	r2,r3,r2
  800ed4:	10c1ffcc 	andi	r3,r2,2047
  800ed8:	e0bffc17 	ldw	r2,-16(fp)
  800edc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  800ee0:	e0bffe17 	ldw	r2,-8(fp)
  800ee4:	00bfcf16 	blt	zero,r2,800e24 <__alt_data_end+0xff800e24>
  800ee8:	00000106 	br	800ef0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  800eec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  800ef0:	e0fff517 	ldw	r3,-44(fp)
  800ef4:	e0bffd17 	ldw	r2,-12(fp)
  800ef8:	1880141e 	bne	r3,r2,800f4c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  800efc:	e0bfff17 	ldw	r2,-4(fp)
  800f00:	1090000c 	andi	r2,r2,16384
  800f04:	1000131e 	bne	r2,zero,800f54 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  800f08:	0001883a 	nop
  800f0c:	e0bffc17 	ldw	r2,-16(fp)
  800f10:	10c00a17 	ldw	r3,40(r2)
  800f14:	e0bff717 	ldw	r2,-36(fp)
  800f18:	1880051e 	bne	r3,r2,800f30 <altera_avalon_jtag_uart_read+0x138>
  800f1c:	e0bffc17 	ldw	r2,-16(fp)
  800f20:	10c00917 	ldw	r3,36(r2)
  800f24:	e0bffc17 	ldw	r2,-16(fp)
  800f28:	10800117 	ldw	r2,4(r2)
  800f2c:	18bff736 	bltu	r3,r2,800f0c <__alt_data_end+0xff800f0c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  800f30:	e0bffc17 	ldw	r2,-16(fp)
  800f34:	10c00a17 	ldw	r3,40(r2)
  800f38:	e0bff717 	ldw	r2,-36(fp)
  800f3c:	18800726 	beq	r3,r2,800f5c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800f40:	e0bffe17 	ldw	r2,-8(fp)
  800f44:	00bfb716 	blt	zero,r2,800e24 <__alt_data_end+0xff800e24>
  800f48:	00000506 	br	800f60 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  800f4c:	0001883a 	nop
  800f50:	00000306 	br	800f60 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  800f54:	0001883a 	nop
  800f58:	00000106 	br	800f60 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  800f5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800f60:	e0fff517 	ldw	r3,-44(fp)
  800f64:	e0bffd17 	ldw	r2,-12(fp)
  800f68:	18801826 	beq	r3,r2,800fcc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800f6c:	0005303a 	rdctl	r2,status
  800f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800f74:	e0fffb17 	ldw	r3,-20(fp)
  800f78:	00bfff84 	movi	r2,-2
  800f7c:	1884703a 	and	r2,r3,r2
  800f80:	1001703a 	wrctl	status,r2
  
  return context;
  800f84:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  800f88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800f8c:	e0bffc17 	ldw	r2,-16(fp)
  800f90:	10800817 	ldw	r2,32(r2)
  800f94:	10c00054 	ori	r3,r2,1
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800fa0:	e0bffc17 	ldw	r2,-16(fp)
  800fa4:	10800017 	ldw	r2,0(r2)
  800fa8:	10800104 	addi	r2,r2,4
  800fac:	1007883a 	mov	r3,r2
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10800817 	ldw	r2,32(r2)
  800fb8:	18800035 	stwio	r2,0(r3)
  800fbc:	e0bffa17 	ldw	r2,-24(fp)
  800fc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800fc4:	e0bff917 	ldw	r2,-28(fp)
  800fc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  800fcc:	e0fff517 	ldw	r3,-44(fp)
  800fd0:	e0bffd17 	ldw	r2,-12(fp)
  800fd4:	18800426 	beq	r3,r2,800fe8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  800fd8:	e0fff517 	ldw	r3,-44(fp)
  800fdc:	e0bffd17 	ldw	r2,-12(fp)
  800fe0:	1885c83a 	sub	r2,r3,r2
  800fe4:	00000606 	br	801000 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  800fe8:	e0bfff17 	ldw	r2,-4(fp)
  800fec:	1090000c 	andi	r2,r2,16384
  800ff0:	10000226 	beq	r2,zero,800ffc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  800ff4:	00bffd44 	movi	r2,-11
  800ff8:	00000106 	br	801000 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  800ffc:	00bffec4 	movi	r2,-5
}
  801000:	e037883a 	mov	sp,fp
  801004:	dfc00117 	ldw	ra,4(sp)
  801008:	df000017 	ldw	fp,0(sp)
  80100c:	dec00204 	addi	sp,sp,8
  801010:	f800283a 	ret

00801014 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  801014:	defff304 	addi	sp,sp,-52
  801018:	dfc00c15 	stw	ra,48(sp)
  80101c:	df000b15 	stw	fp,44(sp)
  801020:	df000b04 	addi	fp,sp,44
  801024:	e13ffc15 	stw	r4,-16(fp)
  801028:	e17ffd15 	stw	r5,-12(fp)
  80102c:	e1bffe15 	stw	r6,-8(fp)
  801030:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  801034:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  801038:	e0bffd17 	ldw	r2,-12(fp)
  80103c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801040:	00003706 	br	801120 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  801044:	e0bffc17 	ldw	r2,-16(fp)
  801048:	10800c17 	ldw	r2,48(r2)
  80104c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  801050:	e0bffc17 	ldw	r2,-16(fp)
  801054:	10800d17 	ldw	r2,52(r2)
  801058:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80105c:	e0fff917 	ldw	r3,-28(fp)
  801060:	e0bff517 	ldw	r2,-44(fp)
  801064:	1880062e 	bgeu	r3,r2,801080 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  801068:	e0fff517 	ldw	r3,-44(fp)
  80106c:	e0bff917 	ldw	r2,-28(fp)
  801070:	1885c83a 	sub	r2,r3,r2
  801074:	10bfffc4 	addi	r2,r2,-1
  801078:	e0bff615 	stw	r2,-40(fp)
  80107c:	00000b06 	br	8010ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  801080:	e0bff517 	ldw	r2,-44(fp)
  801084:	10000526 	beq	r2,zero,80109c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  801088:	00c20004 	movi	r3,2048
  80108c:	e0bff917 	ldw	r2,-28(fp)
  801090:	1885c83a 	sub	r2,r3,r2
  801094:	e0bff615 	stw	r2,-40(fp)
  801098:	00000406 	br	8010ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80109c:	00c1ffc4 	movi	r3,2047
  8010a0:	e0bff917 	ldw	r2,-28(fp)
  8010a4:	1885c83a 	sub	r2,r3,r2
  8010a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8010ac:	e0bff617 	ldw	r2,-40(fp)
  8010b0:	10001e26 	beq	r2,zero,80112c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8010b4:	e0fffe17 	ldw	r3,-8(fp)
  8010b8:	e0bff617 	ldw	r2,-40(fp)
  8010bc:	1880022e 	bgeu	r3,r2,8010c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8010c0:	e0bffe17 	ldw	r2,-8(fp)
  8010c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8010c8:	e0bffc17 	ldw	r2,-16(fp)
  8010cc:	10c20e04 	addi	r3,r2,2104
  8010d0:	e0bff917 	ldw	r2,-28(fp)
  8010d4:	1885883a 	add	r2,r3,r2
  8010d8:	e1bff617 	ldw	r6,-40(fp)
  8010dc:	e17ffd17 	ldw	r5,-12(fp)
  8010e0:	1009883a 	mov	r4,r2
  8010e4:	08034d80 	call	8034d8 <memcpy>
      ptr   += n;
  8010e8:	e0fffd17 	ldw	r3,-12(fp)
  8010ec:	e0bff617 	ldw	r2,-40(fp)
  8010f0:	1885883a 	add	r2,r3,r2
  8010f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8010f8:	e0fffe17 	ldw	r3,-8(fp)
  8010fc:	e0bff617 	ldw	r2,-40(fp)
  801100:	1885c83a 	sub	r2,r3,r2
  801104:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  801108:	e0fff917 	ldw	r3,-28(fp)
  80110c:	e0bff617 	ldw	r2,-40(fp)
  801110:	1885883a 	add	r2,r3,r2
  801114:	10c1ffcc 	andi	r3,r2,2047
  801118:	e0bffc17 	ldw	r2,-16(fp)
  80111c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801120:	e0bffe17 	ldw	r2,-8(fp)
  801124:	00bfc716 	blt	zero,r2,801044 <__alt_data_end+0xff801044>
  801128:	00000106 	br	801130 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80112c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801130:	0005303a 	rdctl	r2,status
  801134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801138:	e0fffb17 	ldw	r3,-20(fp)
  80113c:	00bfff84 	movi	r2,-2
  801140:	1884703a 	and	r2,r3,r2
  801144:	1001703a 	wrctl	status,r2
  
  return context;
  801148:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80114c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  801150:	e0bffc17 	ldw	r2,-16(fp)
  801154:	10800817 	ldw	r2,32(r2)
  801158:	10c00094 	ori	r3,r2,2
  80115c:	e0bffc17 	ldw	r2,-16(fp)
  801160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801164:	e0bffc17 	ldw	r2,-16(fp)
  801168:	10800017 	ldw	r2,0(r2)
  80116c:	10800104 	addi	r2,r2,4
  801170:	1007883a 	mov	r3,r2
  801174:	e0bffc17 	ldw	r2,-16(fp)
  801178:	10800817 	ldw	r2,32(r2)
  80117c:	18800035 	stwio	r2,0(r3)
  801180:	e0bffa17 	ldw	r2,-24(fp)
  801184:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801188:	e0bff817 	ldw	r2,-32(fp)
  80118c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  801190:	e0bffe17 	ldw	r2,-8(fp)
  801194:	0080100e 	bge	zero,r2,8011d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  801198:	e0bfff17 	ldw	r2,-4(fp)
  80119c:	1090000c 	andi	r2,r2,16384
  8011a0:	1000101e 	bne	r2,zero,8011e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8011a4:	0001883a 	nop
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10c00d17 	ldw	r3,52(r2)
  8011b0:	e0bff517 	ldw	r2,-44(fp)
  8011b4:	1880051e 	bne	r3,r2,8011cc <altera_avalon_jtag_uart_write+0x1b8>
  8011b8:	e0bffc17 	ldw	r2,-16(fp)
  8011bc:	10c00917 	ldw	r3,36(r2)
  8011c0:	e0bffc17 	ldw	r2,-16(fp)
  8011c4:	10800117 	ldw	r2,4(r2)
  8011c8:	18bff736 	bltu	r3,r2,8011a8 <__alt_data_end+0xff8011a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8011cc:	e0bffc17 	ldw	r2,-16(fp)
  8011d0:	10800917 	ldw	r2,36(r2)
  8011d4:	1000051e 	bne	r2,zero,8011ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8011d8:	e0bffe17 	ldw	r2,-8(fp)
  8011dc:	00bfd016 	blt	zero,r2,801120 <__alt_data_end+0xff801120>
  8011e0:	00000306 	br	8011f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8011e4:	0001883a 	nop
  8011e8:	00000106 	br	8011f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8011ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8011f0:	e0fffd17 	ldw	r3,-12(fp)
  8011f4:	e0bff717 	ldw	r2,-36(fp)
  8011f8:	18800426 	beq	r3,r2,80120c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8011fc:	e0fffd17 	ldw	r3,-12(fp)
  801200:	e0bff717 	ldw	r2,-36(fp)
  801204:	1885c83a 	sub	r2,r3,r2
  801208:	00000606 	br	801224 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80120c:	e0bfff17 	ldw	r2,-4(fp)
  801210:	1090000c 	andi	r2,r2,16384
  801214:	10000226 	beq	r2,zero,801220 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  801218:	00bffd44 	movi	r2,-11
  80121c:	00000106 	br	801224 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  801220:	00bffec4 	movi	r2,-5
}
  801224:	e037883a 	mov	sp,fp
  801228:	dfc00117 	ldw	ra,4(sp)
  80122c:	df000017 	ldw	fp,0(sp)
  801230:	dec00204 	addi	sp,sp,8
  801234:	f800283a 	ret

00801238 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  801238:	defffa04 	addi	sp,sp,-24
  80123c:	dfc00515 	stw	ra,20(sp)
  801240:	df000415 	stw	fp,16(sp)
  801244:	df000404 	addi	fp,sp,16
  801248:	e13ffe15 	stw	r4,-8(fp)
  80124c:	2805883a 	mov	r2,r5
  801250:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801254:	e0bffe17 	ldw	r2,-8(fp)
  801258:	10800017 	ldw	r2,0(r2)
  80125c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801260:	008003f4 	movhi	r2,15
  801264:	10909004 	addi	r2,r2,16960
  801268:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80126c:	e0bffe17 	ldw	r2,-8(fp)
  801270:	10800803 	ldbu	r2,32(r2)
  801274:	10803fcc 	andi	r2,r2,255
  801278:	1080201c 	xori	r2,r2,128
  80127c:	10bfe004 	addi	r2,r2,-128
  801280:	1000151e 	bne	r2,zero,8012d8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801284:	00000906 	br	8012ac <lcd_write_command+0x74>
    if (--i == 0)
  801288:	e0bffc17 	ldw	r2,-16(fp)
  80128c:	10bfffc4 	addi	r2,r2,-1
  801290:	e0bffc15 	stw	r2,-16(fp)
  801294:	e0bffc17 	ldw	r2,-16(fp)
  801298:	1000041e 	bne	r2,zero,8012ac <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80129c:	e0bffe17 	ldw	r2,-8(fp)
  8012a0:	00c00044 	movi	r3,1
  8012a4:	10c00805 	stb	r3,32(r2)
      return;
  8012a8:	00000c06 	br	8012dc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8012ac:	e0bffd17 	ldw	r2,-12(fp)
  8012b0:	10800104 	addi	r2,r2,4
  8012b4:	10800037 	ldwio	r2,0(r2)
  8012b8:	1080200c 	andi	r2,r2,128
  8012bc:	103ff21e 	bne	r2,zero,801288 <__alt_data_end+0xff801288>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8012c0:	01001904 	movi	r4,100
  8012c4:	0802efc0 	call	802efc <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8012c8:	e0bffd17 	ldw	r2,-12(fp)
  8012cc:	e0ffff03 	ldbu	r3,-4(fp)
  8012d0:	10c00035 	stwio	r3,0(r2)
  8012d4:	00000106 	br	8012dc <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8012d8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8012dc:	e037883a 	mov	sp,fp
  8012e0:	dfc00117 	ldw	ra,4(sp)
  8012e4:	df000017 	ldw	fp,0(sp)
  8012e8:	dec00204 	addi	sp,sp,8
  8012ec:	f800283a 	ret

008012f0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8012f0:	defffa04 	addi	sp,sp,-24
  8012f4:	dfc00515 	stw	ra,20(sp)
  8012f8:	df000415 	stw	fp,16(sp)
  8012fc:	df000404 	addi	fp,sp,16
  801300:	e13ffe15 	stw	r4,-8(fp)
  801304:	2805883a 	mov	r2,r5
  801308:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80130c:	e0bffe17 	ldw	r2,-8(fp)
  801310:	10800017 	ldw	r2,0(r2)
  801314:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801318:	008003f4 	movhi	r2,15
  80131c:	10909004 	addi	r2,r2,16960
  801320:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801324:	e0bffe17 	ldw	r2,-8(fp)
  801328:	10800803 	ldbu	r2,32(r2)
  80132c:	10803fcc 	andi	r2,r2,255
  801330:	1080201c 	xori	r2,r2,128
  801334:	10bfe004 	addi	r2,r2,-128
  801338:	10001d1e 	bne	r2,zero,8013b0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80133c:	00000906 	br	801364 <lcd_write_data+0x74>
    if (--i == 0)
  801340:	e0bffc17 	ldw	r2,-16(fp)
  801344:	10bfffc4 	addi	r2,r2,-1
  801348:	e0bffc15 	stw	r2,-16(fp)
  80134c:	e0bffc17 	ldw	r2,-16(fp)
  801350:	1000041e 	bne	r2,zero,801364 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  801354:	e0bffe17 	ldw	r2,-8(fp)
  801358:	00c00044 	movi	r3,1
  80135c:	10c00805 	stb	r3,32(r2)
      return;
  801360:	00001406 	br	8013b4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801364:	e0bffd17 	ldw	r2,-12(fp)
  801368:	10800104 	addi	r2,r2,4
  80136c:	10800037 	ldwio	r2,0(r2)
  801370:	1080200c 	andi	r2,r2,128
  801374:	103ff21e 	bne	r2,zero,801340 <__alt_data_end+0xff801340>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801378:	01001904 	movi	r4,100
  80137c:	0802efc0 	call	802efc <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  801380:	e0bffd17 	ldw	r2,-12(fp)
  801384:	10800204 	addi	r2,r2,8
  801388:	1007883a 	mov	r3,r2
  80138c:	e0bfff03 	ldbu	r2,-4(fp)
  801390:	18800035 	stwio	r2,0(r3)

  sp->address++;
  801394:	e0bffe17 	ldw	r2,-8(fp)
  801398:	108008c3 	ldbu	r2,35(r2)
  80139c:	10800044 	addi	r2,r2,1
  8013a0:	1007883a 	mov	r3,r2
  8013a4:	e0bffe17 	ldw	r2,-8(fp)
  8013a8:	10c008c5 	stb	r3,35(r2)
  8013ac:	00000106 	br	8013b4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8013b0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8013b4:	e037883a 	mov	sp,fp
  8013b8:	dfc00117 	ldw	ra,4(sp)
  8013bc:	df000017 	ldw	fp,0(sp)
  8013c0:	dec00204 	addi	sp,sp,8
  8013c4:	f800283a 	ret

008013c8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8013c8:	defffc04 	addi	sp,sp,-16
  8013cc:	dfc00315 	stw	ra,12(sp)
  8013d0:	df000215 	stw	fp,8(sp)
  8013d4:	df000204 	addi	fp,sp,8
  8013d8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8013dc:	01400044 	movi	r5,1
  8013e0:	e13fff17 	ldw	r4,-4(fp)
  8013e4:	08012380 	call	801238 <lcd_write_command>

  sp->x = 0;
  8013e8:	e0bfff17 	ldw	r2,-4(fp)
  8013ec:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8013f0:	e0bfff17 	ldw	r2,-4(fp)
  8013f4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8013f8:	e0bfff17 	ldw	r2,-4(fp)
  8013fc:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801400:	e03ffe15 	stw	zero,-8(fp)
  801404:	00001b06 	br	801474 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  801408:	e0bffe17 	ldw	r2,-8(fp)
  80140c:	108018e4 	muli	r2,r2,99
  801410:	10801004 	addi	r2,r2,64
  801414:	e0ffff17 	ldw	r3,-4(fp)
  801418:	1885883a 	add	r2,r3,r2
  80141c:	01801444 	movi	r6,81
  801420:	01400804 	movi	r5,32
  801424:	1009883a 	mov	r4,r2
  801428:	08036200 	call	803620 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80142c:	e0bffe17 	ldw	r2,-8(fp)
  801430:	108018e4 	muli	r2,r2,99
  801434:	10800c04 	addi	r2,r2,48
  801438:	e0ffff17 	ldw	r3,-4(fp)
  80143c:	1885883a 	add	r2,r3,r2
  801440:	01800404 	movi	r6,16
  801444:	01400804 	movi	r5,32
  801448:	1009883a 	mov	r4,r2
  80144c:	08036200 	call	803620 <memset>
    sp->line[y].width = 0;
  801450:	e0ffff17 	ldw	r3,-4(fp)
  801454:	e0bffe17 	ldw	r2,-8(fp)
  801458:	108018e4 	muli	r2,r2,99
  80145c:	1885883a 	add	r2,r3,r2
  801460:	10802444 	addi	r2,r2,145
  801464:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801468:	e0bffe17 	ldw	r2,-8(fp)
  80146c:	10800044 	addi	r2,r2,1
  801470:	e0bffe15 	stw	r2,-8(fp)
  801474:	e0bffe17 	ldw	r2,-8(fp)
  801478:	10800090 	cmplti	r2,r2,2
  80147c:	103fe21e 	bne	r2,zero,801408 <__alt_data_end+0xff801408>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  801480:	0001883a 	nop
  801484:	e037883a 	mov	sp,fp
  801488:	dfc00117 	ldw	ra,4(sp)
  80148c:	df000017 	ldw	fp,0(sp)
  801490:	dec00204 	addi	sp,sp,8
  801494:	f800283a 	ret

00801498 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  801498:	defff704 	addi	sp,sp,-36
  80149c:	dfc00815 	stw	ra,32(sp)
  8014a0:	df000715 	stw	fp,28(sp)
  8014a4:	df000704 	addi	fp,sp,28
  8014a8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8014ac:	e0bfff17 	ldw	r2,-4(fp)
  8014b0:	10800943 	ldbu	r2,37(r2)
  8014b4:	10803fcc 	andi	r2,r2,255
  8014b8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8014bc:	e03ff915 	stw	zero,-28(fp)
  8014c0:	00006706 	br	801660 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8014c4:	e0ffff17 	ldw	r3,-4(fp)
  8014c8:	e0bff917 	ldw	r2,-28(fp)
  8014cc:	108018e4 	muli	r2,r2,99
  8014d0:	1885883a 	add	r2,r3,r2
  8014d4:	10802444 	addi	r2,r2,145
  8014d8:	10800003 	ldbu	r2,0(r2)
  8014dc:	10803fcc 	andi	r2,r2,255
  8014e0:	1080201c 	xori	r2,r2,128
  8014e4:	10bfe004 	addi	r2,r2,-128
  8014e8:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8014ec:	e0ffff17 	ldw	r3,-4(fp)
  8014f0:	e0bff917 	ldw	r2,-28(fp)
  8014f4:	108018e4 	muli	r2,r2,99
  8014f8:	1885883a 	add	r2,r3,r2
  8014fc:	10802484 	addi	r2,r2,146
  801500:	10800003 	ldbu	r2,0(r2)
  801504:	10c03fcc 	andi	r3,r2,255
  801508:	e0bffc17 	ldw	r2,-16(fp)
  80150c:	1885383a 	mul	r2,r3,r2
  801510:	1005d23a 	srai	r2,r2,8
  801514:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801518:	e0fffb17 	ldw	r3,-20(fp)
  80151c:	e0bffd17 	ldw	r2,-12(fp)
  801520:	18800116 	blt	r3,r2,801528 <lcd_repaint_screen+0x90>
      offset = 0;
  801524:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801528:	e03ffa15 	stw	zero,-24(fp)
  80152c:	00004606 	br	801648 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  801530:	e0fffa17 	ldw	r3,-24(fp)
  801534:	e0bffb17 	ldw	r2,-20(fp)
  801538:	1885883a 	add	r2,r3,r2
  80153c:	e17ffd17 	ldw	r5,-12(fp)
  801540:	1009883a 	mov	r4,r2
  801544:	0803afc0 	call	803afc <__modsi3>
  801548:	1009883a 	mov	r4,r2
  80154c:	e0ffff17 	ldw	r3,-4(fp)
  801550:	e0bff917 	ldw	r2,-28(fp)
  801554:	108018e4 	muli	r2,r2,99
  801558:	1885883a 	add	r2,r3,r2
  80155c:	1105883a 	add	r2,r2,r4
  801560:	10801004 	addi	r2,r2,64
  801564:	10800003 	ldbu	r2,0(r2)
  801568:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80156c:	e0ffff17 	ldw	r3,-4(fp)
  801570:	e0bff917 	ldw	r2,-28(fp)
  801574:	108018e4 	muli	r2,r2,99
  801578:	1887883a 	add	r3,r3,r2
  80157c:	e0bffa17 	ldw	r2,-24(fp)
  801580:	1885883a 	add	r2,r3,r2
  801584:	10800c04 	addi	r2,r2,48
  801588:	10800003 	ldbu	r2,0(r2)
  80158c:	10c03fcc 	andi	r3,r2,255
  801590:	18c0201c 	xori	r3,r3,128
  801594:	18ffe004 	addi	r3,r3,-128
  801598:	e0bffe07 	ldb	r2,-8(fp)
  80159c:	18802726 	beq	r3,r2,80163c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8015a0:	e0fff917 	ldw	r3,-28(fp)
  8015a4:	d0a00104 	addi	r2,gp,-32764
  8015a8:	1885883a 	add	r2,r3,r2
  8015ac:	10800003 	ldbu	r2,0(r2)
  8015b0:	1007883a 	mov	r3,r2
  8015b4:	e0bffa17 	ldw	r2,-24(fp)
  8015b8:	1885883a 	add	r2,r3,r2
  8015bc:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  8015c0:	e0fffe43 	ldbu	r3,-7(fp)
  8015c4:	e0bfff17 	ldw	r2,-4(fp)
  8015c8:	108008c3 	ldbu	r2,35(r2)
  8015cc:	10803fcc 	andi	r2,r2,255
  8015d0:	1080201c 	xori	r2,r2,128
  8015d4:	10bfe004 	addi	r2,r2,-128
  8015d8:	18800a26 	beq	r3,r2,801604 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8015dc:	e0fffe43 	ldbu	r3,-7(fp)
  8015e0:	00bfe004 	movi	r2,-128
  8015e4:	1884b03a 	or	r2,r3,r2
  8015e8:	10803fcc 	andi	r2,r2,255
  8015ec:	100b883a 	mov	r5,r2
  8015f0:	e13fff17 	ldw	r4,-4(fp)
  8015f4:	08012380 	call	801238 <lcd_write_command>
          sp->address = address;
  8015f8:	e0fffe43 	ldbu	r3,-7(fp)
  8015fc:	e0bfff17 	ldw	r2,-4(fp)
  801600:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  801604:	e0bffe03 	ldbu	r2,-8(fp)
  801608:	10803fcc 	andi	r2,r2,255
  80160c:	100b883a 	mov	r5,r2
  801610:	e13fff17 	ldw	r4,-4(fp)
  801614:	08012f00 	call	8012f0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801618:	e0ffff17 	ldw	r3,-4(fp)
  80161c:	e0bff917 	ldw	r2,-28(fp)
  801620:	108018e4 	muli	r2,r2,99
  801624:	1887883a 	add	r3,r3,r2
  801628:	e0bffa17 	ldw	r2,-24(fp)
  80162c:	1885883a 	add	r2,r3,r2
  801630:	10800c04 	addi	r2,r2,48
  801634:	e0fffe03 	ldbu	r3,-8(fp)
  801638:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80163c:	e0bffa17 	ldw	r2,-24(fp)
  801640:	10800044 	addi	r2,r2,1
  801644:	e0bffa15 	stw	r2,-24(fp)
  801648:	e0bffa17 	ldw	r2,-24(fp)
  80164c:	10800410 	cmplti	r2,r2,16
  801650:	103fb71e 	bne	r2,zero,801530 <__alt_data_end+0xff801530>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801654:	e0bff917 	ldw	r2,-28(fp)
  801658:	10800044 	addi	r2,r2,1
  80165c:	e0bff915 	stw	r2,-28(fp)
  801660:	e0bff917 	ldw	r2,-28(fp)
  801664:	10800090 	cmplti	r2,r2,2
  801668:	103f961e 	bne	r2,zero,8014c4 <__alt_data_end+0xff8014c4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80166c:	0001883a 	nop
  801670:	e037883a 	mov	sp,fp
  801674:	dfc00117 	ldw	ra,4(sp)
  801678:	df000017 	ldw	fp,0(sp)
  80167c:	dec00204 	addi	sp,sp,8
  801680:	f800283a 	ret

00801684 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  801684:	defffc04 	addi	sp,sp,-16
  801688:	dfc00315 	stw	ra,12(sp)
  80168c:	df000215 	stw	fp,8(sp)
  801690:	df000204 	addi	fp,sp,8
  801694:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801698:	e03ffe15 	stw	zero,-8(fp)
  80169c:	00001d06 	br	801714 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8016a0:	e0bffe17 	ldw	r2,-8(fp)
  8016a4:	00800f16 	blt	zero,r2,8016e4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8016a8:	e0bffe17 	ldw	r2,-8(fp)
  8016ac:	108018e4 	muli	r2,r2,99
  8016b0:	10801004 	addi	r2,r2,64
  8016b4:	e0ffff17 	ldw	r3,-4(fp)
  8016b8:	1889883a 	add	r4,r3,r2
  8016bc:	e0bffe17 	ldw	r2,-8(fp)
  8016c0:	10800044 	addi	r2,r2,1
  8016c4:	108018e4 	muli	r2,r2,99
  8016c8:	10801004 	addi	r2,r2,64
  8016cc:	e0ffff17 	ldw	r3,-4(fp)
  8016d0:	1885883a 	add	r2,r3,r2
  8016d4:	01801404 	movi	r6,80
  8016d8:	100b883a 	mov	r5,r2
  8016dc:	08034d80 	call	8034d8 <memcpy>
  8016e0:	00000906 	br	801708 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8016e4:	e0bffe17 	ldw	r2,-8(fp)
  8016e8:	108018e4 	muli	r2,r2,99
  8016ec:	10801004 	addi	r2,r2,64
  8016f0:	e0ffff17 	ldw	r3,-4(fp)
  8016f4:	1885883a 	add	r2,r3,r2
  8016f8:	01801404 	movi	r6,80
  8016fc:	01400804 	movi	r5,32
  801700:	1009883a 	mov	r4,r2
  801704:	08036200 	call	803620 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801708:	e0bffe17 	ldw	r2,-8(fp)
  80170c:	10800044 	addi	r2,r2,1
  801710:	e0bffe15 	stw	r2,-8(fp)
  801714:	e0bffe17 	ldw	r2,-8(fp)
  801718:	10800090 	cmplti	r2,r2,2
  80171c:	103fe01e 	bne	r2,zero,8016a0 <__alt_data_end+0xff8016a0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  801720:	e0bfff17 	ldw	r2,-4(fp)
  801724:	10800883 	ldbu	r2,34(r2)
  801728:	10bfffc4 	addi	r2,r2,-1
  80172c:	1007883a 	mov	r3,r2
  801730:	e0bfff17 	ldw	r2,-4(fp)
  801734:	10c00885 	stb	r3,34(r2)
}
  801738:	0001883a 	nop
  80173c:	e037883a 	mov	sp,fp
  801740:	dfc00117 	ldw	ra,4(sp)
  801744:	df000017 	ldw	fp,0(sp)
  801748:	dec00204 	addi	sp,sp,8
  80174c:	f800283a 	ret

00801750 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  801750:	defff904 	addi	sp,sp,-28
  801754:	dfc00615 	stw	ra,24(sp)
  801758:	df000515 	stw	fp,20(sp)
  80175c:	df000504 	addi	fp,sp,20
  801760:	e13ffe15 	stw	r4,-8(fp)
  801764:	2805883a 	mov	r2,r5
  801768:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80176c:	e03ffb15 	stw	zero,-20(fp)
  801770:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  801774:	e0bffe17 	ldw	r2,-8(fp)
  801778:	10800a03 	ldbu	r2,40(r2)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	108016d8 	cmpnei	r2,r2,91
  80178c:	1000411e 	bne	r2,zero,801894 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  801790:	e0bffe17 	ldw	r2,-8(fp)
  801794:	10800a04 	addi	r2,r2,40
  801798:	10800044 	addi	r2,r2,1
  80179c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8017a0:	00000c06 	br	8017d4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8017a4:	e0bffb17 	ldw	r2,-20(fp)
  8017a8:	10c002a4 	muli	r3,r2,10
  8017ac:	e0bffd17 	ldw	r2,-12(fp)
  8017b0:	11000044 	addi	r4,r2,1
  8017b4:	e13ffd15 	stw	r4,-12(fp)
  8017b8:	10800003 	ldbu	r2,0(r2)
  8017bc:	10803fcc 	andi	r2,r2,255
  8017c0:	1080201c 	xori	r2,r2,128
  8017c4:	10bfe004 	addi	r2,r2,-128
  8017c8:	10bff404 	addi	r2,r2,-48
  8017cc:	1885883a 	add	r2,r3,r2
  8017d0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8017d4:	d0e00a17 	ldw	r3,-32728(gp)
  8017d8:	e0bffd17 	ldw	r2,-12(fp)
  8017dc:	10800003 	ldbu	r2,0(r2)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	10800044 	addi	r2,r2,1
  8017f0:	1885883a 	add	r2,r3,r2
  8017f4:	10800003 	ldbu	r2,0(r2)
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	1080010c 	andi	r2,r2,4
  801800:	103fe81e 	bne	r2,zero,8017a4 <__alt_data_end+0xff8017a4>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  801804:	e0bffd17 	ldw	r2,-12(fp)
  801808:	10800003 	ldbu	r2,0(r2)
  80180c:	10803fcc 	andi	r2,r2,255
  801810:	1080201c 	xori	r2,r2,128
  801814:	10bfe004 	addi	r2,r2,-128
  801818:	10800ed8 	cmpnei	r2,r2,59
  80181c:	10001f1e 	bne	r2,zero,80189c <lcd_handle_escape+0x14c>
    {
      ptr++;
  801820:	e0bffd17 	ldw	r2,-12(fp)
  801824:	10800044 	addi	r2,r2,1
  801828:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80182c:	00000c06 	br	801860 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  801830:	e0bffc17 	ldw	r2,-16(fp)
  801834:	10c002a4 	muli	r3,r2,10
  801838:	e0bffd17 	ldw	r2,-12(fp)
  80183c:	11000044 	addi	r4,r2,1
  801840:	e13ffd15 	stw	r4,-12(fp)
  801844:	10800003 	ldbu	r2,0(r2)
  801848:	10803fcc 	andi	r2,r2,255
  80184c:	1080201c 	xori	r2,r2,128
  801850:	10bfe004 	addi	r2,r2,-128
  801854:	10bff404 	addi	r2,r2,-48
  801858:	1885883a 	add	r2,r3,r2
  80185c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  801860:	d0e00a17 	ldw	r3,-32728(gp)
  801864:	e0bffd17 	ldw	r2,-12(fp)
  801868:	10800003 	ldbu	r2,0(r2)
  80186c:	10803fcc 	andi	r2,r2,255
  801870:	1080201c 	xori	r2,r2,128
  801874:	10bfe004 	addi	r2,r2,-128
  801878:	10800044 	addi	r2,r2,1
  80187c:	1885883a 	add	r2,r3,r2
  801880:	10800003 	ldbu	r2,0(r2)
  801884:	10803fcc 	andi	r2,r2,255
  801888:	1080010c 	andi	r2,r2,4
  80188c:	103fe81e 	bne	r2,zero,801830 <__alt_data_end+0xff801830>
  801890:	00000206 	br	80189c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801894:	00bfffc4 	movi	r2,-1
  801898:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80189c:	e0bfff07 	ldb	r2,-4(fp)
  8018a0:	10c012a0 	cmpeqi	r3,r2,74
  8018a4:	1800291e 	bne	r3,zero,80194c <lcd_handle_escape+0x1fc>
  8018a8:	10c012c8 	cmpgei	r3,r2,75
  8018ac:	1800031e 	bne	r3,zero,8018bc <lcd_handle_escape+0x16c>
  8018b0:	10801220 	cmpeqi	r2,r2,72
  8018b4:	1000061e 	bne	r2,zero,8018d0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8018b8:	00004a06 	br	8019e4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  8018bc:	10c012e0 	cmpeqi	r3,r2,75
  8018c0:	1800281e 	bne	r3,zero,801964 <lcd_handle_escape+0x214>
  8018c4:	108019a0 	cmpeqi	r2,r2,102
  8018c8:	1000011e 	bne	r2,zero,8018d0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8018cc:	00004506 	br	8019e4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8018d0:	e0bffc17 	ldw	r2,-16(fp)
  8018d4:	0080050e 	bge	zero,r2,8018ec <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10bfffc4 	addi	r2,r2,-1
  8018e0:	1007883a 	mov	r3,r2
  8018e4:	e0bffe17 	ldw	r2,-8(fp)
  8018e8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8018ec:	e0bffb17 	ldw	r2,-20(fp)
  8018f0:	0080370e 	bge	zero,r2,8019d0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  8018f4:	e0bffb17 	ldw	r2,-20(fp)
  8018f8:	10bfffc4 	addi	r2,r2,-1
  8018fc:	1007883a 	mov	r3,r2
  801900:	e0bffe17 	ldw	r2,-8(fp)
  801904:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801908:	e0bffe17 	ldw	r2,-8(fp)
  80190c:	10800883 	ldbu	r2,34(r2)
  801910:	10803fcc 	andi	r2,r2,255
  801914:	10800170 	cmpltui	r2,r2,5
  801918:	1000061e 	bne	r2,zero,801934 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80191c:	e0bffe17 	ldw	r2,-8(fp)
  801920:	00c00104 	movi	r3,4
  801924:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  801928:	00000206 	br	801934 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80192c:	e13ffe17 	ldw	r4,-8(fp)
  801930:	08016840 	call	801684 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  801934:	e0bffe17 	ldw	r2,-8(fp)
  801938:	10800883 	ldbu	r2,34(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	108000e8 	cmpgeui	r2,r2,3
  801944:	103ff91e 	bne	r2,zero,80192c <__alt_data_end+0xff80192c>
        lcd_scroll_up(sp);
    }
    break;
  801948:	00002106 	br	8019d0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80194c:	e0bffb17 	ldw	r2,-20(fp)
  801950:	10800098 	cmpnei	r2,r2,2
  801954:	1000201e 	bne	r2,zero,8019d8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  801958:	e13ffe17 	ldw	r4,-8(fp)
  80195c:	08013c80 	call	8013c8 <lcd_clear_screen>
    break;
  801960:	00001d06 	br	8019d8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  801964:	e0bffb17 	ldw	r2,-20(fp)
  801968:	00801d16 	blt	zero,r2,8019e0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80196c:	e0bffe17 	ldw	r2,-8(fp)
  801970:	10800843 	ldbu	r2,33(r2)
  801974:	10803fcc 	andi	r2,r2,255
  801978:	10801428 	cmpgeui	r2,r2,80
  80197c:	1000181e 	bne	r2,zero,8019e0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801980:	e0bffe17 	ldw	r2,-8(fp)
  801984:	10800883 	ldbu	r2,34(r2)
  801988:	10803fcc 	andi	r2,r2,255
  80198c:	108018e4 	muli	r2,r2,99
  801990:	10801004 	addi	r2,r2,64
  801994:	e0fffe17 	ldw	r3,-8(fp)
  801998:	1887883a 	add	r3,r3,r2
  80199c:	e0bffe17 	ldw	r2,-8(fp)
  8019a0:	10800843 	ldbu	r2,33(r2)
  8019a4:	10803fcc 	andi	r2,r2,255
  8019a8:	1889883a 	add	r4,r3,r2
  8019ac:	e0bffe17 	ldw	r2,-8(fp)
  8019b0:	10800843 	ldbu	r2,33(r2)
  8019b4:	10803fcc 	andi	r2,r2,255
  8019b8:	00c01404 	movi	r3,80
  8019bc:	1885c83a 	sub	r2,r3,r2
  8019c0:	100d883a 	mov	r6,r2
  8019c4:	01400804 	movi	r5,32
  8019c8:	08036200 	call	803620 <memset>
    }
    break;
  8019cc:	00000406 	br	8019e0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  8019d0:	0001883a 	nop
  8019d4:	00000306 	br	8019e4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  8019d8:	0001883a 	nop
  8019dc:	00000106 	br	8019e4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  8019e0:	0001883a 	nop
  }
}
  8019e4:	0001883a 	nop
  8019e8:	e037883a 	mov	sp,fp
  8019ec:	dfc00117 	ldw	ra,4(sp)
  8019f0:	df000017 	ldw	fp,0(sp)
  8019f4:	dec00204 	addi	sp,sp,8
  8019f8:	f800283a 	ret

008019fc <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8019fc:	defff304 	addi	sp,sp,-52
  801a00:	dfc00c15 	stw	ra,48(sp)
  801a04:	df000b15 	stw	fp,44(sp)
  801a08:	df000b04 	addi	fp,sp,44
  801a0c:	e13ffc15 	stw	r4,-16(fp)
  801a10:	e17ffd15 	stw	r5,-12(fp)
  801a14:	e1bffe15 	stw	r6,-8(fp)
  801a18:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801a1c:	e0bffe17 	ldw	r2,-8(fp)
  801a20:	e0fffd17 	ldw	r3,-12(fp)
  801a24:	1885883a 	add	r2,r3,r2
  801a28:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801a2c:	e0bffc17 	ldw	r2,-16(fp)
  801a30:	00c00044 	movi	r3,1
  801a34:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  801a38:	00009906 	br	801ca0 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  801a3c:	e0bffd17 	ldw	r2,-12(fp)
  801a40:	10800003 	ldbu	r2,0(r2)
  801a44:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  801a48:	e0bffc17 	ldw	r2,-16(fp)
  801a4c:	10800903 	ldbu	r2,36(r2)
  801a50:	10803fcc 	andi	r2,r2,255
  801a54:	1080201c 	xori	r2,r2,128
  801a58:	10bfe004 	addi	r2,r2,-128
  801a5c:	10003716 	blt	r2,zero,801b3c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  801a60:	e0bffc17 	ldw	r2,-16(fp)
  801a64:	10800903 	ldbu	r2,36(r2)
  801a68:	10803fcc 	andi	r2,r2,255
  801a6c:	1080201c 	xori	r2,r2,128
  801a70:	10bfe004 	addi	r2,r2,-128
  801a74:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  801a78:	e0bffa17 	ldw	r2,-24(fp)
  801a7c:	1000031e 	bne	r2,zero,801a8c <altera_avalon_lcd_16207_write+0x90>
  801a80:	e0bff907 	ldb	r2,-28(fp)
  801a84:	108016d8 	cmpnei	r2,r2,91
  801a88:	10000d1e 	bne	r2,zero,801ac0 <altera_avalon_lcd_16207_write+0xc4>
  801a8c:	e0bffa17 	ldw	r2,-24(fp)
  801a90:	10001826 	beq	r2,zero,801af4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  801a94:	d0e00a17 	ldw	r3,-32728(gp)
  801a98:	e0bff907 	ldb	r2,-28(fp)
  801a9c:	10800044 	addi	r2,r2,1
  801aa0:	1885883a 	add	r2,r3,r2
  801aa4:	10800003 	ldbu	r2,0(r2)
  801aa8:	10803fcc 	andi	r2,r2,255
  801aac:	1080010c 	andi	r2,r2,4
  801ab0:	1000101e 	bne	r2,zero,801af4 <altera_avalon_lcd_16207_write+0xf8>
  801ab4:	e0bff907 	ldb	r2,-28(fp)
  801ab8:	10800ee0 	cmpeqi	r2,r2,59
  801abc:	10000d1e 	bne	r2,zero,801af4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  801ac0:	e0fffc17 	ldw	r3,-16(fp)
  801ac4:	e0bffa17 	ldw	r2,-24(fp)
  801ac8:	1885883a 	add	r2,r3,r2
  801acc:	10800a04 	addi	r2,r2,40
  801ad0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801ad4:	e0bff907 	ldb	r2,-28(fp)
  801ad8:	100b883a 	mov	r5,r2
  801adc:	e13ffc17 	ldw	r4,-16(fp)
  801ae0:	08017500 	call	801750 <lcd_handle_escape>

        sp->esccount = -1;
  801ae4:	e0bffc17 	ldw	r2,-16(fp)
  801ae8:	00ffffc4 	movi	r3,-1
  801aec:	10c00905 	stb	r3,36(r2)
  801af0:	00006806 	br	801c94 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10800903 	ldbu	r2,36(r2)
  801afc:	10803fcc 	andi	r2,r2,255
  801b00:	108001e8 	cmpgeui	r2,r2,7
  801b04:	1000631e 	bne	r2,zero,801c94 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  801b08:	e0fffc17 	ldw	r3,-16(fp)
  801b0c:	e0bffa17 	ldw	r2,-24(fp)
  801b10:	1885883a 	add	r2,r3,r2
  801b14:	10800a04 	addi	r2,r2,40
  801b18:	e0fff903 	ldbu	r3,-28(fp)
  801b1c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  801b20:	e0bffc17 	ldw	r2,-16(fp)
  801b24:	10800903 	ldbu	r2,36(r2)
  801b28:	10800044 	addi	r2,r2,1
  801b2c:	1007883a 	mov	r3,r2
  801b30:	e0bffc17 	ldw	r2,-16(fp)
  801b34:	10c00905 	stb	r3,36(r2)
  801b38:	00005606 	br	801c94 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  801b3c:	e0bff907 	ldb	r2,-28(fp)
  801b40:	108006d8 	cmpnei	r2,r2,27
  801b44:	1000031e 	bne	r2,zero,801b54 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  801b48:	e0bffc17 	ldw	r2,-16(fp)
  801b4c:	10000905 	stb	zero,36(r2)
  801b50:	00005006 	br	801c94 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  801b54:	e0bff907 	ldb	r2,-28(fp)
  801b58:	10800358 	cmpnei	r2,r2,13
  801b5c:	1000031e 	bne	r2,zero,801b6c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  801b60:	e0bffc17 	ldw	r2,-16(fp)
  801b64:	10000845 	stb	zero,33(r2)
  801b68:	00004a06 	br	801c94 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  801b6c:	e0bff907 	ldb	r2,-28(fp)
  801b70:	10800298 	cmpnei	r2,r2,10
  801b74:	1000101e 	bne	r2,zero,801bb8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  801b78:	e0bffc17 	ldw	r2,-16(fp)
  801b7c:	10000845 	stb	zero,33(r2)
      sp->y++;
  801b80:	e0bffc17 	ldw	r2,-16(fp)
  801b84:	10800883 	ldbu	r2,34(r2)
  801b88:	10800044 	addi	r2,r2,1
  801b8c:	1007883a 	mov	r3,r2
  801b90:	e0bffc17 	ldw	r2,-16(fp)
  801b94:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  801b98:	e0bffc17 	ldw	r2,-16(fp)
  801b9c:	10800883 	ldbu	r2,34(r2)
  801ba0:	10803fcc 	andi	r2,r2,255
  801ba4:	108000f0 	cmpltui	r2,r2,3
  801ba8:	10003a1e 	bne	r2,zero,801c94 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  801bac:	e13ffc17 	ldw	r4,-16(fp)
  801bb0:	08016840 	call	801684 <lcd_scroll_up>
  801bb4:	00003706 	br	801c94 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  801bb8:	e0bff907 	ldb	r2,-28(fp)
  801bbc:	10800218 	cmpnei	r2,r2,8
  801bc0:	10000b1e 	bne	r2,zero,801bf0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  801bc4:	e0bffc17 	ldw	r2,-16(fp)
  801bc8:	10800843 	ldbu	r2,33(r2)
  801bcc:	10803fcc 	andi	r2,r2,255
  801bd0:	10003026 	beq	r2,zero,801c94 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  801bd4:	e0bffc17 	ldw	r2,-16(fp)
  801bd8:	10800843 	ldbu	r2,33(r2)
  801bdc:	10bfffc4 	addi	r2,r2,-1
  801be0:	1007883a 	mov	r3,r2
  801be4:	e0bffc17 	ldw	r2,-16(fp)
  801be8:	10c00845 	stb	r3,33(r2)
  801bec:	00002906 	br	801c94 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  801bf0:	d0e00a17 	ldw	r3,-32728(gp)
  801bf4:	e0bff907 	ldb	r2,-28(fp)
  801bf8:	10800044 	addi	r2,r2,1
  801bfc:	1885883a 	add	r2,r3,r2
  801c00:	10800003 	ldbu	r2,0(r2)
  801c04:	10803fcc 	andi	r2,r2,255
  801c08:	1080201c 	xori	r2,r2,128
  801c0c:	10bfe004 	addi	r2,r2,-128
  801c10:	108025cc 	andi	r2,r2,151
  801c14:	10001f26 	beq	r2,zero,801c94 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	10800883 	ldbu	r2,34(r2)
  801c20:	10803fcc 	andi	r2,r2,255
  801c24:	108000b0 	cmpltui	r2,r2,2
  801c28:	1000021e 	bne	r2,zero,801c34 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  801c2c:	e13ffc17 	ldw	r4,-16(fp)
  801c30:	08016840 	call	801684 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801c34:	e0bffc17 	ldw	r2,-16(fp)
  801c38:	10800843 	ldbu	r2,33(r2)
  801c3c:	10803fcc 	andi	r2,r2,255
  801c40:	10801428 	cmpgeui	r2,r2,80
  801c44:	10000d1e 	bne	r2,zero,801c7c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  801c48:	e0bffc17 	ldw	r2,-16(fp)
  801c4c:	10800883 	ldbu	r2,34(r2)
  801c50:	10c03fcc 	andi	r3,r2,255
  801c54:	e0bffc17 	ldw	r2,-16(fp)
  801c58:	10800843 	ldbu	r2,33(r2)
  801c5c:	10803fcc 	andi	r2,r2,255
  801c60:	e13ffc17 	ldw	r4,-16(fp)
  801c64:	18c018e4 	muli	r3,r3,99
  801c68:	20c7883a 	add	r3,r4,r3
  801c6c:	1885883a 	add	r2,r3,r2
  801c70:	10801004 	addi	r2,r2,64
  801c74:	e0fff903 	ldbu	r3,-28(fp)
  801c78:	10c00005 	stb	r3,0(r2)

      sp->x++;
  801c7c:	e0bffc17 	ldw	r2,-16(fp)
  801c80:	10800843 	ldbu	r2,33(r2)
  801c84:	10800044 	addi	r2,r2,1
  801c88:	1007883a 	mov	r3,r2
  801c8c:	e0bffc17 	ldw	r2,-16(fp)
  801c90:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801c94:	e0bffd17 	ldw	r2,-12(fp)
  801c98:	10800044 	addi	r2,r2,1
  801c9c:	e0bffd15 	stw	r2,-12(fp)
  801ca0:	e0fffd17 	ldw	r3,-12(fp)
  801ca4:	e0bff817 	ldw	r2,-32(fp)
  801ca8:	18bf6436 	bltu	r3,r2,801a3c <__alt_data_end+0xff801a3c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  801cac:	00800404 	movi	r2,16
  801cb0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801cb4:	e03ff515 	stw	zero,-44(fp)
  801cb8:	00003706 	br	801d98 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801cbc:	00801404 	movi	r2,80
  801cc0:	e0bff715 	stw	r2,-36(fp)
  801cc4:	00001106 	br	801d0c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  801cc8:	e0bff717 	ldw	r2,-36(fp)
  801ccc:	10bfffc4 	addi	r2,r2,-1
  801cd0:	e13ffc17 	ldw	r4,-16(fp)
  801cd4:	e0fff517 	ldw	r3,-44(fp)
  801cd8:	18c018e4 	muli	r3,r3,99
  801cdc:	20c7883a 	add	r3,r4,r3
  801ce0:	1885883a 	add	r2,r3,r2
  801ce4:	10801004 	addi	r2,r2,64
  801ce8:	10800003 	ldbu	r2,0(r2)
  801cec:	10803fcc 	andi	r2,r2,255
  801cf0:	1080201c 	xori	r2,r2,128
  801cf4:	10bfe004 	addi	r2,r2,-128
  801cf8:	10800820 	cmpeqi	r2,r2,32
  801cfc:	10000626 	beq	r2,zero,801d18 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801d00:	e0bff717 	ldw	r2,-36(fp)
  801d04:	10bfffc4 	addi	r2,r2,-1
  801d08:	e0bff715 	stw	r2,-36(fp)
  801d0c:	e0bff717 	ldw	r2,-36(fp)
  801d10:	00bfed16 	blt	zero,r2,801cc8 <__alt_data_end+0xff801cc8>
  801d14:	00000106 	br	801d1c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  801d18:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801d1c:	e0bff717 	ldw	r2,-36(fp)
  801d20:	10800448 	cmpgei	r2,r2,17
  801d24:	1000031e 	bne	r2,zero,801d34 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  801d28:	00800404 	movi	r2,16
  801d2c:	e0bff715 	stw	r2,-36(fp)
  801d30:	00000306 	br	801d40 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  801d34:	e0bff717 	ldw	r2,-36(fp)
  801d38:	10800044 	addi	r2,r2,1
  801d3c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  801d40:	e0bff717 	ldw	r2,-36(fp)
  801d44:	1009883a 	mov	r4,r2
  801d48:	e0fffc17 	ldw	r3,-16(fp)
  801d4c:	e0bff517 	ldw	r2,-44(fp)
  801d50:	108018e4 	muli	r2,r2,99
  801d54:	1885883a 	add	r2,r3,r2
  801d58:	10802444 	addi	r2,r2,145
  801d5c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  801d60:	e0fff617 	ldw	r3,-40(fp)
  801d64:	e0bff717 	ldw	r2,-36(fp)
  801d68:	1880020e 	bge	r3,r2,801d74 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  801d6c:	e0bff717 	ldw	r2,-36(fp)
  801d70:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801d74:	e0fffc17 	ldw	r3,-16(fp)
  801d78:	e0bff517 	ldw	r2,-44(fp)
  801d7c:	108018e4 	muli	r2,r2,99
  801d80:	1885883a 	add	r2,r3,r2
  801d84:	10802484 	addi	r2,r2,146
  801d88:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801d8c:	e0bff517 	ldw	r2,-44(fp)
  801d90:	10800044 	addi	r2,r2,1
  801d94:	e0bff515 	stw	r2,-44(fp)
  801d98:	e0bff517 	ldw	r2,-44(fp)
  801d9c:	10800090 	cmplti	r2,r2,2
  801da0:	103fc61e 	bne	r2,zero,801cbc <__alt_data_end+0xff801cbc>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801da4:	e0bff617 	ldw	r2,-40(fp)
  801da8:	10800448 	cmpgei	r2,r2,17
  801dac:	1000031e 	bne	r2,zero,801dbc <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  801db0:	e0bffc17 	ldw	r2,-16(fp)
  801db4:	10000985 	stb	zero,38(r2)
  801db8:	00002e06 	br	801e74 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  801dbc:	e0bff617 	ldw	r2,-40(fp)
  801dc0:	1085883a 	add	r2,r2,r2
  801dc4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  801dc8:	e0bff617 	ldw	r2,-40(fp)
  801dcc:	1007883a 	mov	r3,r2
  801dd0:	e0bffc17 	ldw	r2,-16(fp)
  801dd4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801dd8:	e03ff515 	stw	zero,-44(fp)
  801ddc:	00002206 	br	801e68 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  801de0:	e0fffc17 	ldw	r3,-16(fp)
  801de4:	e0bff517 	ldw	r2,-44(fp)
  801de8:	108018e4 	muli	r2,r2,99
  801dec:	1885883a 	add	r2,r3,r2
  801df0:	10802444 	addi	r2,r2,145
  801df4:	10800003 	ldbu	r2,0(r2)
  801df8:	10803fcc 	andi	r2,r2,255
  801dfc:	1080201c 	xori	r2,r2,128
  801e00:	10bfe004 	addi	r2,r2,-128
  801e04:	10800450 	cmplti	r2,r2,17
  801e08:	1000141e 	bne	r2,zero,801e5c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801e0c:	e0fffc17 	ldw	r3,-16(fp)
  801e10:	e0bff517 	ldw	r2,-44(fp)
  801e14:	108018e4 	muli	r2,r2,99
  801e18:	1885883a 	add	r2,r3,r2
  801e1c:	10802444 	addi	r2,r2,145
  801e20:	10800003 	ldbu	r2,0(r2)
  801e24:	10803fcc 	andi	r2,r2,255
  801e28:	1080201c 	xori	r2,r2,128
  801e2c:	10bfe004 	addi	r2,r2,-128
  801e30:	1004923a 	slli	r2,r2,8
  801e34:	e17ff617 	ldw	r5,-40(fp)
  801e38:	1009883a 	mov	r4,r2
  801e3c:	0803a780 	call	803a78 <__divsi3>
  801e40:	1009883a 	mov	r4,r2
  801e44:	e0fffc17 	ldw	r3,-16(fp)
  801e48:	e0bff517 	ldw	r2,-44(fp)
  801e4c:	108018e4 	muli	r2,r2,99
  801e50:	1885883a 	add	r2,r3,r2
  801e54:	10802484 	addi	r2,r2,146
  801e58:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801e5c:	e0bff517 	ldw	r2,-44(fp)
  801e60:	10800044 	addi	r2,r2,1
  801e64:	e0bff515 	stw	r2,-44(fp)
  801e68:	e0bff517 	ldw	r2,-44(fp)
  801e6c:	10800090 	cmplti	r2,r2,2
  801e70:	103fdb1e 	bne	r2,zero,801de0 <__alt_data_end+0xff801de0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801e74:	e0bffc17 	ldw	r2,-16(fp)
  801e78:	10800943 	ldbu	r2,37(r2)
  801e7c:	10803fcc 	andi	r2,r2,255
  801e80:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  801e84:	e13ffc17 	ldw	r4,-16(fp)
  801e88:	08014980 	call	801498 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801e8c:	e0bffc17 	ldw	r2,-16(fp)
  801e90:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801e94:	e0bffc17 	ldw	r2,-16(fp)
  801e98:	10800943 	ldbu	r2,37(r2)
  801e9c:	10c03fcc 	andi	r3,r2,255
  801ea0:	e0bffb17 	ldw	r2,-20(fp)
  801ea4:	18800426 	beq	r3,r2,801eb8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801ea8:	e0bffc17 	ldw	r2,-16(fp)
  801eac:	00c00044 	movi	r3,1
  801eb0:	10c009c5 	stb	r3,39(r2)
  }
  801eb4:	003fef06 	br	801e74 <__alt_data_end+0xff801e74>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  801eb8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801ebc:	e0bffe17 	ldw	r2,-8(fp)
}
  801ec0:	e037883a 	mov	sp,fp
  801ec4:	dfc00117 	ldw	ra,4(sp)
  801ec8:	df000017 	ldw	fp,0(sp)
  801ecc:	dec00204 	addi	sp,sp,8
  801ed0:	f800283a 	ret

00801ed4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801ed4:	defffc04 	addi	sp,sp,-16
  801ed8:	dfc00315 	stw	ra,12(sp)
  801edc:	df000215 	stw	fp,8(sp)
  801ee0:	df000204 	addi	fp,sp,8
  801ee4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801ee8:	e0bfff17 	ldw	r2,-4(fp)
  801eec:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  801ef0:	e0bffe17 	ldw	r2,-8(fp)
  801ef4:	10800943 	ldbu	r2,37(r2)
  801ef8:	10803fcc 	andi	r2,r2,255
  801efc:	10c00044 	addi	r3,r2,1
  801f00:	e0bffe17 	ldw	r2,-8(fp)
  801f04:	10800983 	ldbu	r2,38(r2)
  801f08:	10803fcc 	andi	r2,r2,255
  801f0c:	18800316 	blt	r3,r2,801f1c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  801f10:	e0bffe17 	ldw	r2,-8(fp)
  801f14:	10000945 	stb	zero,37(r2)
  801f18:	00000606 	br	801f34 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  801f1c:	e0bffe17 	ldw	r2,-8(fp)
  801f20:	10800943 	ldbu	r2,37(r2)
  801f24:	10800044 	addi	r2,r2,1
  801f28:	1007883a 	mov	r3,r2
  801f2c:	e0bffe17 	ldw	r2,-8(fp)
  801f30:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  801f34:	e0bffe17 	ldw	r2,-8(fp)
  801f38:	10800983 	ldbu	r2,38(r2)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	10000826 	beq	r2,zero,801f64 <alt_lcd_16207_timeout+0x90>
  801f44:	e0bffe17 	ldw	r2,-8(fp)
  801f48:	108009c3 	ldbu	r2,39(r2)
  801f4c:	10803fcc 	andi	r2,r2,255
  801f50:	1080201c 	xori	r2,r2,128
  801f54:	10bfe004 	addi	r2,r2,-128
  801f58:	1000021e 	bne	r2,zero,801f64 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  801f5c:	e13ffe17 	ldw	r4,-8(fp)
  801f60:	08014980 	call	801498 <lcd_repaint_screen>

  return sp->period;
  801f64:	e0bffe17 	ldw	r2,-8(fp)
  801f68:	10800717 	ldw	r2,28(r2)
}
  801f6c:	e037883a 	mov	sp,fp
  801f70:	dfc00117 	ldw	ra,4(sp)
  801f74:	df000017 	ldw	fp,0(sp)
  801f78:	dec00204 	addi	sp,sp,8
  801f7c:	f800283a 	ret

00801f80 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801f80:	defffc04 	addi	sp,sp,-16
  801f84:	dfc00315 	stw	ra,12(sp)
  801f88:	df000215 	stw	fp,8(sp)
  801f8c:	df000204 	addi	fp,sp,8
  801f90:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  801f94:	e0bfff17 	ldw	r2,-4(fp)
  801f98:	10800017 	ldw	r2,0(r2)
  801f9c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801fa0:	e0bfff17 	ldw	r2,-4(fp)
  801fa4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  801fa8:	010ea604 	movi	r4,15000
  801fac:	0802efc0 	call	802efc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801fb0:	e0bffe17 	ldw	r2,-8(fp)
  801fb4:	00c00c04 	movi	r3,48
  801fb8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  801fbc:	01040104 	movi	r4,4100
  801fc0:	0802efc0 	call	802efc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801fc4:	e0bffe17 	ldw	r2,-8(fp)
  801fc8:	00c00c04 	movi	r3,48
  801fcc:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  801fd0:	0100fa04 	movi	r4,1000
  801fd4:	0802efc0 	call	802efc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801fd8:	e0bffe17 	ldw	r2,-8(fp)
  801fdc:	00c00c04 	movi	r3,48
  801fe0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  801fe4:	01400e04 	movi	r5,56
  801fe8:	e13fff17 	ldw	r4,-4(fp)
  801fec:	08012380 	call	801238 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  801ff0:	01400204 	movi	r5,8
  801ff4:	e13fff17 	ldw	r4,-4(fp)
  801ff8:	08012380 	call	801238 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  801ffc:	e13fff17 	ldw	r4,-4(fp)
  802000:	08013c80 	call	8013c8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  802004:	01400184 	movi	r5,6
  802008:	e13fff17 	ldw	r4,-4(fp)
  80200c:	08012380 	call	801238 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  802010:	01400304 	movi	r5,12
  802014:	e13fff17 	ldw	r4,-4(fp)
  802018:	08012380 	call	801238 <lcd_write_command>

  sp->esccount = -1;
  80201c:	e0bfff17 	ldw	r2,-4(fp)
  802020:	00ffffc4 	movi	r3,-1
  802024:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  802028:	e0bfff17 	ldw	r2,-4(fp)
  80202c:	10800a04 	addi	r2,r2,40
  802030:	01800204 	movi	r6,8
  802034:	000b883a 	mov	r5,zero
  802038:	1009883a 	mov	r4,r2
  80203c:	08036200 	call	803620 <memset>

  sp->scrollpos = 0;
  802040:	e0bfff17 	ldw	r2,-4(fp)
  802044:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  802048:	e0bfff17 	ldw	r2,-4(fp)
  80204c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  802050:	e0bfff17 	ldw	r2,-4(fp)
  802054:	100009c5 	stb	zero,39(r2)
  802058:	d0a61417 	ldw	r2,-26544(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80205c:	01400284 	movi	r5,10
  802060:	1009883a 	mov	r4,r2
  802064:	0803b700 	call	803b70 <__udivsi3>
  802068:	1007883a 	mov	r3,r2
  80206c:	e0bfff17 	ldw	r2,-4(fp)
  802070:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  802074:	e0bfff17 	ldw	r2,-4(fp)
  802078:	10c00104 	addi	r3,r2,4
  80207c:	e0bfff17 	ldw	r2,-4(fp)
  802080:	10800717 	ldw	r2,28(r2)
  802084:	e1ffff17 	ldw	r7,-4(fp)
  802088:	01802034 	movhi	r6,128
  80208c:	3187b504 	addi	r6,r6,7892
  802090:	100b883a 	mov	r5,r2
  802094:	1809883a 	mov	r4,r3
  802098:	08024e00 	call	8024e0 <alt_alarm_start>
}
  80209c:	0001883a 	nop
  8020a0:	e037883a 	mov	sp,fp
  8020a4:	dfc00117 	ldw	ra,4(sp)
  8020a8:	df000017 	ldw	fp,0(sp)
  8020ac:	dec00204 	addi	sp,sp,8
  8020b0:	f800283a 	ret

008020b4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8020b4:	defffa04 	addi	sp,sp,-24
  8020b8:	dfc00515 	stw	ra,20(sp)
  8020bc:	df000415 	stw	fp,16(sp)
  8020c0:	df000404 	addi	fp,sp,16
  8020c4:	e13ffd15 	stw	r4,-12(fp)
  8020c8:	e17ffe15 	stw	r5,-8(fp)
  8020cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8020d0:	e0bffd17 	ldw	r2,-12(fp)
  8020d4:	10800017 	ldw	r2,0(r2)
  8020d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8020dc:	e0bffc17 	ldw	r2,-16(fp)
  8020e0:	10c00a04 	addi	r3,r2,40
  8020e4:	e0bffd17 	ldw	r2,-12(fp)
  8020e8:	10800217 	ldw	r2,8(r2)
  8020ec:	100f883a 	mov	r7,r2
  8020f0:	e1bfff17 	ldw	r6,-4(fp)
  8020f4:	e17ffe17 	ldw	r5,-8(fp)
  8020f8:	1809883a 	mov	r4,r3
  8020fc:	08019fc0 	call	8019fc <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  802100:	e037883a 	mov	sp,fp
  802104:	dfc00117 	ldw	ra,4(sp)
  802108:	df000017 	ldw	fp,0(sp)
  80210c:	dec00204 	addi	sp,sp,8
  802110:	f800283a 	ret

00802114 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  802114:	defff904 	addi	sp,sp,-28
  802118:	dfc00615 	stw	ra,24(sp)
  80211c:	df000515 	stw	fp,20(sp)
  802120:	df000504 	addi	fp,sp,20
  802124:	e13ffe15 	stw	r4,-8(fp)
  802128:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80212c:	0007883a 	mov	r3,zero
  802130:	e0bffe17 	ldw	r2,-8(fp)
  802134:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  802138:	e0bffe17 	ldw	r2,-8(fp)
  80213c:	10800104 	addi	r2,r2,4
  802140:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802144:	0005303a 	rdctl	r2,status
  802148:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80214c:	e0fffc17 	ldw	r3,-16(fp)
  802150:	00bfff84 	movi	r2,-2
  802154:	1884703a 	and	r2,r3,r2
  802158:	1001703a 	wrctl	status,r2
  
  return context;
  80215c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  802160:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  802164:	0802df40 	call	802df4 <alt_tick>
  802168:	e0bffb17 	ldw	r2,-20(fp)
  80216c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802170:	e0bffd17 	ldw	r2,-12(fp)
  802174:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  802178:	0001883a 	nop
  80217c:	e037883a 	mov	sp,fp
  802180:	dfc00117 	ldw	ra,4(sp)
  802184:	df000017 	ldw	fp,0(sp)
  802188:	dec00204 	addi	sp,sp,8
  80218c:	f800283a 	ret

00802190 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  802190:	defff904 	addi	sp,sp,-28
  802194:	dfc00615 	stw	ra,24(sp)
  802198:	df000515 	stw	fp,20(sp)
  80219c:	df000504 	addi	fp,sp,20
  8021a0:	e13ffc15 	stw	r4,-16(fp)
  8021a4:	e17ffd15 	stw	r5,-12(fp)
  8021a8:	e1bffe15 	stw	r6,-8(fp)
  8021ac:	e1ffff15 	stw	r7,-4(fp)
  8021b0:	e0bfff17 	ldw	r2,-4(fp)
  8021b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8021b8:	d0a61417 	ldw	r2,-26544(gp)
  8021bc:	1000021e 	bne	r2,zero,8021c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8021c0:	e0bffb17 	ldw	r2,-20(fp)
  8021c4:	d0a61415 	stw	r2,-26544(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8021c8:	e0bffc17 	ldw	r2,-16(fp)
  8021cc:	10800104 	addi	r2,r2,4
  8021d0:	00c001c4 	movi	r3,7
  8021d4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  8021d8:	01802034 	movhi	r6,128
  8021dc:	31884504 	addi	r6,r6,8468
  8021e0:	e17ffc17 	ldw	r5,-16(fp)
  8021e4:	e13ffe17 	ldw	r4,-8(fp)
  8021e8:	08003e40 	call	8003e4 <alt_irq_register>
#endif  
}
  8021ec:	0001883a 	nop
  8021f0:	e037883a 	mov	sp,fp
  8021f4:	dfc00117 	ldw	ra,4(sp)
  8021f8:	df000017 	ldw	fp,0(sp)
  8021fc:	dec00204 	addi	sp,sp,8
  802200:	f800283a 	ret

00802204 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802204:	defffa04 	addi	sp,sp,-24
  802208:	dfc00515 	stw	ra,20(sp)
  80220c:	df000415 	stw	fp,16(sp)
  802210:	df000404 	addi	fp,sp,16
  802214:	e13ffd15 	stw	r4,-12(fp)
  802218:	e17ffe15 	stw	r5,-8(fp)
  80221c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802220:	e0bffd17 	ldw	r2,-12(fp)
  802224:	10800017 	ldw	r2,0(r2)
  802228:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80222c:	e0bffc17 	ldw	r2,-16(fp)
  802230:	10c00a04 	addi	r3,r2,40
  802234:	e0bffd17 	ldw	r2,-12(fp)
  802238:	10800217 	ldw	r2,8(r2)
  80223c:	100f883a 	mov	r7,r2
  802240:	e1bfff17 	ldw	r6,-4(fp)
  802244:	e17ffe17 	ldw	r5,-8(fp)
  802248:	1809883a 	mov	r4,r3
  80224c:	08023000 	call	802300 <altera_avalon_uart_read>
      fd->fd_flags);
}
  802250:	e037883a 	mov	sp,fp
  802254:	dfc00117 	ldw	ra,4(sp)
  802258:	df000017 	ldw	fp,0(sp)
  80225c:	dec00204 	addi	sp,sp,8
  802260:	f800283a 	ret

00802264 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  802264:	defffa04 	addi	sp,sp,-24
  802268:	dfc00515 	stw	ra,20(sp)
  80226c:	df000415 	stw	fp,16(sp)
  802270:	df000404 	addi	fp,sp,16
  802274:	e13ffd15 	stw	r4,-12(fp)
  802278:	e17ffe15 	stw	r5,-8(fp)
  80227c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802280:	e0bffd17 	ldw	r2,-12(fp)
  802284:	10800017 	ldw	r2,0(r2)
  802288:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80228c:	e0bffc17 	ldw	r2,-16(fp)
  802290:	10c00a04 	addi	r3,r2,40
  802294:	e0bffd17 	ldw	r2,-12(fp)
  802298:	10800217 	ldw	r2,8(r2)
  80229c:	100f883a 	mov	r7,r2
  8022a0:	e1bfff17 	ldw	r6,-4(fp)
  8022a4:	e17ffe17 	ldw	r5,-8(fp)
  8022a8:	1809883a 	mov	r4,r3
  8022ac:	08024000 	call	802400 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8022b0:	e037883a 	mov	sp,fp
  8022b4:	dfc00117 	ldw	ra,4(sp)
  8022b8:	df000017 	ldw	fp,0(sp)
  8022bc:	dec00204 	addi	sp,sp,8
  8022c0:	f800283a 	ret

008022c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8022c4:	defffe04 	addi	sp,sp,-8
  8022c8:	dfc00115 	stw	ra,4(sp)
  8022cc:	df000015 	stw	fp,0(sp)
  8022d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8022d4:	d0a00717 	ldw	r2,-32740(gp)
  8022d8:	10000326 	beq	r2,zero,8022e8 <alt_get_errno+0x24>
  8022dc:	d0a00717 	ldw	r2,-32740(gp)
  8022e0:	103ee83a 	callr	r2
  8022e4:	00000106 	br	8022ec <alt_get_errno+0x28>
  8022e8:	d0a61704 	addi	r2,gp,-26532
}
  8022ec:	e037883a 	mov	sp,fp
  8022f0:	dfc00117 	ldw	ra,4(sp)
  8022f4:	df000017 	ldw	fp,0(sp)
  8022f8:	dec00204 	addi	sp,sp,8
  8022fc:	f800283a 	ret

00802300 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  802300:	defff804 	addi	sp,sp,-32
  802304:	dfc00715 	stw	ra,28(sp)
  802308:	df000615 	stw	fp,24(sp)
  80230c:	df000604 	addi	fp,sp,24
  802310:	e13ffc15 	stw	r4,-16(fp)
  802314:	e17ffd15 	stw	r5,-12(fp)
  802318:	e1bffe15 	stw	r6,-8(fp)
  80231c:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
  802320:	e0bfff17 	ldw	r2,-4(fp)
  802324:	1090000c 	andi	r2,r2,16384
  802328:	1005003a 	cmpeq	r2,r2,zero
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10800017 	ldw	r2,0(r2)
  80233c:	10800204 	addi	r2,r2,8
  802340:	10800037 	ldwio	r2,0(r2)
  802344:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
  802348:	e0bffc17 	ldw	r2,-16(fp)
  80234c:	10800017 	ldw	r2,0(r2)
  802350:	10800204 	addi	r2,r2,8
  802354:	0007883a 	mov	r3,zero
  802358:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
  80235c:	e0bffb17 	ldw	r2,-20(fp)
  802360:	1080200c 	andi	r2,r2,128
  802364:	10000b26 	beq	r2,zero,802394 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  802368:	e0bffc17 	ldw	r2,-16(fp)
  80236c:	10800017 	ldw	r2,0(r2)
  802370:	10800037 	ldwio	r2,0(r2)
  802374:	1007883a 	mov	r3,r2
  802378:	e0bffd17 	ldw	r2,-12(fp)
  80237c:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  802380:	e0bffb17 	ldw	r2,-20(fp)
  802384:	108000cc 	andi	r2,r2,3
  802388:	1000021e 	bne	r2,zero,802394 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
  80238c:	00800044 	movi	r2,1
  802390:	00000706 	br	8023b0 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
  802394:	e0bffa17 	ldw	r2,-24(fp)
  802398:	103fe61e 	bne	r2,zero,802334 <__alt_data_end+0xff802334>

  ALT_ERRNO = EWOULDBLOCK;
  80239c:	08022c40 	call	8022c4 <alt_get_errno>
  8023a0:	1007883a 	mov	r3,r2
  8023a4:	008002c4 	movi	r2,11
  8023a8:	18800015 	stw	r2,0(r3)
 
  return 0;
  8023ac:	0005883a 	mov	r2,zero
}
  8023b0:	e037883a 	mov	sp,fp
  8023b4:	dfc00117 	ldw	ra,4(sp)
  8023b8:	df000017 	ldw	fp,0(sp)
  8023bc:	dec00204 	addi	sp,sp,8
  8023c0:	f800283a 	ret

008023c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8023c4:	defffe04 	addi	sp,sp,-8
  8023c8:	dfc00115 	stw	ra,4(sp)
  8023cc:	df000015 	stw	fp,0(sp)
  8023d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8023d4:	d0a00717 	ldw	r2,-32740(gp)
  8023d8:	10000326 	beq	r2,zero,8023e8 <alt_get_errno+0x24>
  8023dc:	d0a00717 	ldw	r2,-32740(gp)
  8023e0:	103ee83a 	callr	r2
  8023e4:	00000106 	br	8023ec <alt_get_errno+0x28>
  8023e8:	d0a61704 	addi	r2,gp,-26532
}
  8023ec:	e037883a 	mov	sp,fp
  8023f0:	dfc00117 	ldw	ra,4(sp)
  8023f4:	df000017 	ldw	fp,0(sp)
  8023f8:	dec00204 	addi	sp,sp,8
  8023fc:	f800283a 	ret

00802400 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  802400:	defff704 	addi	sp,sp,-36
  802404:	dfc00815 	stw	ra,32(sp)
  802408:	df000715 	stw	fp,28(sp)
  80240c:	df000704 	addi	fp,sp,28
  802410:	e13ffc15 	stw	r4,-16(fp)
  802414:	e17ffd15 	stw	r5,-12(fp)
  802418:	e1bffe15 	stw	r6,-8(fp)
  80241c:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
  802420:	e0bfff17 	ldw	r2,-4(fp)
  802424:	1090000c 	andi	r2,r2,16384
  802428:	1005003a 	cmpeq	r2,r2,zero
  80242c:	10803fcc 	andi	r2,r2,255
  802430:	e0bffa15 	stw	r2,-24(fp)
  count = len;
  802434:	e0bffe17 	ldw	r2,-8(fp)
  802438:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
  80243c:	e0bffc17 	ldw	r2,-16(fp)
  802440:	10800017 	ldw	r2,0(r2)
  802444:	10800204 	addi	r2,r2,8
  802448:	10800037 	ldwio	r2,0(r2)
  80244c:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
  802450:	e0bffb17 	ldw	r2,-20(fp)
  802454:	1080100c 	andi	r2,r2,64
  802458:	10000f26 	beq	r2,zero,802498 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
  80245c:	e0bffc17 	ldw	r2,-16(fp)
  802460:	10800017 	ldw	r2,0(r2)
  802464:	10800104 	addi	r2,r2,4
  802468:	1009883a 	mov	r4,r2
  80246c:	e0bffd17 	ldw	r2,-12(fp)
  802470:	10c00044 	addi	r3,r2,1
  802474:	e0fffd15 	stw	r3,-12(fp)
  802478:	10800003 	ldbu	r2,0(r2)
  80247c:	10803fcc 	andi	r2,r2,255
  802480:	1080201c 	xori	r2,r2,128
  802484:	10bfe004 	addi	r2,r2,-128
  802488:	20800035 	stwio	r2,0(r4)
      count--;
  80248c:	e0bff917 	ldw	r2,-28(fp)
  802490:	10bfffc4 	addi	r2,r2,-1
  802494:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
  802498:	e0bffa17 	ldw	r2,-24(fp)
  80249c:	10000226 	beq	r2,zero,8024a8 <altera_avalon_uart_write+0xa8>
  8024a0:	e0bff917 	ldw	r2,-28(fp)
  8024a4:	103fe51e 	bne	r2,zero,80243c <__alt_data_end+0xff80243c>

  if (count)
  8024a8:	e0bff917 	ldw	r2,-28(fp)
  8024ac:	10000426 	beq	r2,zero,8024c0 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
  8024b0:	08023c40 	call	8023c4 <alt_get_errno>
  8024b4:	1007883a 	mov	r3,r2
  8024b8:	008002c4 	movi	r2,11
  8024bc:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
  8024c0:	e0fffe17 	ldw	r3,-8(fp)
  8024c4:	e0bff917 	ldw	r2,-28(fp)
  8024c8:	1885c83a 	sub	r2,r3,r2
}
  8024cc:	e037883a 	mov	sp,fp
  8024d0:	dfc00117 	ldw	ra,4(sp)
  8024d4:	df000017 	ldw	fp,0(sp)
  8024d8:	dec00204 	addi	sp,sp,8
  8024dc:	f800283a 	ret

008024e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8024e0:	defff504 	addi	sp,sp,-44
  8024e4:	df000a15 	stw	fp,40(sp)
  8024e8:	df000a04 	addi	fp,sp,40
  8024ec:	e13ffc15 	stw	r4,-16(fp)
  8024f0:	e17ffd15 	stw	r5,-12(fp)
  8024f4:	e1bffe15 	stw	r6,-8(fp)
  8024f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8024fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802500:	d0a61417 	ldw	r2,-26544(gp)
  
  if (alt_ticks_per_second ())
  802504:	10003c26 	beq	r2,zero,8025f8 <alt_alarm_start+0x118>
  {
    if (alarm)
  802508:	e0bffc17 	ldw	r2,-16(fp)
  80250c:	10003826 	beq	r2,zero,8025f0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  802510:	e0bffc17 	ldw	r2,-16(fp)
  802514:	e0fffe17 	ldw	r3,-8(fp)
  802518:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80251c:	e0bffc17 	ldw	r2,-16(fp)
  802520:	e0ffff17 	ldw	r3,-4(fp)
  802524:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802528:	0005303a 	rdctl	r2,status
  80252c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802530:	e0fff917 	ldw	r3,-28(fp)
  802534:	00bfff84 	movi	r2,-2
  802538:	1884703a 	and	r2,r3,r2
  80253c:	1001703a 	wrctl	status,r2
  
  return context;
  802540:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  802544:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  802548:	d0a61517 	ldw	r2,-26540(gp)
      
      current_nticks = alt_nticks();
  80254c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  802550:	e0fffd17 	ldw	r3,-12(fp)
  802554:	e0bff617 	ldw	r2,-40(fp)
  802558:	1885883a 	add	r2,r3,r2
  80255c:	10c00044 	addi	r3,r2,1
  802560:	e0bffc17 	ldw	r2,-16(fp)
  802564:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10c00217 	ldw	r3,8(r2)
  802570:	e0bff617 	ldw	r2,-40(fp)
  802574:	1880042e 	bgeu	r3,r2,802588 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  802578:	e0bffc17 	ldw	r2,-16(fp)
  80257c:	00c00044 	movi	r3,1
  802580:	10c00405 	stb	r3,16(r2)
  802584:	00000206 	br	802590 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802590:	e0bffc17 	ldw	r2,-16(fp)
  802594:	d0e00804 	addi	r3,gp,-32736
  802598:	e0fffa15 	stw	r3,-24(fp)
  80259c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8025a0:	e0bffb17 	ldw	r2,-20(fp)
  8025a4:	e0fffa17 	ldw	r3,-24(fp)
  8025a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8025ac:	e0bffa17 	ldw	r2,-24(fp)
  8025b0:	10c00017 	ldw	r3,0(r2)
  8025b4:	e0bffb17 	ldw	r2,-20(fp)
  8025b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8025bc:	e0bffa17 	ldw	r2,-24(fp)
  8025c0:	10800017 	ldw	r2,0(r2)
  8025c4:	e0fffb17 	ldw	r3,-20(fp)
  8025c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8025cc:	e0bffa17 	ldw	r2,-24(fp)
  8025d0:	e0fffb17 	ldw	r3,-20(fp)
  8025d4:	10c00015 	stw	r3,0(r2)
  8025d8:	e0bff817 	ldw	r2,-32(fp)
  8025dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8025e0:	e0bff717 	ldw	r2,-36(fp)
  8025e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8025e8:	0005883a 	mov	r2,zero
  8025ec:	00000306 	br	8025fc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8025f0:	00bffa84 	movi	r2,-22
  8025f4:	00000106 	br	8025fc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8025f8:	00bfde84 	movi	r2,-134
  }
}
  8025fc:	e037883a 	mov	sp,fp
  802600:	df000017 	ldw	fp,0(sp)
  802604:	dec00104 	addi	sp,sp,4
  802608:	f800283a 	ret

0080260c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80260c:	defffe04 	addi	sp,sp,-8
  802610:	dfc00115 	stw	ra,4(sp)
  802614:	df000015 	stw	fp,0(sp)
  802618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80261c:	d0a00717 	ldw	r2,-32740(gp)
  802620:	10000326 	beq	r2,zero,802630 <alt_get_errno+0x24>
  802624:	d0a00717 	ldw	r2,-32740(gp)
  802628:	103ee83a 	callr	r2
  80262c:	00000106 	br	802634 <alt_get_errno+0x28>
  802630:	d0a61704 	addi	r2,gp,-26532
}
  802634:	e037883a 	mov	sp,fp
  802638:	dfc00117 	ldw	ra,4(sp)
  80263c:	df000017 	ldw	fp,0(sp)
  802640:	dec00204 	addi	sp,sp,8
  802644:	f800283a 	ret

00802648 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802648:	defffb04 	addi	sp,sp,-20
  80264c:	dfc00415 	stw	ra,16(sp)
  802650:	df000315 	stw	fp,12(sp)
  802654:	df000304 	addi	fp,sp,12
  802658:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80265c:	e0bfff17 	ldw	r2,-4(fp)
  802660:	10000616 	blt	r2,zero,80267c <close+0x34>
  802664:	e0bfff17 	ldw	r2,-4(fp)
  802668:	10c00324 	muli	r3,r2,12
  80266c:	00802034 	movhi	r2,128
  802670:	10946404 	addi	r2,r2,20880
  802674:	1885883a 	add	r2,r3,r2
  802678:	00000106 	br	802680 <close+0x38>
  80267c:	0005883a 	mov	r2,zero
  802680:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802684:	e0bffd17 	ldw	r2,-12(fp)
  802688:	10001926 	beq	r2,zero,8026f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80268c:	e0bffd17 	ldw	r2,-12(fp)
  802690:	10800017 	ldw	r2,0(r2)
  802694:	10800417 	ldw	r2,16(r2)
  802698:	10000626 	beq	r2,zero,8026b4 <close+0x6c>
  80269c:	e0bffd17 	ldw	r2,-12(fp)
  8026a0:	10800017 	ldw	r2,0(r2)
  8026a4:	10800417 	ldw	r2,16(r2)
  8026a8:	e13ffd17 	ldw	r4,-12(fp)
  8026ac:	103ee83a 	callr	r2
  8026b0:	00000106 	br	8026b8 <close+0x70>
  8026b4:	0005883a 	mov	r2,zero
  8026b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8026bc:	e13fff17 	ldw	r4,-4(fp)
  8026c0:	0802cf40 	call	802cf4 <alt_release_fd>
    if (rval < 0)
  8026c4:	e0bffe17 	ldw	r2,-8(fp)
  8026c8:	1000070e 	bge	r2,zero,8026e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8026cc:	080260c0 	call	80260c <alt_get_errno>
  8026d0:	1007883a 	mov	r3,r2
  8026d4:	e0bffe17 	ldw	r2,-8(fp)
  8026d8:	0085c83a 	sub	r2,zero,r2
  8026dc:	18800015 	stw	r2,0(r3)
      return -1;
  8026e0:	00bfffc4 	movi	r2,-1
  8026e4:	00000706 	br	802704 <close+0xbc>
    }
    return 0;
  8026e8:	0005883a 	mov	r2,zero
  8026ec:	00000506 	br	802704 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8026f0:	080260c0 	call	80260c <alt_get_errno>
  8026f4:	1007883a 	mov	r3,r2
  8026f8:	00801444 	movi	r2,81
  8026fc:	18800015 	stw	r2,0(r3)
    return -1;
  802700:	00bfffc4 	movi	r2,-1
  }
}
  802704:	e037883a 	mov	sp,fp
  802708:	dfc00117 	ldw	ra,4(sp)
  80270c:	df000017 	ldw	fp,0(sp)
  802710:	dec00204 	addi	sp,sp,8
  802714:	f800283a 	ret

00802718 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802718:	defffe04 	addi	sp,sp,-8
  80271c:	df000115 	stw	fp,4(sp)
  802720:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802724:	e03fff15 	stw	zero,-4(fp)
  802728:	00000506 	br	802740 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80272c:	e0bfff17 	ldw	r2,-4(fp)
  802730:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802734:	e0bfff17 	ldw	r2,-4(fp)
  802738:	10800804 	addi	r2,r2,32
  80273c:	e0bfff15 	stw	r2,-4(fp)
  802740:	e0bfff17 	ldw	r2,-4(fp)
  802744:	10820030 	cmpltui	r2,r2,2048
  802748:	103ff81e 	bne	r2,zero,80272c <__alt_data_end+0xff80272c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80274c:	0001883a 	nop
  802750:	e037883a 	mov	sp,fp
  802754:	df000017 	ldw	fp,0(sp)
  802758:	dec00104 	addi	sp,sp,4
  80275c:	f800283a 	ret

00802760 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802760:	defffc04 	addi	sp,sp,-16
  802764:	df000315 	stw	fp,12(sp)
  802768:	df000304 	addi	fp,sp,12
  80276c:	e13ffd15 	stw	r4,-12(fp)
  802770:	e17ffe15 	stw	r5,-8(fp)
  802774:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802778:	e0bfff17 	ldw	r2,-4(fp)
}
  80277c:	e037883a 	mov	sp,fp
  802780:	df000017 	ldw	fp,0(sp)
  802784:	dec00104 	addi	sp,sp,4
  802788:	f800283a 	ret

0080278c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80278c:	defffe04 	addi	sp,sp,-8
  802790:	dfc00115 	stw	ra,4(sp)
  802794:	df000015 	stw	fp,0(sp)
  802798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80279c:	d0a00717 	ldw	r2,-32740(gp)
  8027a0:	10000326 	beq	r2,zero,8027b0 <alt_get_errno+0x24>
  8027a4:	d0a00717 	ldw	r2,-32740(gp)
  8027a8:	103ee83a 	callr	r2
  8027ac:	00000106 	br	8027b4 <alt_get_errno+0x28>
  8027b0:	d0a61704 	addi	r2,gp,-26532
}
  8027b4:	e037883a 	mov	sp,fp
  8027b8:	dfc00117 	ldw	ra,4(sp)
  8027bc:	df000017 	ldw	fp,0(sp)
  8027c0:	dec00204 	addi	sp,sp,8
  8027c4:	f800283a 	ret

008027c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8027c8:	defffa04 	addi	sp,sp,-24
  8027cc:	dfc00515 	stw	ra,20(sp)
  8027d0:	df000415 	stw	fp,16(sp)
  8027d4:	df000404 	addi	fp,sp,16
  8027d8:	e13ffe15 	stw	r4,-8(fp)
  8027dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8027e0:	e0bffe17 	ldw	r2,-8(fp)
  8027e4:	10000326 	beq	r2,zero,8027f4 <alt_dev_llist_insert+0x2c>
  8027e8:	e0bffe17 	ldw	r2,-8(fp)
  8027ec:	10800217 	ldw	r2,8(r2)
  8027f0:	1000061e 	bne	r2,zero,80280c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8027f4:	080278c0 	call	80278c <alt_get_errno>
  8027f8:	1007883a 	mov	r3,r2
  8027fc:	00800584 	movi	r2,22
  802800:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  802804:	00bffa84 	movi	r2,-22
  802808:	00001306 	br	802858 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80280c:	e0bffe17 	ldw	r2,-8(fp)
  802810:	e0ffff17 	ldw	r3,-4(fp)
  802814:	e0fffc15 	stw	r3,-16(fp)
  802818:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80281c:	e0bffd17 	ldw	r2,-12(fp)
  802820:	e0fffc17 	ldw	r3,-16(fp)
  802824:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802828:	e0bffc17 	ldw	r2,-16(fp)
  80282c:	10c00017 	ldw	r3,0(r2)
  802830:	e0bffd17 	ldw	r2,-12(fp)
  802834:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802838:	e0bffc17 	ldw	r2,-16(fp)
  80283c:	10800017 	ldw	r2,0(r2)
  802840:	e0fffd17 	ldw	r3,-12(fp)
  802844:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802848:	e0bffc17 	ldw	r2,-16(fp)
  80284c:	e0fffd17 	ldw	r3,-12(fp)
  802850:	10c00015 	stw	r3,0(r2)

  return 0;  
  802854:	0005883a 	mov	r2,zero
}
  802858:	e037883a 	mov	sp,fp
  80285c:	dfc00117 	ldw	ra,4(sp)
  802860:	df000017 	ldw	fp,0(sp)
  802864:	dec00204 	addi	sp,sp,8
  802868:	f800283a 	ret

0080286c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80286c:	defffd04 	addi	sp,sp,-12
  802870:	dfc00215 	stw	ra,8(sp)
  802874:	df000115 	stw	fp,4(sp)
  802878:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80287c:	00802034 	movhi	r2,128
  802880:	108f1704 	addi	r2,r2,15452
  802884:	e0bfff15 	stw	r2,-4(fp)
  802888:	00000606 	br	8028a4 <_do_ctors+0x38>
        (*ctor) (); 
  80288c:	e0bfff17 	ldw	r2,-4(fp)
  802890:	10800017 	ldw	r2,0(r2)
  802894:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802898:	e0bfff17 	ldw	r2,-4(fp)
  80289c:	10bfff04 	addi	r2,r2,-4
  8028a0:	e0bfff15 	stw	r2,-4(fp)
  8028a4:	e0ffff17 	ldw	r3,-4(fp)
  8028a8:	00802034 	movhi	r2,128
  8028ac:	108f1804 	addi	r2,r2,15456
  8028b0:	18bff62e 	bgeu	r3,r2,80288c <__alt_data_end+0xff80288c>
        (*ctor) (); 
}
  8028b4:	0001883a 	nop
  8028b8:	e037883a 	mov	sp,fp
  8028bc:	dfc00117 	ldw	ra,4(sp)
  8028c0:	df000017 	ldw	fp,0(sp)
  8028c4:	dec00204 	addi	sp,sp,8
  8028c8:	f800283a 	ret

008028cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8028cc:	defffd04 	addi	sp,sp,-12
  8028d0:	dfc00215 	stw	ra,8(sp)
  8028d4:	df000115 	stw	fp,4(sp)
  8028d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8028dc:	00802034 	movhi	r2,128
  8028e0:	108f1704 	addi	r2,r2,15452
  8028e4:	e0bfff15 	stw	r2,-4(fp)
  8028e8:	00000606 	br	802904 <_do_dtors+0x38>
        (*dtor) (); 
  8028ec:	e0bfff17 	ldw	r2,-4(fp)
  8028f0:	10800017 	ldw	r2,0(r2)
  8028f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8028f8:	e0bfff17 	ldw	r2,-4(fp)
  8028fc:	10bfff04 	addi	r2,r2,-4
  802900:	e0bfff15 	stw	r2,-4(fp)
  802904:	e0ffff17 	ldw	r3,-4(fp)
  802908:	00802034 	movhi	r2,128
  80290c:	108f1804 	addi	r2,r2,15456
  802910:	18bff62e 	bgeu	r3,r2,8028ec <__alt_data_end+0xff8028ec>
        (*dtor) (); 
}
  802914:	0001883a 	nop
  802918:	e037883a 	mov	sp,fp
  80291c:	dfc00117 	ldw	ra,4(sp)
  802920:	df000017 	ldw	fp,0(sp)
  802924:	dec00204 	addi	sp,sp,8
  802928:	f800283a 	ret

0080292c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80292c:	defffe04 	addi	sp,sp,-8
  802930:	dfc00115 	stw	ra,4(sp)
  802934:	df000015 	stw	fp,0(sp)
  802938:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80293c:	01440004 	movi	r5,4096
  802940:	0009883a 	mov	r4,zero
  802944:	08032e40 	call	8032e4 <alt_icache_flush>
#endif
}
  802948:	0001883a 	nop
  80294c:	e037883a 	mov	sp,fp
  802950:	dfc00117 	ldw	ra,4(sp)
  802954:	df000017 	ldw	fp,0(sp)
  802958:	dec00204 	addi	sp,sp,8
  80295c:	f800283a 	ret

00802960 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  802960:	defff904 	addi	sp,sp,-28
  802964:	dfc00615 	stw	ra,24(sp)
  802968:	df000515 	stw	fp,20(sp)
  80296c:	df000504 	addi	fp,sp,20
  802970:	e13ffc15 	stw	r4,-16(fp)
  802974:	e17ffd15 	stw	r5,-12(fp)
  802978:	e1bffe15 	stw	r6,-8(fp)
  80297c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  802980:	e1bfff17 	ldw	r6,-4(fp)
  802984:	e17ffe17 	ldw	r5,-8(fp)
  802988:	e13ffd17 	ldw	r4,-12(fp)
  80298c:	0802ba00 	call	802ba0 <open>
  802990:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  802994:	e0bffb17 	ldw	r2,-20(fp)
  802998:	10001c16 	blt	r2,zero,802a0c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80299c:	00802034 	movhi	r2,128
  8029a0:	10946404 	addi	r2,r2,20880
  8029a4:	e0fffb17 	ldw	r3,-20(fp)
  8029a8:	18c00324 	muli	r3,r3,12
  8029ac:	10c5883a 	add	r2,r2,r3
  8029b0:	10c00017 	ldw	r3,0(r2)
  8029b4:	e0bffc17 	ldw	r2,-16(fp)
  8029b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8029bc:	00802034 	movhi	r2,128
  8029c0:	10946404 	addi	r2,r2,20880
  8029c4:	e0fffb17 	ldw	r3,-20(fp)
  8029c8:	18c00324 	muli	r3,r3,12
  8029cc:	10c5883a 	add	r2,r2,r3
  8029d0:	10800104 	addi	r2,r2,4
  8029d4:	10c00017 	ldw	r3,0(r2)
  8029d8:	e0bffc17 	ldw	r2,-16(fp)
  8029dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8029e0:	00802034 	movhi	r2,128
  8029e4:	10946404 	addi	r2,r2,20880
  8029e8:	e0fffb17 	ldw	r3,-20(fp)
  8029ec:	18c00324 	muli	r3,r3,12
  8029f0:	10c5883a 	add	r2,r2,r3
  8029f4:	10800204 	addi	r2,r2,8
  8029f8:	10c00017 	ldw	r3,0(r2)
  8029fc:	e0bffc17 	ldw	r2,-16(fp)
  802a00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  802a04:	e13ffb17 	ldw	r4,-20(fp)
  802a08:	0802cf40 	call	802cf4 <alt_release_fd>
  }
} 
  802a0c:	0001883a 	nop
  802a10:	e037883a 	mov	sp,fp
  802a14:	dfc00117 	ldw	ra,4(sp)
  802a18:	df000017 	ldw	fp,0(sp)
  802a1c:	dec00204 	addi	sp,sp,8
  802a20:	f800283a 	ret

00802a24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802a24:	defffb04 	addi	sp,sp,-20
  802a28:	dfc00415 	stw	ra,16(sp)
  802a2c:	df000315 	stw	fp,12(sp)
  802a30:	df000304 	addi	fp,sp,12
  802a34:	e13ffd15 	stw	r4,-12(fp)
  802a38:	e17ffe15 	stw	r5,-8(fp)
  802a3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802a40:	01c07fc4 	movi	r7,511
  802a44:	01800044 	movi	r6,1
  802a48:	e17ffd17 	ldw	r5,-12(fp)
  802a4c:	01002034 	movhi	r4,128
  802a50:	21146704 	addi	r4,r4,20892
  802a54:	08029600 	call	802960 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802a58:	01c07fc4 	movi	r7,511
  802a5c:	000d883a 	mov	r6,zero
  802a60:	e17ffe17 	ldw	r5,-8(fp)
  802a64:	01002034 	movhi	r4,128
  802a68:	21146404 	addi	r4,r4,20880
  802a6c:	08029600 	call	802960 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802a70:	01c07fc4 	movi	r7,511
  802a74:	01800044 	movi	r6,1
  802a78:	e17fff17 	ldw	r5,-4(fp)
  802a7c:	01002034 	movhi	r4,128
  802a80:	21146a04 	addi	r4,r4,20904
  802a84:	08029600 	call	802960 <alt_open_fd>
}  
  802a88:	0001883a 	nop
  802a8c:	e037883a 	mov	sp,fp
  802a90:	dfc00117 	ldw	ra,4(sp)
  802a94:	df000017 	ldw	fp,0(sp)
  802a98:	dec00204 	addi	sp,sp,8
  802a9c:	f800283a 	ret

00802aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802aa0:	defffe04 	addi	sp,sp,-8
  802aa4:	dfc00115 	stw	ra,4(sp)
  802aa8:	df000015 	stw	fp,0(sp)
  802aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802ab0:	d0a00717 	ldw	r2,-32740(gp)
  802ab4:	10000326 	beq	r2,zero,802ac4 <alt_get_errno+0x24>
  802ab8:	d0a00717 	ldw	r2,-32740(gp)
  802abc:	103ee83a 	callr	r2
  802ac0:	00000106 	br	802ac8 <alt_get_errno+0x28>
  802ac4:	d0a61704 	addi	r2,gp,-26532
}
  802ac8:	e037883a 	mov	sp,fp
  802acc:	dfc00117 	ldw	ra,4(sp)
  802ad0:	df000017 	ldw	fp,0(sp)
  802ad4:	dec00204 	addi	sp,sp,8
  802ad8:	f800283a 	ret

00802adc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  802adc:	defffd04 	addi	sp,sp,-12
  802ae0:	df000215 	stw	fp,8(sp)
  802ae4:	df000204 	addi	fp,sp,8
  802ae8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  802aec:	e0bfff17 	ldw	r2,-4(fp)
  802af0:	10800217 	ldw	r2,8(r2)
  802af4:	10d00034 	orhi	r3,r2,16384
  802af8:	e0bfff17 	ldw	r2,-4(fp)
  802afc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  802b00:	e03ffe15 	stw	zero,-8(fp)
  802b04:	00001d06 	br	802b7c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  802b08:	00802034 	movhi	r2,128
  802b0c:	10946404 	addi	r2,r2,20880
  802b10:	e0fffe17 	ldw	r3,-8(fp)
  802b14:	18c00324 	muli	r3,r3,12
  802b18:	10c5883a 	add	r2,r2,r3
  802b1c:	10c00017 	ldw	r3,0(r2)
  802b20:	e0bfff17 	ldw	r2,-4(fp)
  802b24:	10800017 	ldw	r2,0(r2)
  802b28:	1880111e 	bne	r3,r2,802b70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  802b2c:	00802034 	movhi	r2,128
  802b30:	10946404 	addi	r2,r2,20880
  802b34:	e0fffe17 	ldw	r3,-8(fp)
  802b38:	18c00324 	muli	r3,r3,12
  802b3c:	10c5883a 	add	r2,r2,r3
  802b40:	10800204 	addi	r2,r2,8
  802b44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  802b48:	1000090e 	bge	r2,zero,802b70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  802b4c:	e0bffe17 	ldw	r2,-8(fp)
  802b50:	10c00324 	muli	r3,r2,12
  802b54:	00802034 	movhi	r2,128
  802b58:	10946404 	addi	r2,r2,20880
  802b5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  802b60:	e0bfff17 	ldw	r2,-4(fp)
  802b64:	18800226 	beq	r3,r2,802b70 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  802b68:	00bffcc4 	movi	r2,-13
  802b6c:	00000806 	br	802b90 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  802b70:	e0bffe17 	ldw	r2,-8(fp)
  802b74:	10800044 	addi	r2,r2,1
  802b78:	e0bffe15 	stw	r2,-8(fp)
  802b7c:	d0a00617 	ldw	r2,-32744(gp)
  802b80:	1007883a 	mov	r3,r2
  802b84:	e0bffe17 	ldw	r2,-8(fp)
  802b88:	18bfdf2e 	bgeu	r3,r2,802b08 <__alt_data_end+0xff802b08>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  802b8c:	0005883a 	mov	r2,zero
}
  802b90:	e037883a 	mov	sp,fp
  802b94:	df000017 	ldw	fp,0(sp)
  802b98:	dec00104 	addi	sp,sp,4
  802b9c:	f800283a 	ret

00802ba0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  802ba0:	defff604 	addi	sp,sp,-40
  802ba4:	dfc00915 	stw	ra,36(sp)
  802ba8:	df000815 	stw	fp,32(sp)
  802bac:	df000804 	addi	fp,sp,32
  802bb0:	e13ffd15 	stw	r4,-12(fp)
  802bb4:	e17ffe15 	stw	r5,-8(fp)
  802bb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  802bbc:	00bfffc4 	movi	r2,-1
  802bc0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  802bc4:	00bffb44 	movi	r2,-19
  802bc8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  802bcc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  802bd0:	d1600404 	addi	r5,gp,-32752
  802bd4:	e13ffd17 	ldw	r4,-12(fp)
  802bd8:	08030a80 	call	8030a8 <alt_find_dev>
  802bdc:	e0bff815 	stw	r2,-32(fp)
  802be0:	e0bff817 	ldw	r2,-32(fp)
  802be4:	1000051e 	bne	r2,zero,802bfc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  802be8:	e13ffd17 	ldw	r4,-12(fp)
  802bec:	08031380 	call	803138 <alt_find_file>
  802bf0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  802bf4:	00800044 	movi	r2,1
  802bf8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  802bfc:	e0bff817 	ldw	r2,-32(fp)
  802c00:	10002926 	beq	r2,zero,802ca8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  802c04:	e13ff817 	ldw	r4,-32(fp)
  802c08:	08032400 	call	803240 <alt_get_fd>
  802c0c:	e0bff915 	stw	r2,-28(fp)
  802c10:	e0bff917 	ldw	r2,-28(fp)
  802c14:	1000030e 	bge	r2,zero,802c24 <open+0x84>
    {
      status = index;
  802c18:	e0bff917 	ldw	r2,-28(fp)
  802c1c:	e0bffa15 	stw	r2,-24(fp)
  802c20:	00002306 	br	802cb0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  802c24:	e0bff917 	ldw	r2,-28(fp)
  802c28:	10c00324 	muli	r3,r2,12
  802c2c:	00802034 	movhi	r2,128
  802c30:	10946404 	addi	r2,r2,20880
  802c34:	1885883a 	add	r2,r3,r2
  802c38:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  802c3c:	e0fffe17 	ldw	r3,-8(fp)
  802c40:	00900034 	movhi	r2,16384
  802c44:	10bfffc4 	addi	r2,r2,-1
  802c48:	1886703a 	and	r3,r3,r2
  802c4c:	e0bffc17 	ldw	r2,-16(fp)
  802c50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  802c54:	e0bffb17 	ldw	r2,-20(fp)
  802c58:	1000051e 	bne	r2,zero,802c70 <open+0xd0>
  802c5c:	e13ffc17 	ldw	r4,-16(fp)
  802c60:	0802adc0 	call	802adc <alt_file_locked>
  802c64:	e0bffa15 	stw	r2,-24(fp)
  802c68:	e0bffa17 	ldw	r2,-24(fp)
  802c6c:	10001016 	blt	r2,zero,802cb0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  802c70:	e0bff817 	ldw	r2,-32(fp)
  802c74:	10800317 	ldw	r2,12(r2)
  802c78:	10000826 	beq	r2,zero,802c9c <open+0xfc>
  802c7c:	e0bff817 	ldw	r2,-32(fp)
  802c80:	10800317 	ldw	r2,12(r2)
  802c84:	e1ffff17 	ldw	r7,-4(fp)
  802c88:	e1bffe17 	ldw	r6,-8(fp)
  802c8c:	e17ffd17 	ldw	r5,-12(fp)
  802c90:	e13ffc17 	ldw	r4,-16(fp)
  802c94:	103ee83a 	callr	r2
  802c98:	00000106 	br	802ca0 <open+0x100>
  802c9c:	0005883a 	mov	r2,zero
  802ca0:	e0bffa15 	stw	r2,-24(fp)
  802ca4:	00000206 	br	802cb0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  802ca8:	00bffb44 	movi	r2,-19
  802cac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  802cb0:	e0bffa17 	ldw	r2,-24(fp)
  802cb4:	1000090e 	bge	r2,zero,802cdc <open+0x13c>
  {
    alt_release_fd (index);  
  802cb8:	e13ff917 	ldw	r4,-28(fp)
  802cbc:	0802cf40 	call	802cf4 <alt_release_fd>
    ALT_ERRNO = -status;
  802cc0:	0802aa00 	call	802aa0 <alt_get_errno>
  802cc4:	1007883a 	mov	r3,r2
  802cc8:	e0bffa17 	ldw	r2,-24(fp)
  802ccc:	0085c83a 	sub	r2,zero,r2
  802cd0:	18800015 	stw	r2,0(r3)
    return -1;
  802cd4:	00bfffc4 	movi	r2,-1
  802cd8:	00000106 	br	802ce0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  802cdc:	e0bff917 	ldw	r2,-28(fp)
}
  802ce0:	e037883a 	mov	sp,fp
  802ce4:	dfc00117 	ldw	ra,4(sp)
  802ce8:	df000017 	ldw	fp,0(sp)
  802cec:	dec00204 	addi	sp,sp,8
  802cf0:	f800283a 	ret

00802cf4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  802cf4:	defffe04 	addi	sp,sp,-8
  802cf8:	df000115 	stw	fp,4(sp)
  802cfc:	df000104 	addi	fp,sp,4
  802d00:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  802d04:	e0bfff17 	ldw	r2,-4(fp)
  802d08:	108000d0 	cmplti	r2,r2,3
  802d0c:	10000d1e 	bne	r2,zero,802d44 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  802d10:	00802034 	movhi	r2,128
  802d14:	10946404 	addi	r2,r2,20880
  802d18:	e0ffff17 	ldw	r3,-4(fp)
  802d1c:	18c00324 	muli	r3,r3,12
  802d20:	10c5883a 	add	r2,r2,r3
  802d24:	10800204 	addi	r2,r2,8
  802d28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  802d2c:	00802034 	movhi	r2,128
  802d30:	10946404 	addi	r2,r2,20880
  802d34:	e0ffff17 	ldw	r3,-4(fp)
  802d38:	18c00324 	muli	r3,r3,12
  802d3c:	10c5883a 	add	r2,r2,r3
  802d40:	10000015 	stw	zero,0(r2)
  }
}
  802d44:	0001883a 	nop
  802d48:	e037883a 	mov	sp,fp
  802d4c:	df000017 	ldw	fp,0(sp)
  802d50:	dec00104 	addi	sp,sp,4
  802d54:	f800283a 	ret

00802d58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  802d58:	defffa04 	addi	sp,sp,-24
  802d5c:	df000515 	stw	fp,20(sp)
  802d60:	df000504 	addi	fp,sp,20
  802d64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d68:	0005303a 	rdctl	r2,status
  802d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d70:	e0fffc17 	ldw	r3,-16(fp)
  802d74:	00bfff84 	movi	r2,-2
  802d78:	1884703a 	and	r2,r3,r2
  802d7c:	1001703a 	wrctl	status,r2
  
  return context;
  802d80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  802d84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  802d88:	e0bfff17 	ldw	r2,-4(fp)
  802d8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  802d90:	e0bffd17 	ldw	r2,-12(fp)
  802d94:	10800017 	ldw	r2,0(r2)
  802d98:	e0fffd17 	ldw	r3,-12(fp)
  802d9c:	18c00117 	ldw	r3,4(r3)
  802da0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  802da4:	e0bffd17 	ldw	r2,-12(fp)
  802da8:	10800117 	ldw	r2,4(r2)
  802dac:	e0fffd17 	ldw	r3,-12(fp)
  802db0:	18c00017 	ldw	r3,0(r3)
  802db4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  802db8:	e0bffd17 	ldw	r2,-12(fp)
  802dbc:	e0fffd17 	ldw	r3,-12(fp)
  802dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  802dc4:	e0bffd17 	ldw	r2,-12(fp)
  802dc8:	e0fffd17 	ldw	r3,-12(fp)
  802dcc:	10c00015 	stw	r3,0(r2)
  802dd0:	e0bffb17 	ldw	r2,-20(fp)
  802dd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802dd8:	e0bffe17 	ldw	r2,-8(fp)
  802ddc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  802de0:	0001883a 	nop
  802de4:	e037883a 	mov	sp,fp
  802de8:	df000017 	ldw	fp,0(sp)
  802dec:	dec00104 	addi	sp,sp,4
  802df0:	f800283a 	ret

00802df4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  802df4:	defffb04 	addi	sp,sp,-20
  802df8:	dfc00415 	stw	ra,16(sp)
  802dfc:	df000315 	stw	fp,12(sp)
  802e00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  802e04:	d0a00817 	ldw	r2,-32736(gp)
  802e08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  802e0c:	d0a61517 	ldw	r2,-26540(gp)
  802e10:	10800044 	addi	r2,r2,1
  802e14:	d0a61515 	stw	r2,-26540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  802e18:	00002e06 	br	802ed4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  802e1c:	e0bffd17 	ldw	r2,-12(fp)
  802e20:	10800017 	ldw	r2,0(r2)
  802e24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  802e28:	e0bffd17 	ldw	r2,-12(fp)
  802e2c:	10800403 	ldbu	r2,16(r2)
  802e30:	10803fcc 	andi	r2,r2,255
  802e34:	10000426 	beq	r2,zero,802e48 <alt_tick+0x54>
  802e38:	d0a61517 	ldw	r2,-26540(gp)
  802e3c:	1000021e 	bne	r2,zero,802e48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  802e40:	e0bffd17 	ldw	r2,-12(fp)
  802e44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  802e48:	e0bffd17 	ldw	r2,-12(fp)
  802e4c:	10800217 	ldw	r2,8(r2)
  802e50:	d0e61517 	ldw	r3,-26540(gp)
  802e54:	18801d36 	bltu	r3,r2,802ecc <alt_tick+0xd8>
  802e58:	e0bffd17 	ldw	r2,-12(fp)
  802e5c:	10800403 	ldbu	r2,16(r2)
  802e60:	10803fcc 	andi	r2,r2,255
  802e64:	1000191e 	bne	r2,zero,802ecc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  802e68:	e0bffd17 	ldw	r2,-12(fp)
  802e6c:	10800317 	ldw	r2,12(r2)
  802e70:	e0fffd17 	ldw	r3,-12(fp)
  802e74:	18c00517 	ldw	r3,20(r3)
  802e78:	1809883a 	mov	r4,r3
  802e7c:	103ee83a 	callr	r2
  802e80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  802e84:	e0bfff17 	ldw	r2,-4(fp)
  802e88:	1000031e 	bne	r2,zero,802e98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  802e8c:	e13ffd17 	ldw	r4,-12(fp)
  802e90:	0802d580 	call	802d58 <alt_alarm_stop>
  802e94:	00000d06 	br	802ecc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  802e98:	e0bffd17 	ldw	r2,-12(fp)
  802e9c:	10c00217 	ldw	r3,8(r2)
  802ea0:	e0bfff17 	ldw	r2,-4(fp)
  802ea4:	1887883a 	add	r3,r3,r2
  802ea8:	e0bffd17 	ldw	r2,-12(fp)
  802eac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  802eb0:	e0bffd17 	ldw	r2,-12(fp)
  802eb4:	10c00217 	ldw	r3,8(r2)
  802eb8:	d0a61517 	ldw	r2,-26540(gp)
  802ebc:	1880032e 	bgeu	r3,r2,802ecc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  802ec0:	e0bffd17 	ldw	r2,-12(fp)
  802ec4:	00c00044 	movi	r3,1
  802ec8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  802ecc:	e0bffe17 	ldw	r2,-8(fp)
  802ed0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  802ed4:	e0fffd17 	ldw	r3,-12(fp)
  802ed8:	d0a00804 	addi	r2,gp,-32736
  802edc:	18bfcf1e 	bne	r3,r2,802e1c <__alt_data_end+0xff802e1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  802ee0:	0001883a 	nop
}
  802ee4:	0001883a 	nop
  802ee8:	e037883a 	mov	sp,fp
  802eec:	dfc00117 	ldw	ra,4(sp)
  802ef0:	df000017 	ldw	fp,0(sp)
  802ef4:	dec00204 	addi	sp,sp,8
  802ef8:	f800283a 	ret

00802efc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  802efc:	defffd04 	addi	sp,sp,-12
  802f00:	dfc00215 	stw	ra,8(sp)
  802f04:	df000115 	stw	fp,4(sp)
  802f08:	df000104 	addi	fp,sp,4
  802f0c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  802f10:	e13fff17 	ldw	r4,-4(fp)
  802f14:	0802f500 	call	802f50 <alt_busy_sleep>
}
  802f18:	e037883a 	mov	sp,fp
  802f1c:	dfc00117 	ldw	ra,4(sp)
  802f20:	df000017 	ldw	fp,0(sp)
  802f24:	dec00204 	addi	sp,sp,8
  802f28:	f800283a 	ret

00802f2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  802f2c:	deffff04 	addi	sp,sp,-4
  802f30:	df000015 	stw	fp,0(sp)
  802f34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  802f38:	000170fa 	wrctl	ienable,zero
}
  802f3c:	0001883a 	nop
  802f40:	e037883a 	mov	sp,fp
  802f44:	df000017 	ldw	fp,0(sp)
  802f48:	dec00104 	addi	sp,sp,4
  802f4c:	f800283a 	ret

00802f50 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  802f50:	defffa04 	addi	sp,sp,-24
  802f54:	dfc00515 	stw	ra,20(sp)
  802f58:	df000415 	stw	fp,16(sp)
  802f5c:	df000404 	addi	fp,sp,16
  802f60:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  802f64:	008000c4 	movi	r2,3
  802f68:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  802f6c:	e0fffd17 	ldw	r3,-12(fp)
  802f70:	008003f4 	movhi	r2,15
  802f74:	10909004 	addi	r2,r2,16960
  802f78:	1885383a 	mul	r2,r3,r2
  802f7c:	100b883a 	mov	r5,r2
  802f80:	0100bef4 	movhi	r4,763
  802f84:	213c2004 	addi	r4,r4,-3968
  802f88:	0803b700 	call	803b70 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  802f8c:	100b883a 	mov	r5,r2
  802f90:	01200034 	movhi	r4,32768
  802f94:	213fffc4 	addi	r4,r4,-1
  802f98:	0803b700 	call	803b70 <__udivsi3>
  802f9c:	100b883a 	mov	r5,r2
  802fa0:	e13fff17 	ldw	r4,-4(fp)
  802fa4:	0803b700 	call	803b70 <__udivsi3>
  802fa8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  802fac:	e0bffe17 	ldw	r2,-8(fp)
  802fb0:	10002a26 	beq	r2,zero,80305c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  802fb4:	e03ffc15 	stw	zero,-16(fp)
  802fb8:	00001706 	br	803018 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  802fbc:	00a00034 	movhi	r2,32768
  802fc0:	10bfffc4 	addi	r2,r2,-1
  802fc4:	10bfffc4 	addi	r2,r2,-1
  802fc8:	103ffe1e 	bne	r2,zero,802fc4 <__alt_data_end+0xff802fc4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  802fcc:	e0fffd17 	ldw	r3,-12(fp)
  802fd0:	008003f4 	movhi	r2,15
  802fd4:	10909004 	addi	r2,r2,16960
  802fd8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  802fdc:	100b883a 	mov	r5,r2
  802fe0:	0100bef4 	movhi	r4,763
  802fe4:	213c2004 	addi	r4,r4,-3968
  802fe8:	0803b700 	call	803b70 <__udivsi3>
  802fec:	100b883a 	mov	r5,r2
  802ff0:	01200034 	movhi	r4,32768
  802ff4:	213fffc4 	addi	r4,r4,-1
  802ff8:	0803b700 	call	803b70 <__udivsi3>
  802ffc:	1007883a 	mov	r3,r2
  803000:	e0bfff17 	ldw	r2,-4(fp)
  803004:	10c5c83a 	sub	r2,r2,r3
  803008:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80300c:	e0bffc17 	ldw	r2,-16(fp)
  803010:	10800044 	addi	r2,r2,1
  803014:	e0bffc15 	stw	r2,-16(fp)
  803018:	e0fffc17 	ldw	r3,-16(fp)
  80301c:	e0bffe17 	ldw	r2,-8(fp)
  803020:	18bfe616 	blt	r3,r2,802fbc <__alt_data_end+0xff802fbc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803024:	e0fffd17 	ldw	r3,-12(fp)
  803028:	008003f4 	movhi	r2,15
  80302c:	10909004 	addi	r2,r2,16960
  803030:	1885383a 	mul	r2,r3,r2
  803034:	100b883a 	mov	r5,r2
  803038:	0100bef4 	movhi	r4,763
  80303c:	213c2004 	addi	r4,r4,-3968
  803040:	0803b700 	call	803b70 <__udivsi3>
  803044:	1007883a 	mov	r3,r2
  803048:	e0bfff17 	ldw	r2,-4(fp)
  80304c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803050:	10bfffc4 	addi	r2,r2,-1
  803054:	103ffe1e 	bne	r2,zero,803050 <__alt_data_end+0xff803050>
  803058:	00000d06 	br	803090 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80305c:	e0fffd17 	ldw	r3,-12(fp)
  803060:	008003f4 	movhi	r2,15
  803064:	10909004 	addi	r2,r2,16960
  803068:	1885383a 	mul	r2,r3,r2
  80306c:	100b883a 	mov	r5,r2
  803070:	0100bef4 	movhi	r4,763
  803074:	213c2004 	addi	r4,r4,-3968
  803078:	0803b700 	call	803b70 <__udivsi3>
  80307c:	1007883a 	mov	r3,r2
  803080:	e0bfff17 	ldw	r2,-4(fp)
  803084:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803088:	10bfffc4 	addi	r2,r2,-1
  80308c:	00bffe16 	blt	zero,r2,803088 <__alt_data_end+0xff803088>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  803090:	0005883a 	mov	r2,zero
}
  803094:	e037883a 	mov	sp,fp
  803098:	dfc00117 	ldw	ra,4(sp)
  80309c:	df000017 	ldw	fp,0(sp)
  8030a0:	dec00204 	addi	sp,sp,8
  8030a4:	f800283a 	ret

008030a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8030a8:	defffa04 	addi	sp,sp,-24
  8030ac:	dfc00515 	stw	ra,20(sp)
  8030b0:	df000415 	stw	fp,16(sp)
  8030b4:	df000404 	addi	fp,sp,16
  8030b8:	e13ffe15 	stw	r4,-8(fp)
  8030bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8030c0:	e0bfff17 	ldw	r2,-4(fp)
  8030c4:	10800017 	ldw	r2,0(r2)
  8030c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8030cc:	e13ffe17 	ldw	r4,-8(fp)
  8030d0:	08037480 	call	803748 <strlen>
  8030d4:	10800044 	addi	r2,r2,1
  8030d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8030dc:	00000d06 	br	803114 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8030e0:	e0bffc17 	ldw	r2,-16(fp)
  8030e4:	10800217 	ldw	r2,8(r2)
  8030e8:	e0fffd17 	ldw	r3,-12(fp)
  8030ec:	180d883a 	mov	r6,r3
  8030f0:	e17ffe17 	ldw	r5,-8(fp)
  8030f4:	1009883a 	mov	r4,r2
  8030f8:	080345c0 	call	80345c <memcmp>
  8030fc:	1000021e 	bne	r2,zero,803108 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803100:	e0bffc17 	ldw	r2,-16(fp)
  803104:	00000706 	br	803124 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  803108:	e0bffc17 	ldw	r2,-16(fp)
  80310c:	10800017 	ldw	r2,0(r2)
  803110:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803114:	e0fffc17 	ldw	r3,-16(fp)
  803118:	e0bfff17 	ldw	r2,-4(fp)
  80311c:	18bff01e 	bne	r3,r2,8030e0 <__alt_data_end+0xff8030e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803120:	0005883a 	mov	r2,zero
}
  803124:	e037883a 	mov	sp,fp
  803128:	dfc00117 	ldw	ra,4(sp)
  80312c:	df000017 	ldw	fp,0(sp)
  803130:	dec00204 	addi	sp,sp,8
  803134:	f800283a 	ret

00803138 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803138:	defffb04 	addi	sp,sp,-20
  80313c:	dfc00415 	stw	ra,16(sp)
  803140:	df000315 	stw	fp,12(sp)
  803144:	df000304 	addi	fp,sp,12
  803148:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80314c:	d0a00217 	ldw	r2,-32760(gp)
  803150:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803154:	00003106 	br	80321c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  803158:	e0bffd17 	ldw	r2,-12(fp)
  80315c:	10800217 	ldw	r2,8(r2)
  803160:	1009883a 	mov	r4,r2
  803164:	08037480 	call	803748 <strlen>
  803168:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80316c:	e0bffd17 	ldw	r2,-12(fp)
  803170:	10c00217 	ldw	r3,8(r2)
  803174:	e0bffe17 	ldw	r2,-8(fp)
  803178:	10bfffc4 	addi	r2,r2,-1
  80317c:	1885883a 	add	r2,r3,r2
  803180:	10800003 	ldbu	r2,0(r2)
  803184:	10803fcc 	andi	r2,r2,255
  803188:	1080201c 	xori	r2,r2,128
  80318c:	10bfe004 	addi	r2,r2,-128
  803190:	10800bd8 	cmpnei	r2,r2,47
  803194:	1000031e 	bne	r2,zero,8031a4 <alt_find_file+0x6c>
    {
      len -= 1;
  803198:	e0bffe17 	ldw	r2,-8(fp)
  80319c:	10bfffc4 	addi	r2,r2,-1
  8031a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8031a4:	e0bffe17 	ldw	r2,-8(fp)
  8031a8:	e0ffff17 	ldw	r3,-4(fp)
  8031ac:	1885883a 	add	r2,r3,r2
  8031b0:	10800003 	ldbu	r2,0(r2)
  8031b4:	10803fcc 	andi	r2,r2,255
  8031b8:	1080201c 	xori	r2,r2,128
  8031bc:	10bfe004 	addi	r2,r2,-128
  8031c0:	10800be0 	cmpeqi	r2,r2,47
  8031c4:	1000081e 	bne	r2,zero,8031e8 <alt_find_file+0xb0>
  8031c8:	e0bffe17 	ldw	r2,-8(fp)
  8031cc:	e0ffff17 	ldw	r3,-4(fp)
  8031d0:	1885883a 	add	r2,r3,r2
  8031d4:	10800003 	ldbu	r2,0(r2)
  8031d8:	10803fcc 	andi	r2,r2,255
  8031dc:	1080201c 	xori	r2,r2,128
  8031e0:	10bfe004 	addi	r2,r2,-128
  8031e4:	10000a1e 	bne	r2,zero,803210 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8031e8:	e0bffd17 	ldw	r2,-12(fp)
  8031ec:	10800217 	ldw	r2,8(r2)
  8031f0:	e0fffe17 	ldw	r3,-8(fp)
  8031f4:	180d883a 	mov	r6,r3
  8031f8:	e17fff17 	ldw	r5,-4(fp)
  8031fc:	1009883a 	mov	r4,r2
  803200:	080345c0 	call	80345c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803204:	1000021e 	bne	r2,zero,803210 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803208:	e0bffd17 	ldw	r2,-12(fp)
  80320c:	00000706 	br	80322c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  803210:	e0bffd17 	ldw	r2,-12(fp)
  803214:	10800017 	ldw	r2,0(r2)
  803218:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80321c:	e0fffd17 	ldw	r3,-12(fp)
  803220:	d0a00204 	addi	r2,gp,-32760
  803224:	18bfcc1e 	bne	r3,r2,803158 <__alt_data_end+0xff803158>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  803228:	0005883a 	mov	r2,zero
}
  80322c:	e037883a 	mov	sp,fp
  803230:	dfc00117 	ldw	ra,4(sp)
  803234:	df000017 	ldw	fp,0(sp)
  803238:	dec00204 	addi	sp,sp,8
  80323c:	f800283a 	ret

00803240 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803240:	defffc04 	addi	sp,sp,-16
  803244:	df000315 	stw	fp,12(sp)
  803248:	df000304 	addi	fp,sp,12
  80324c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  803250:	00bffa04 	movi	r2,-24
  803254:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803258:	e03ffd15 	stw	zero,-12(fp)
  80325c:	00001906 	br	8032c4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  803260:	00802034 	movhi	r2,128
  803264:	10946404 	addi	r2,r2,20880
  803268:	e0fffd17 	ldw	r3,-12(fp)
  80326c:	18c00324 	muli	r3,r3,12
  803270:	10c5883a 	add	r2,r2,r3
  803274:	10800017 	ldw	r2,0(r2)
  803278:	10000f1e 	bne	r2,zero,8032b8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80327c:	00802034 	movhi	r2,128
  803280:	10946404 	addi	r2,r2,20880
  803284:	e0fffd17 	ldw	r3,-12(fp)
  803288:	18c00324 	muli	r3,r3,12
  80328c:	10c5883a 	add	r2,r2,r3
  803290:	e0ffff17 	ldw	r3,-4(fp)
  803294:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  803298:	d0e00617 	ldw	r3,-32744(gp)
  80329c:	e0bffd17 	ldw	r2,-12(fp)
  8032a0:	1880020e 	bge	r3,r2,8032ac <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8032a4:	e0bffd17 	ldw	r2,-12(fp)
  8032a8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
  8032ac:	e0bffd17 	ldw	r2,-12(fp)
  8032b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8032b4:	00000606 	br	8032d0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8032b8:	e0bffd17 	ldw	r2,-12(fp)
  8032bc:	10800044 	addi	r2,r2,1
  8032c0:	e0bffd15 	stw	r2,-12(fp)
  8032c4:	e0bffd17 	ldw	r2,-12(fp)
  8032c8:	10800810 	cmplti	r2,r2,32
  8032cc:	103fe41e 	bne	r2,zero,803260 <__alt_data_end+0xff803260>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8032d0:	e0bffe17 	ldw	r2,-8(fp)
}
  8032d4:	e037883a 	mov	sp,fp
  8032d8:	df000017 	ldw	fp,0(sp)
  8032dc:	dec00104 	addi	sp,sp,4
  8032e0:	f800283a 	ret

008032e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8032e4:	defffb04 	addi	sp,sp,-20
  8032e8:	df000415 	stw	fp,16(sp)
  8032ec:	df000404 	addi	fp,sp,16
  8032f0:	e13ffe15 	stw	r4,-8(fp)
  8032f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8032f8:	e0bfff17 	ldw	r2,-4(fp)
  8032fc:	10840070 	cmpltui	r2,r2,4097
  803300:	1000021e 	bne	r2,zero,80330c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  803304:	00840004 	movi	r2,4096
  803308:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80330c:	e0fffe17 	ldw	r3,-8(fp)
  803310:	e0bfff17 	ldw	r2,-4(fp)
  803314:	1885883a 	add	r2,r3,r2
  803318:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80331c:	e0bffe17 	ldw	r2,-8(fp)
  803320:	e0bffc15 	stw	r2,-16(fp)
  803324:	00000506 	br	80333c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  803328:	e0bffc17 	ldw	r2,-16(fp)
  80332c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10800804 	addi	r2,r2,32
  803338:	e0bffc15 	stw	r2,-16(fp)
  80333c:	e0fffc17 	ldw	r3,-16(fp)
  803340:	e0bffd17 	ldw	r2,-12(fp)
  803344:	18bff836 	bltu	r3,r2,803328 <__alt_data_end+0xff803328>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  803348:	e0bffe17 	ldw	r2,-8(fp)
  80334c:	108007cc 	andi	r2,r2,31
  803350:	10000226 	beq	r2,zero,80335c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  803354:	e0bffc17 	ldw	r2,-16(fp)
  803358:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80335c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  803360:	0001883a 	nop
  803364:	e037883a 	mov	sp,fp
  803368:	df000017 	ldw	fp,0(sp)
  80336c:	dec00104 	addi	sp,sp,4
  803370:	f800283a 	ret

00803374 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  803374:	defffe04 	addi	sp,sp,-8
  803378:	df000115 	stw	fp,4(sp)
  80337c:	df000104 	addi	fp,sp,4
  803380:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  803384:	e0bfff17 	ldw	r2,-4(fp)
  803388:	10bffe84 	addi	r2,r2,-6
  80338c:	10c00428 	cmpgeui	r3,r2,16
  803390:	18001a1e 	bne	r3,zero,8033fc <alt_exception_cause_generated_bad_addr+0x88>
  803394:	100690ba 	slli	r3,r2,2
  803398:	00802034 	movhi	r2,128
  80339c:	108ceb04 	addi	r2,r2,13228
  8033a0:	1885883a 	add	r2,r3,r2
  8033a4:	10800017 	ldw	r2,0(r2)
  8033a8:	1000683a 	jmp	r2
  8033ac:	008033ec 	andhi	r2,zero,207
  8033b0:	008033ec 	andhi	r2,zero,207
  8033b4:	008033fc 	xorhi	r2,zero,207
  8033b8:	008033fc 	xorhi	r2,zero,207
  8033bc:	008033fc 	xorhi	r2,zero,207
  8033c0:	008033ec 	andhi	r2,zero,207
  8033c4:	008033f4 	movhi	r2,207
  8033c8:	008033fc 	xorhi	r2,zero,207
  8033cc:	008033ec 	andhi	r2,zero,207
  8033d0:	008033ec 	andhi	r2,zero,207
  8033d4:	008033fc 	xorhi	r2,zero,207
  8033d8:	008033ec 	andhi	r2,zero,207
  8033dc:	008033f4 	movhi	r2,207
  8033e0:	008033fc 	xorhi	r2,zero,207
  8033e4:	008033fc 	xorhi	r2,zero,207
  8033e8:	008033ec 	andhi	r2,zero,207
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8033ec:	00800044 	movi	r2,1
  8033f0:	00000306 	br	803400 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8033f4:	0005883a 	mov	r2,zero
  8033f8:	00000106 	br	803400 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8033fc:	0005883a 	mov	r2,zero
  }
}
  803400:	e037883a 	mov	sp,fp
  803404:	df000017 	ldw	fp,0(sp)
  803408:	dec00104 	addi	sp,sp,4
  80340c:	f800283a 	ret

00803410 <atexit>:
  803410:	200b883a 	mov	r5,r4
  803414:	000f883a 	mov	r7,zero
  803418:	000d883a 	mov	r6,zero
  80341c:	0009883a 	mov	r4,zero
  803420:	08037e01 	jmpi	8037e0 <__register_exitproc>

00803424 <exit>:
  803424:	defffe04 	addi	sp,sp,-8
  803428:	000b883a 	mov	r5,zero
  80342c:	dc000015 	stw	r16,0(sp)
  803430:	dfc00115 	stw	ra,4(sp)
  803434:	2021883a 	mov	r16,r4
  803438:	08038f80 	call	8038f8 <__call_exitprocs>
  80343c:	00802034 	movhi	r2,128
  803440:	1095d804 	addi	r2,r2,22368
  803444:	11000017 	ldw	r4,0(r2)
  803448:	20800f17 	ldw	r2,60(r4)
  80344c:	10000126 	beq	r2,zero,803454 <exit+0x30>
  803450:	103ee83a 	callr	r2
  803454:	8009883a 	mov	r4,r16
  803458:	0803c2c0 	call	803c2c <_exit>

0080345c <memcmp>:
  80345c:	01c000c4 	movi	r7,3
  803460:	3980192e 	bgeu	r7,r6,8034c8 <memcmp+0x6c>
  803464:	2144b03a 	or	r2,r4,r5
  803468:	11c4703a 	and	r2,r2,r7
  80346c:	10000f26 	beq	r2,zero,8034ac <memcmp+0x50>
  803470:	20800003 	ldbu	r2,0(r4)
  803474:	28c00003 	ldbu	r3,0(r5)
  803478:	10c0151e 	bne	r2,r3,8034d0 <memcmp+0x74>
  80347c:	31bfff84 	addi	r6,r6,-2
  803480:	01ffffc4 	movi	r7,-1
  803484:	00000406 	br	803498 <memcmp+0x3c>
  803488:	20800003 	ldbu	r2,0(r4)
  80348c:	28c00003 	ldbu	r3,0(r5)
  803490:	31bfffc4 	addi	r6,r6,-1
  803494:	10c00e1e 	bne	r2,r3,8034d0 <memcmp+0x74>
  803498:	21000044 	addi	r4,r4,1
  80349c:	29400044 	addi	r5,r5,1
  8034a0:	31fff91e 	bne	r6,r7,803488 <__alt_data_end+0xff803488>
  8034a4:	0005883a 	mov	r2,zero
  8034a8:	f800283a 	ret
  8034ac:	20c00017 	ldw	r3,0(r4)
  8034b0:	28800017 	ldw	r2,0(r5)
  8034b4:	18bfee1e 	bne	r3,r2,803470 <__alt_data_end+0xff803470>
  8034b8:	31bfff04 	addi	r6,r6,-4
  8034bc:	21000104 	addi	r4,r4,4
  8034c0:	29400104 	addi	r5,r5,4
  8034c4:	39bff936 	bltu	r7,r6,8034ac <__alt_data_end+0xff8034ac>
  8034c8:	303fe91e 	bne	r6,zero,803470 <__alt_data_end+0xff803470>
  8034cc:	003ff506 	br	8034a4 <__alt_data_end+0xff8034a4>
  8034d0:	10c5c83a 	sub	r2,r2,r3
  8034d4:	f800283a 	ret

008034d8 <memcpy>:
  8034d8:	defffd04 	addi	sp,sp,-12
  8034dc:	dfc00215 	stw	ra,8(sp)
  8034e0:	dc400115 	stw	r17,4(sp)
  8034e4:	dc000015 	stw	r16,0(sp)
  8034e8:	00c003c4 	movi	r3,15
  8034ec:	2005883a 	mov	r2,r4
  8034f0:	1980452e 	bgeu	r3,r6,803608 <memcpy+0x130>
  8034f4:	2906b03a 	or	r3,r5,r4
  8034f8:	18c000cc 	andi	r3,r3,3
  8034fc:	1800441e 	bne	r3,zero,803610 <memcpy+0x138>
  803500:	347ffc04 	addi	r17,r6,-16
  803504:	8822d13a 	srli	r17,r17,4
  803508:	28c00104 	addi	r3,r5,4
  80350c:	23400104 	addi	r13,r4,4
  803510:	8820913a 	slli	r16,r17,4
  803514:	2b000204 	addi	r12,r5,8
  803518:	22c00204 	addi	r11,r4,8
  80351c:	84000504 	addi	r16,r16,20
  803520:	2a800304 	addi	r10,r5,12
  803524:	22400304 	addi	r9,r4,12
  803528:	2c21883a 	add	r16,r5,r16
  80352c:	2811883a 	mov	r8,r5
  803530:	200f883a 	mov	r7,r4
  803534:	41000017 	ldw	r4,0(r8)
  803538:	1fc00017 	ldw	ra,0(r3)
  80353c:	63c00017 	ldw	r15,0(r12)
  803540:	39000015 	stw	r4,0(r7)
  803544:	53800017 	ldw	r14,0(r10)
  803548:	6fc00015 	stw	ra,0(r13)
  80354c:	5bc00015 	stw	r15,0(r11)
  803550:	4b800015 	stw	r14,0(r9)
  803554:	18c00404 	addi	r3,r3,16
  803558:	39c00404 	addi	r7,r7,16
  80355c:	42000404 	addi	r8,r8,16
  803560:	6b400404 	addi	r13,r13,16
  803564:	63000404 	addi	r12,r12,16
  803568:	5ac00404 	addi	r11,r11,16
  80356c:	52800404 	addi	r10,r10,16
  803570:	4a400404 	addi	r9,r9,16
  803574:	1c3fef1e 	bne	r3,r16,803534 <__alt_data_end+0xff803534>
  803578:	89c00044 	addi	r7,r17,1
  80357c:	380e913a 	slli	r7,r7,4
  803580:	310003cc 	andi	r4,r6,15
  803584:	02c000c4 	movi	r11,3
  803588:	11c7883a 	add	r3,r2,r7
  80358c:	29cb883a 	add	r5,r5,r7
  803590:	5900212e 	bgeu	r11,r4,803618 <memcpy+0x140>
  803594:	1813883a 	mov	r9,r3
  803598:	2811883a 	mov	r8,r5
  80359c:	200f883a 	mov	r7,r4
  8035a0:	42800017 	ldw	r10,0(r8)
  8035a4:	4a400104 	addi	r9,r9,4
  8035a8:	39ffff04 	addi	r7,r7,-4
  8035ac:	4abfff15 	stw	r10,-4(r9)
  8035b0:	42000104 	addi	r8,r8,4
  8035b4:	59fffa36 	bltu	r11,r7,8035a0 <__alt_data_end+0xff8035a0>
  8035b8:	213fff04 	addi	r4,r4,-4
  8035bc:	2008d0ba 	srli	r4,r4,2
  8035c0:	318000cc 	andi	r6,r6,3
  8035c4:	21000044 	addi	r4,r4,1
  8035c8:	2109883a 	add	r4,r4,r4
  8035cc:	2109883a 	add	r4,r4,r4
  8035d0:	1907883a 	add	r3,r3,r4
  8035d4:	290b883a 	add	r5,r5,r4
  8035d8:	30000626 	beq	r6,zero,8035f4 <memcpy+0x11c>
  8035dc:	198d883a 	add	r6,r3,r6
  8035e0:	29c00003 	ldbu	r7,0(r5)
  8035e4:	18c00044 	addi	r3,r3,1
  8035e8:	29400044 	addi	r5,r5,1
  8035ec:	19ffffc5 	stb	r7,-1(r3)
  8035f0:	19bffb1e 	bne	r3,r6,8035e0 <__alt_data_end+0xff8035e0>
  8035f4:	dfc00217 	ldw	ra,8(sp)
  8035f8:	dc400117 	ldw	r17,4(sp)
  8035fc:	dc000017 	ldw	r16,0(sp)
  803600:	dec00304 	addi	sp,sp,12
  803604:	f800283a 	ret
  803608:	2007883a 	mov	r3,r4
  80360c:	003ff206 	br	8035d8 <__alt_data_end+0xff8035d8>
  803610:	2007883a 	mov	r3,r4
  803614:	003ff106 	br	8035dc <__alt_data_end+0xff8035dc>
  803618:	200d883a 	mov	r6,r4
  80361c:	003fee06 	br	8035d8 <__alt_data_end+0xff8035d8>

00803620 <memset>:
  803620:	20c000cc 	andi	r3,r4,3
  803624:	2005883a 	mov	r2,r4
  803628:	18004426 	beq	r3,zero,80373c <memset+0x11c>
  80362c:	31ffffc4 	addi	r7,r6,-1
  803630:	30004026 	beq	r6,zero,803734 <memset+0x114>
  803634:	2813883a 	mov	r9,r5
  803638:	200d883a 	mov	r6,r4
  80363c:	2007883a 	mov	r3,r4
  803640:	00000406 	br	803654 <memset+0x34>
  803644:	3a3fffc4 	addi	r8,r7,-1
  803648:	31800044 	addi	r6,r6,1
  80364c:	38003926 	beq	r7,zero,803734 <memset+0x114>
  803650:	400f883a 	mov	r7,r8
  803654:	18c00044 	addi	r3,r3,1
  803658:	32400005 	stb	r9,0(r6)
  80365c:	1a0000cc 	andi	r8,r3,3
  803660:	403ff81e 	bne	r8,zero,803644 <__alt_data_end+0xff803644>
  803664:	010000c4 	movi	r4,3
  803668:	21c02d2e 	bgeu	r4,r7,803720 <memset+0x100>
  80366c:	29003fcc 	andi	r4,r5,255
  803670:	200c923a 	slli	r6,r4,8
  803674:	3108b03a 	or	r4,r6,r4
  803678:	200c943a 	slli	r6,r4,16
  80367c:	218cb03a 	or	r6,r4,r6
  803680:	010003c4 	movi	r4,15
  803684:	21c0182e 	bgeu	r4,r7,8036e8 <memset+0xc8>
  803688:	3b3ffc04 	addi	r12,r7,-16
  80368c:	6018d13a 	srli	r12,r12,4
  803690:	1a000104 	addi	r8,r3,4
  803694:	1ac00204 	addi	r11,r3,8
  803698:	6008913a 	slli	r4,r12,4
  80369c:	1a800304 	addi	r10,r3,12
  8036a0:	1813883a 	mov	r9,r3
  8036a4:	21000504 	addi	r4,r4,20
  8036a8:	1909883a 	add	r4,r3,r4
  8036ac:	49800015 	stw	r6,0(r9)
  8036b0:	41800015 	stw	r6,0(r8)
  8036b4:	59800015 	stw	r6,0(r11)
  8036b8:	51800015 	stw	r6,0(r10)
  8036bc:	42000404 	addi	r8,r8,16
  8036c0:	4a400404 	addi	r9,r9,16
  8036c4:	5ac00404 	addi	r11,r11,16
  8036c8:	52800404 	addi	r10,r10,16
  8036cc:	413ff71e 	bne	r8,r4,8036ac <__alt_data_end+0xff8036ac>
  8036d0:	63000044 	addi	r12,r12,1
  8036d4:	6018913a 	slli	r12,r12,4
  8036d8:	39c003cc 	andi	r7,r7,15
  8036dc:	010000c4 	movi	r4,3
  8036e0:	1b07883a 	add	r3,r3,r12
  8036e4:	21c00e2e 	bgeu	r4,r7,803720 <memset+0x100>
  8036e8:	1813883a 	mov	r9,r3
  8036ec:	3811883a 	mov	r8,r7
  8036f0:	010000c4 	movi	r4,3
  8036f4:	49800015 	stw	r6,0(r9)
  8036f8:	423fff04 	addi	r8,r8,-4
  8036fc:	4a400104 	addi	r9,r9,4
  803700:	223ffc36 	bltu	r4,r8,8036f4 <__alt_data_end+0xff8036f4>
  803704:	393fff04 	addi	r4,r7,-4
  803708:	2008d0ba 	srli	r4,r4,2
  80370c:	39c000cc 	andi	r7,r7,3
  803710:	21000044 	addi	r4,r4,1
  803714:	2109883a 	add	r4,r4,r4
  803718:	2109883a 	add	r4,r4,r4
  80371c:	1907883a 	add	r3,r3,r4
  803720:	38000526 	beq	r7,zero,803738 <memset+0x118>
  803724:	19cf883a 	add	r7,r3,r7
  803728:	19400005 	stb	r5,0(r3)
  80372c:	18c00044 	addi	r3,r3,1
  803730:	38fffd1e 	bne	r7,r3,803728 <__alt_data_end+0xff803728>
  803734:	f800283a 	ret
  803738:	f800283a 	ret
  80373c:	2007883a 	mov	r3,r4
  803740:	300f883a 	mov	r7,r6
  803744:	003fc706 	br	803664 <__alt_data_end+0xff803664>

00803748 <strlen>:
  803748:	208000cc 	andi	r2,r4,3
  80374c:	10002026 	beq	r2,zero,8037d0 <strlen+0x88>
  803750:	20800007 	ldb	r2,0(r4)
  803754:	10002026 	beq	r2,zero,8037d8 <strlen+0x90>
  803758:	2005883a 	mov	r2,r4
  80375c:	00000206 	br	803768 <strlen+0x20>
  803760:	10c00007 	ldb	r3,0(r2)
  803764:	18001826 	beq	r3,zero,8037c8 <strlen+0x80>
  803768:	10800044 	addi	r2,r2,1
  80376c:	10c000cc 	andi	r3,r2,3
  803770:	183ffb1e 	bne	r3,zero,803760 <__alt_data_end+0xff803760>
  803774:	10c00017 	ldw	r3,0(r2)
  803778:	01ffbff4 	movhi	r7,65279
  80377c:	39ffbfc4 	addi	r7,r7,-257
  803780:	00ca303a 	nor	r5,zero,r3
  803784:	01a02074 	movhi	r6,32897
  803788:	19c7883a 	add	r3,r3,r7
  80378c:	31a02004 	addi	r6,r6,-32640
  803790:	1946703a 	and	r3,r3,r5
  803794:	1986703a 	and	r3,r3,r6
  803798:	1800091e 	bne	r3,zero,8037c0 <strlen+0x78>
  80379c:	10800104 	addi	r2,r2,4
  8037a0:	10c00017 	ldw	r3,0(r2)
  8037a4:	19cb883a 	add	r5,r3,r7
  8037a8:	00c6303a 	nor	r3,zero,r3
  8037ac:	28c6703a 	and	r3,r5,r3
  8037b0:	1986703a 	and	r3,r3,r6
  8037b4:	183ff926 	beq	r3,zero,80379c <__alt_data_end+0xff80379c>
  8037b8:	00000106 	br	8037c0 <strlen+0x78>
  8037bc:	10800044 	addi	r2,r2,1
  8037c0:	10c00007 	ldb	r3,0(r2)
  8037c4:	183ffd1e 	bne	r3,zero,8037bc <__alt_data_end+0xff8037bc>
  8037c8:	1105c83a 	sub	r2,r2,r4
  8037cc:	f800283a 	ret
  8037d0:	2005883a 	mov	r2,r4
  8037d4:	003fe706 	br	803774 <__alt_data_end+0xff803774>
  8037d8:	0005883a 	mov	r2,zero
  8037dc:	f800283a 	ret

008037e0 <__register_exitproc>:
  8037e0:	defffa04 	addi	sp,sp,-24
  8037e4:	dc000315 	stw	r16,12(sp)
  8037e8:	04002034 	movhi	r16,128
  8037ec:	8415d804 	addi	r16,r16,22368
  8037f0:	80c00017 	ldw	r3,0(r16)
  8037f4:	dc400415 	stw	r17,16(sp)
  8037f8:	dfc00515 	stw	ra,20(sp)
  8037fc:	18805217 	ldw	r2,328(r3)
  803800:	2023883a 	mov	r17,r4
  803804:	10003726 	beq	r2,zero,8038e4 <__register_exitproc+0x104>
  803808:	10c00117 	ldw	r3,4(r2)
  80380c:	010007c4 	movi	r4,31
  803810:	20c00e16 	blt	r4,r3,80384c <__register_exitproc+0x6c>
  803814:	1a000044 	addi	r8,r3,1
  803818:	8800221e 	bne	r17,zero,8038a4 <__register_exitproc+0xc4>
  80381c:	18c00084 	addi	r3,r3,2
  803820:	18c7883a 	add	r3,r3,r3
  803824:	18c7883a 	add	r3,r3,r3
  803828:	12000115 	stw	r8,4(r2)
  80382c:	10c7883a 	add	r3,r2,r3
  803830:	19400015 	stw	r5,0(r3)
  803834:	0005883a 	mov	r2,zero
  803838:	dfc00517 	ldw	ra,20(sp)
  80383c:	dc400417 	ldw	r17,16(sp)
  803840:	dc000317 	ldw	r16,12(sp)
  803844:	dec00604 	addi	sp,sp,24
  803848:	f800283a 	ret
  80384c:	00800034 	movhi	r2,0
  803850:	10800004 	addi	r2,r2,0
  803854:	10002626 	beq	r2,zero,8038f0 <__register_exitproc+0x110>
  803858:	01006404 	movi	r4,400
  80385c:	d9400015 	stw	r5,0(sp)
  803860:	d9800115 	stw	r6,4(sp)
  803864:	d9c00215 	stw	r7,8(sp)
  803868:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  80386c:	d9400017 	ldw	r5,0(sp)
  803870:	d9800117 	ldw	r6,4(sp)
  803874:	d9c00217 	ldw	r7,8(sp)
  803878:	10001d26 	beq	r2,zero,8038f0 <__register_exitproc+0x110>
  80387c:	81000017 	ldw	r4,0(r16)
  803880:	10000115 	stw	zero,4(r2)
  803884:	02000044 	movi	r8,1
  803888:	22405217 	ldw	r9,328(r4)
  80388c:	0007883a 	mov	r3,zero
  803890:	12400015 	stw	r9,0(r2)
  803894:	20805215 	stw	r2,328(r4)
  803898:	10006215 	stw	zero,392(r2)
  80389c:	10006315 	stw	zero,396(r2)
  8038a0:	883fde26 	beq	r17,zero,80381c <__alt_data_end+0xff80381c>
  8038a4:	18c9883a 	add	r4,r3,r3
  8038a8:	2109883a 	add	r4,r4,r4
  8038ac:	1109883a 	add	r4,r2,r4
  8038b0:	21802215 	stw	r6,136(r4)
  8038b4:	01800044 	movi	r6,1
  8038b8:	12406217 	ldw	r9,392(r2)
  8038bc:	30cc983a 	sll	r6,r6,r3
  8038c0:	4992b03a 	or	r9,r9,r6
  8038c4:	12406215 	stw	r9,392(r2)
  8038c8:	21c04215 	stw	r7,264(r4)
  8038cc:	01000084 	movi	r4,2
  8038d0:	893fd21e 	bne	r17,r4,80381c <__alt_data_end+0xff80381c>
  8038d4:	11006317 	ldw	r4,396(r2)
  8038d8:	218cb03a 	or	r6,r4,r6
  8038dc:	11806315 	stw	r6,396(r2)
  8038e0:	003fce06 	br	80381c <__alt_data_end+0xff80381c>
  8038e4:	18805304 	addi	r2,r3,332
  8038e8:	18805215 	stw	r2,328(r3)
  8038ec:	003fc606 	br	803808 <__alt_data_end+0xff803808>
  8038f0:	00bfffc4 	movi	r2,-1
  8038f4:	003fd006 	br	803838 <__alt_data_end+0xff803838>

008038f8 <__call_exitprocs>:
  8038f8:	defff504 	addi	sp,sp,-44
  8038fc:	df000915 	stw	fp,36(sp)
  803900:	dd400615 	stw	r21,24(sp)
  803904:	dc800315 	stw	r18,12(sp)
  803908:	dfc00a15 	stw	ra,40(sp)
  80390c:	ddc00815 	stw	r23,32(sp)
  803910:	dd800715 	stw	r22,28(sp)
  803914:	dd000515 	stw	r20,20(sp)
  803918:	dcc00415 	stw	r19,16(sp)
  80391c:	dc400215 	stw	r17,8(sp)
  803920:	dc000115 	stw	r16,4(sp)
  803924:	d9000015 	stw	r4,0(sp)
  803928:	2839883a 	mov	fp,r5
  80392c:	04800044 	movi	r18,1
  803930:	057fffc4 	movi	r21,-1
  803934:	00802034 	movhi	r2,128
  803938:	1095d804 	addi	r2,r2,22368
  80393c:	12000017 	ldw	r8,0(r2)
  803940:	45005217 	ldw	r20,328(r8)
  803944:	44c05204 	addi	r19,r8,328
  803948:	a0001c26 	beq	r20,zero,8039bc <__call_exitprocs+0xc4>
  80394c:	a0800117 	ldw	r2,4(r20)
  803950:	15ffffc4 	addi	r23,r2,-1
  803954:	b8000d16 	blt	r23,zero,80398c <__call_exitprocs+0x94>
  803958:	14000044 	addi	r16,r2,1
  80395c:	8421883a 	add	r16,r16,r16
  803960:	8421883a 	add	r16,r16,r16
  803964:	84402004 	addi	r17,r16,128
  803968:	a463883a 	add	r17,r20,r17
  80396c:	a421883a 	add	r16,r20,r16
  803970:	e0001e26 	beq	fp,zero,8039ec <__call_exitprocs+0xf4>
  803974:	80804017 	ldw	r2,256(r16)
  803978:	e0801c26 	beq	fp,r2,8039ec <__call_exitprocs+0xf4>
  80397c:	bdffffc4 	addi	r23,r23,-1
  803980:	843fff04 	addi	r16,r16,-4
  803984:	8c7fff04 	addi	r17,r17,-4
  803988:	bd7ff91e 	bne	r23,r21,803970 <__alt_data_end+0xff803970>
  80398c:	00800034 	movhi	r2,0
  803990:	10800004 	addi	r2,r2,0
  803994:	10000926 	beq	r2,zero,8039bc <__call_exitprocs+0xc4>
  803998:	a0800117 	ldw	r2,4(r20)
  80399c:	1000301e 	bne	r2,zero,803a60 <__call_exitprocs+0x168>
  8039a0:	a0800017 	ldw	r2,0(r20)
  8039a4:	10003226 	beq	r2,zero,803a70 <__call_exitprocs+0x178>
  8039a8:	a009883a 	mov	r4,r20
  8039ac:	98800015 	stw	r2,0(r19)
  8039b0:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  8039b4:	9d000017 	ldw	r20,0(r19)
  8039b8:	a03fe41e 	bne	r20,zero,80394c <__alt_data_end+0xff80394c>
  8039bc:	dfc00a17 	ldw	ra,40(sp)
  8039c0:	df000917 	ldw	fp,36(sp)
  8039c4:	ddc00817 	ldw	r23,32(sp)
  8039c8:	dd800717 	ldw	r22,28(sp)
  8039cc:	dd400617 	ldw	r21,24(sp)
  8039d0:	dd000517 	ldw	r20,20(sp)
  8039d4:	dcc00417 	ldw	r19,16(sp)
  8039d8:	dc800317 	ldw	r18,12(sp)
  8039dc:	dc400217 	ldw	r17,8(sp)
  8039e0:	dc000117 	ldw	r16,4(sp)
  8039e4:	dec00b04 	addi	sp,sp,44
  8039e8:	f800283a 	ret
  8039ec:	a0800117 	ldw	r2,4(r20)
  8039f0:	80c00017 	ldw	r3,0(r16)
  8039f4:	10bfffc4 	addi	r2,r2,-1
  8039f8:	15c01426 	beq	r2,r23,803a4c <__call_exitprocs+0x154>
  8039fc:	80000015 	stw	zero,0(r16)
  803a00:	183fde26 	beq	r3,zero,80397c <__alt_data_end+0xff80397c>
  803a04:	95c8983a 	sll	r4,r18,r23
  803a08:	a0806217 	ldw	r2,392(r20)
  803a0c:	a5800117 	ldw	r22,4(r20)
  803a10:	2084703a 	and	r2,r4,r2
  803a14:	10000b26 	beq	r2,zero,803a44 <__call_exitprocs+0x14c>
  803a18:	a0806317 	ldw	r2,396(r20)
  803a1c:	2088703a 	and	r4,r4,r2
  803a20:	20000c1e 	bne	r4,zero,803a54 <__call_exitprocs+0x15c>
  803a24:	89400017 	ldw	r5,0(r17)
  803a28:	d9000017 	ldw	r4,0(sp)
  803a2c:	183ee83a 	callr	r3
  803a30:	a0800117 	ldw	r2,4(r20)
  803a34:	15bfbf1e 	bne	r2,r22,803934 <__alt_data_end+0xff803934>
  803a38:	98800017 	ldw	r2,0(r19)
  803a3c:	153fcf26 	beq	r2,r20,80397c <__alt_data_end+0xff80397c>
  803a40:	003fbc06 	br	803934 <__alt_data_end+0xff803934>
  803a44:	183ee83a 	callr	r3
  803a48:	003ff906 	br	803a30 <__alt_data_end+0xff803a30>
  803a4c:	a5c00115 	stw	r23,4(r20)
  803a50:	003feb06 	br	803a00 <__alt_data_end+0xff803a00>
  803a54:	89000017 	ldw	r4,0(r17)
  803a58:	183ee83a 	callr	r3
  803a5c:	003ff406 	br	803a30 <__alt_data_end+0xff803a30>
  803a60:	a0800017 	ldw	r2,0(r20)
  803a64:	a027883a 	mov	r19,r20
  803a68:	1029883a 	mov	r20,r2
  803a6c:	003fb606 	br	803948 <__alt_data_end+0xff803948>
  803a70:	0005883a 	mov	r2,zero
  803a74:	003ffb06 	br	803a64 <__alt_data_end+0xff803a64>

00803a78 <__divsi3>:
  803a78:	20001b16 	blt	r4,zero,803ae8 <__divsi3+0x70>
  803a7c:	000f883a 	mov	r7,zero
  803a80:	28001616 	blt	r5,zero,803adc <__divsi3+0x64>
  803a84:	200d883a 	mov	r6,r4
  803a88:	29001a2e 	bgeu	r5,r4,803af4 <__divsi3+0x7c>
  803a8c:	00800804 	movi	r2,32
  803a90:	00c00044 	movi	r3,1
  803a94:	00000106 	br	803a9c <__divsi3+0x24>
  803a98:	10000d26 	beq	r2,zero,803ad0 <__divsi3+0x58>
  803a9c:	294b883a 	add	r5,r5,r5
  803aa0:	10bfffc4 	addi	r2,r2,-1
  803aa4:	18c7883a 	add	r3,r3,r3
  803aa8:	293ffb36 	bltu	r5,r4,803a98 <__alt_data_end+0xff803a98>
  803aac:	0005883a 	mov	r2,zero
  803ab0:	18000726 	beq	r3,zero,803ad0 <__divsi3+0x58>
  803ab4:	0005883a 	mov	r2,zero
  803ab8:	31400236 	bltu	r6,r5,803ac4 <__divsi3+0x4c>
  803abc:	314dc83a 	sub	r6,r6,r5
  803ac0:	10c4b03a 	or	r2,r2,r3
  803ac4:	1806d07a 	srli	r3,r3,1
  803ac8:	280ad07a 	srli	r5,r5,1
  803acc:	183ffa1e 	bne	r3,zero,803ab8 <__alt_data_end+0xff803ab8>
  803ad0:	38000126 	beq	r7,zero,803ad8 <__divsi3+0x60>
  803ad4:	0085c83a 	sub	r2,zero,r2
  803ad8:	f800283a 	ret
  803adc:	014bc83a 	sub	r5,zero,r5
  803ae0:	39c0005c 	xori	r7,r7,1
  803ae4:	003fe706 	br	803a84 <__alt_data_end+0xff803a84>
  803ae8:	0109c83a 	sub	r4,zero,r4
  803aec:	01c00044 	movi	r7,1
  803af0:	003fe306 	br	803a80 <__alt_data_end+0xff803a80>
  803af4:	00c00044 	movi	r3,1
  803af8:	003fee06 	br	803ab4 <__alt_data_end+0xff803ab4>

00803afc <__modsi3>:
  803afc:	20001716 	blt	r4,zero,803b5c <__modsi3+0x60>
  803b00:	000f883a 	mov	r7,zero
  803b04:	2005883a 	mov	r2,r4
  803b08:	28001216 	blt	r5,zero,803b54 <__modsi3+0x58>
  803b0c:	2900162e 	bgeu	r5,r4,803b68 <__modsi3+0x6c>
  803b10:	01800804 	movi	r6,32
  803b14:	00c00044 	movi	r3,1
  803b18:	00000106 	br	803b20 <__modsi3+0x24>
  803b1c:	30000a26 	beq	r6,zero,803b48 <__modsi3+0x4c>
  803b20:	294b883a 	add	r5,r5,r5
  803b24:	31bfffc4 	addi	r6,r6,-1
  803b28:	18c7883a 	add	r3,r3,r3
  803b2c:	293ffb36 	bltu	r5,r4,803b1c <__alt_data_end+0xff803b1c>
  803b30:	18000526 	beq	r3,zero,803b48 <__modsi3+0x4c>
  803b34:	1806d07a 	srli	r3,r3,1
  803b38:	11400136 	bltu	r2,r5,803b40 <__modsi3+0x44>
  803b3c:	1145c83a 	sub	r2,r2,r5
  803b40:	280ad07a 	srli	r5,r5,1
  803b44:	183ffb1e 	bne	r3,zero,803b34 <__alt_data_end+0xff803b34>
  803b48:	38000126 	beq	r7,zero,803b50 <__modsi3+0x54>
  803b4c:	0085c83a 	sub	r2,zero,r2
  803b50:	f800283a 	ret
  803b54:	014bc83a 	sub	r5,zero,r5
  803b58:	003fec06 	br	803b0c <__alt_data_end+0xff803b0c>
  803b5c:	0109c83a 	sub	r4,zero,r4
  803b60:	01c00044 	movi	r7,1
  803b64:	003fe706 	br	803b04 <__alt_data_end+0xff803b04>
  803b68:	00c00044 	movi	r3,1
  803b6c:	003ff106 	br	803b34 <__alt_data_end+0xff803b34>

00803b70 <__udivsi3>:
  803b70:	200d883a 	mov	r6,r4
  803b74:	2900152e 	bgeu	r5,r4,803bcc <__udivsi3+0x5c>
  803b78:	28001416 	blt	r5,zero,803bcc <__udivsi3+0x5c>
  803b7c:	00800804 	movi	r2,32
  803b80:	00c00044 	movi	r3,1
  803b84:	00000206 	br	803b90 <__udivsi3+0x20>
  803b88:	10000e26 	beq	r2,zero,803bc4 <__udivsi3+0x54>
  803b8c:	28000516 	blt	r5,zero,803ba4 <__udivsi3+0x34>
  803b90:	294b883a 	add	r5,r5,r5
  803b94:	10bfffc4 	addi	r2,r2,-1
  803b98:	18c7883a 	add	r3,r3,r3
  803b9c:	293ffa36 	bltu	r5,r4,803b88 <__alt_data_end+0xff803b88>
  803ba0:	18000826 	beq	r3,zero,803bc4 <__udivsi3+0x54>
  803ba4:	0005883a 	mov	r2,zero
  803ba8:	31400236 	bltu	r6,r5,803bb4 <__udivsi3+0x44>
  803bac:	314dc83a 	sub	r6,r6,r5
  803bb0:	10c4b03a 	or	r2,r2,r3
  803bb4:	1806d07a 	srli	r3,r3,1
  803bb8:	280ad07a 	srli	r5,r5,1
  803bbc:	183ffa1e 	bne	r3,zero,803ba8 <__alt_data_end+0xff803ba8>
  803bc0:	f800283a 	ret
  803bc4:	0005883a 	mov	r2,zero
  803bc8:	f800283a 	ret
  803bcc:	00c00044 	movi	r3,1
  803bd0:	003ff406 	br	803ba4 <__alt_data_end+0xff803ba4>

00803bd4 <__umodsi3>:
  803bd4:	2005883a 	mov	r2,r4
  803bd8:	2900122e 	bgeu	r5,r4,803c24 <__umodsi3+0x50>
  803bdc:	28001116 	blt	r5,zero,803c24 <__umodsi3+0x50>
  803be0:	01800804 	movi	r6,32
  803be4:	00c00044 	movi	r3,1
  803be8:	00000206 	br	803bf4 <__umodsi3+0x20>
  803bec:	30000c26 	beq	r6,zero,803c20 <__umodsi3+0x4c>
  803bf0:	28000516 	blt	r5,zero,803c08 <__umodsi3+0x34>
  803bf4:	294b883a 	add	r5,r5,r5
  803bf8:	31bfffc4 	addi	r6,r6,-1
  803bfc:	18c7883a 	add	r3,r3,r3
  803c00:	293ffa36 	bltu	r5,r4,803bec <__alt_data_end+0xff803bec>
  803c04:	18000626 	beq	r3,zero,803c20 <__umodsi3+0x4c>
  803c08:	1806d07a 	srli	r3,r3,1
  803c0c:	11400136 	bltu	r2,r5,803c14 <__umodsi3+0x40>
  803c10:	1145c83a 	sub	r2,r2,r5
  803c14:	280ad07a 	srli	r5,r5,1
  803c18:	183ffb1e 	bne	r3,zero,803c08 <__alt_data_end+0xff803c08>
  803c1c:	f800283a 	ret
  803c20:	f800283a 	ret
  803c24:	00c00044 	movi	r3,1
  803c28:	003ff706 	br	803c08 <__alt_data_end+0xff803c08>

00803c2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  803c2c:	defffd04 	addi	sp,sp,-12
  803c30:	df000215 	stw	fp,8(sp)
  803c34:	df000204 	addi	fp,sp,8
  803c38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  803c3c:	0001883a 	nop
  803c40:	e0bfff17 	ldw	r2,-4(fp)
  803c44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  803c48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  803c4c:	10000226 	beq	r2,zero,803c58 <_exit+0x2c>
    ALT_SIM_FAIL();
  803c50:	002af070 	cmpltui	zero,zero,43969
  803c54:	00000106 	br	803c5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  803c58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  803c5c:	003fff06 	br	803c5c <__alt_data_end+0xff803c5c>
